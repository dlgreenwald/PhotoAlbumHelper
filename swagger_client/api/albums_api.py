# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AlbumsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_photos_to_album(self, photos, uid, **kwargs):  # noqa: E501
        """adds photos to an album  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_photos_to_album(photos, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection photos: Photo Selection (required)
        :param str uid: Album UID (required)
        :return: GinH
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_photos_to_album_with_http_info(photos, uid, **kwargs)  # noqa: E501
        else:
            (data) = self.add_photos_to_album_with_http_info(photos, uid, **kwargs)  # noqa: E501
            return data

    def add_photos_to_album_with_http_info(self, photos, uid, **kwargs):  # noqa: E501
        """adds photos to an album  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_photos_to_album_with_http_info(photos, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection photos: Photo Selection (required)
        :param str uid: Album UID (required)
        :return: GinH
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['photos', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_photos_to_album" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'photos' is set
        if self.api_client.client_side_validation and ('photos' not in params or
                                                       params['photos'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `photos` when calling `add_photos_to_album`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `add_photos_to_album`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'photos' in params:
            body_params = params['photos']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums/{uid}/photos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GinH',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def album_cover(self, uid, token, size, **kwargs):  # noqa: E501
        """returns an album cover image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.album_cover(uid, token, size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Album UID (required)
        :param str token: user-specific security token provided with session or 'public' when running PhotoPrism in public mode (required)
        :param str size: thumbnail size (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.album_cover_with_http_info(uid, token, size, **kwargs)  # noqa: E501
        else:
            (data) = self.album_cover_with_http_info(uid, token, size, **kwargs)  # noqa: E501
            return data

    def album_cover_with_http_info(self, uid, token, size, **kwargs):  # noqa: E501
        """returns an album cover image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.album_cover_with_http_info(uid, token, size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Album UID (required)
        :param str token: user-specific security token provided with session or 'public' when running PhotoPrism in public mode (required)
        :param str size: thumbnail size (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid', 'token', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method album_cover" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `album_cover`")  # noqa: E501
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in params or
                                                       params['token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `token` when calling `album_cover`")  # noqa: E501
        # verify the required parameter 'size' is set
        if self.api_client.client_side_validation and ('size' not in params or
                                                       params['size'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `size` when calling `album_cover`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'size' in params:
            path_params['size'] = params['size']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg', 'image/svg+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums/{uid}/t/{token}/{size}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_albums_delete(self, albums, **kwargs):  # noqa: E501
        """permanently removes multiple albums  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_albums_delete(albums, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection albums: Album Selection (required)
        :return: I18nResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_albums_delete_with_http_info(albums, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_albums_delete_with_http_info(albums, **kwargs)  # noqa: E501
            return data

    def batch_albums_delete_with_http_info(self, albums, **kwargs):  # noqa: E501
        """permanently removes multiple albums  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_albums_delete_with_http_info(albums, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection albums: Album Selection (required)
        :return: I18nResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['albums']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_albums_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'albums' is set
        if self.api_client.client_side_validation and ('albums' not in params or
                                                       params['albums'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `albums` when calling `batch_albums_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'albums' in params:
            body_params = params['albums']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/batch/albums/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='I18nResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clone_albums(self, albums, uid, **kwargs):  # noqa: E501
        """creates a new album containing pictures from other albums  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clone_albums(albums, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection albums: Album Selection (required)
        :param str uid: UID of the album to which the pictures are to be added (required)
        :return: GinH
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clone_albums_with_http_info(albums, uid, **kwargs)  # noqa: E501
        else:
            (data) = self.clone_albums_with_http_info(albums, uid, **kwargs)  # noqa: E501
            return data

    def clone_albums_with_http_info(self, albums, uid, **kwargs):  # noqa: E501
        """creates a new album containing pictures from other albums  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clone_albums_with_http_info(albums, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection albums: Album Selection (required)
        :param str uid: UID of the album to which the pictures are to be added (required)
        :return: GinH
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['albums', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clone_albums" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'albums' is set
        if self.api_client.client_side_validation and ('albums' not in params or
                                                       params['albums'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `albums` when calling `clone_albums`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `clone_albums`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'albums' in params:
            body_params = params['albums']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums/{uid}/clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GinH',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_album(self, album, **kwargs):  # noqa: E501
        """creates a new album  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_album(album, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormAlbum album: properties of the album to be created (currently supports Title and Favorite) (required)
        :return: EntityAlbum
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_album_with_http_info(album, **kwargs)  # noqa: E501
        else:
            (data) = self.create_album_with_http_info(album, **kwargs)  # noqa: E501
            return data

    def create_album_with_http_info(self, album, **kwargs):  # noqa: E501
        """creates a new album  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_album_with_http_info(album, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormAlbum album: properties of the album to be created (currently supports Title and Favorite) (required)
        :return: EntityAlbum
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['album']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_album" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'album' is set
        if self.api_client.client_side_validation and ('album' not in params or
                                                       params['album'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `album` when calling `create_album`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'album' in params:
            body_params = params['album']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityAlbum',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_album_link(self, uid, link, **kwargs):  # noqa: E501
        """adds a new album share link and return it as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_album_link(uid, link, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: album uid (required)
        :param FormLink link: link properties (currently supported: slug, expires) (required)
        :return: EntityLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_album_link_with_http_info(uid, link, **kwargs)  # noqa: E501
        else:
            (data) = self.create_album_link_with_http_info(uid, link, **kwargs)  # noqa: E501
            return data

    def create_album_link_with_http_info(self, uid, link, **kwargs):  # noqa: E501
        """adds a new album share link and return it as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_album_link_with_http_info(uid, link, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: album uid (required)
        :param FormLink link: link properties (currently supported: slug, expires) (required)
        :return: EntityLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid', 'link']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_album_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `create_album_link`")  # noqa: E501
        # verify the required parameter 'link' is set
        if self.api_client.client_side_validation and ('link' not in params or
                                                       params['link'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `link` when calling `create_album_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'link' in params:
            body_params = params['link']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums/{uid}/links', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_album(self, uid, **kwargs):  # noqa: E501
        """deletes an existing album  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_album(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Album UID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_album_with_http_info(uid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_album_with_http_info(uid, **kwargs)  # noqa: E501
            return data

    def delete_album_with_http_info(self, uid, **kwargs):  # noqa: E501
        """deletes an existing album  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_album_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Album UID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_album" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `delete_album`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums/{uid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_album_link(self, uid, linkuid, **kwargs):  # noqa: E501
        """deletes an album share link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_album_link(uid, linkuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: album (required)
        :param str linkuid: link uid (required)
        :return: EntityLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_album_link_with_http_info(uid, linkuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_album_link_with_http_info(uid, linkuid, **kwargs)  # noqa: E501
            return data

    def delete_album_link_with_http_info(self, uid, linkuid, **kwargs):  # noqa: E501
        """deletes an album share link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_album_link_with_http_info(uid, linkuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: album (required)
        :param str linkuid: link uid (required)
        :return: EntityLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid', 'linkuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_album_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `delete_album_link`")  # noqa: E501
        # verify the required parameter 'linkuid' is set
        if self.api_client.client_side_validation and ('linkuid' not in params or
                                                       params['linkuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `linkuid` when calling `delete_album_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501
        if 'linkuid' in params:
            path_params['linkuid'] = params['linkuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums/{uid}/links/{linkuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dislike_album(self, uid, **kwargs):  # noqa: E501
        """removes the favorite flag from an album  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dislike_album(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Album UID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dislike_album_with_http_info(uid, **kwargs)  # noqa: E501
        else:
            (data) = self.dislike_album_with_http_info(uid, **kwargs)  # noqa: E501
            return data

    def dislike_album_with_http_info(self, uid, **kwargs):  # noqa: E501
        """removes the favorite flag from an album  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dislike_album_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Album UID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dislike_album" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `dislike_album`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums/{uid}/like', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_album(self, uid, **kwargs):  # noqa: E501
        """streams the album contents as zip archiv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_album(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Album UID (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_album_with_http_info(uid, **kwargs)  # noqa: E501
        else:
            (data) = self.download_album_with_http_info(uid, **kwargs)  # noqa: E501
            return data

    def download_album_with_http_info(self, uid, **kwargs):  # noqa: E501
        """streams the album contents as zip archiv  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_album_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Album UID (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_album" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `download_album`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/zip'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums/{uid}/dl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_album(self, uid, **kwargs):  # noqa: E501
        """returns album details as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_album(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Album UID (required)
        :return: EntityAlbum
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_album_with_http_info(uid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_album_with_http_info(uid, **kwargs)  # noqa: E501
            return data

    def get_album_with_http_info(self, uid, **kwargs):  # noqa: E501
        """returns album details as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_album_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Album UID (required)
        :return: EntityAlbum
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_album" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `get_album`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums/{uid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityAlbum',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_album_links(self, uid, **kwargs):  # noqa: E501
        """returns all share links for the given UID as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_album_links(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: album uid (required)
        :return: EntityLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_album_links_with_http_info(uid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_album_links_with_http_info(uid, **kwargs)  # noqa: E501
            return data

    def get_album_links_with_http_info(self, uid, **kwargs):  # noqa: E501
        """returns all share links for the given UID as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_album_links_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: album uid (required)
        :return: EntityLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_album_links" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `get_album_links`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums/{uid}/links', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_moments_time(self, **kwargs):  # noqa: E501
        """returns monthly albums as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_moments_time(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EntityAlbum
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_moments_time_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_moments_time_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_moments_time_with_http_info(self, **kwargs):  # noqa: E501
        """returns monthly albums as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_moments_time_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: EntityAlbum
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_moments_time" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/moments/time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityAlbum',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def like_album(self, uid, **kwargs):  # noqa: E501
        """sets the favorite flag for an album  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.like_album(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Album UID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.like_album_with_http_info(uid, **kwargs)  # noqa: E501
        else:
            (data) = self.like_album_with_http_info(uid, **kwargs)  # noqa: E501
            return data

    def like_album_with_http_info(self, uid, **kwargs):  # noqa: E501
        """sets the favorite flag for an album  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.like_album_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Album UID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method like_album" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `like_album`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums/{uid}/like', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_photos_from_album(self, photos, uid, **kwargs):  # noqa: E501
        """removes photos from an album  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_photos_from_album(photos, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection photos: Photo Selection (required)
        :param str uid: Album UID (required)
        :return: GinH
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_photos_from_album_with_http_info(photos, uid, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_photos_from_album_with_http_info(photos, uid, **kwargs)  # noqa: E501
            return data

    def remove_photos_from_album_with_http_info(self, photos, uid, **kwargs):  # noqa: E501
        """removes photos from an album  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_photos_from_album_with_http_info(photos, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection photos: Photo Selection (required)
        :param str uid: Album UID (required)
        :return: GinH
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['photos', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_photos_from_album" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'photos' is set
        if self.api_client.client_side_validation and ('photos' not in params or
                                                       params['photos'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `photos` when calling `remove_photos_from_album`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `remove_photos_from_album`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'photos' in params:
            body_params = params['photos']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums/{uid}/photos', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GinH',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_albums(self, count, **kwargs):  # noqa: E501
        """finds albums and returns them as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_albums(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: maximum number of results (required)
        :param int offset: search result offset
        :param str order: sort order
        :param str q: search query
        :return: list[SearchAlbum]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_albums_with_http_info(count, **kwargs)  # noqa: E501
        else:
            (data) = self.search_albums_with_http_info(count, **kwargs)  # noqa: E501
            return data

    def search_albums_with_http_info(self, count, **kwargs):  # noqa: E501
        """finds albums and returns them as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_albums_with_http_info(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: maximum number of results (required)
        :param int offset: search result offset
        :param str order: sort order
        :param str q: search query
        :return: list[SearchAlbum]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'offset', 'order', 'q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_albums" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in params or
                                                       params['count'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `count` when calling `search_albums`")  # noqa: E501

        if self.api_client.client_side_validation and ('count' in params and params['count'] > 100000):  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling `search_albums`, must be a value less than or equal to `100000`")  # noqa: E501
        if self.api_client.client_side_validation and ('count' in params and params['count'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling `search_albums`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 100000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `search_albums`, must be a value less than or equal to `100000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `search_albums`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SearchAlbum]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_album(self, uid, album, **kwargs):  # noqa: E501
        """updates album metadata like title and description  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_album(uid, album, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Album UID (required)
        :param FormAlbum album: properties to be updated (required)
        :return: EntityAlbum
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_album_with_http_info(uid, album, **kwargs)  # noqa: E501
        else:
            (data) = self.update_album_with_http_info(uid, album, **kwargs)  # noqa: E501
            return data

    def update_album_with_http_info(self, uid, album, **kwargs):  # noqa: E501
        """updates album metadata like title and description  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_album_with_http_info(uid, album, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Album UID (required)
        :param FormAlbum album: properties to be updated (required)
        :return: EntityAlbum
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid', 'album']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_album" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `update_album`")  # noqa: E501
        # verify the required parameter 'album' is set
        if self.api_client.client_side_validation and ('album' not in params or
                                                       params['album'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `album` when calling `update_album`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'album' in params:
            body_params = params['album']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums/{uid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityAlbum',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_album_link(self, uid, linkuid, link, **kwargs):  # noqa: E501
        """updates an album share link and return it as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_album_link(uid, linkuid, link, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: album uid (required)
        :param str linkuid: link uid (required)
        :param FormLink link: properties to be updated (currently supported: slug, expires, token) (required)
        :return: EntityLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_album_link_with_http_info(uid, linkuid, link, **kwargs)  # noqa: E501
        else:
            (data) = self.update_album_link_with_http_info(uid, linkuid, link, **kwargs)  # noqa: E501
            return data

    def update_album_link_with_http_info(self, uid, linkuid, link, **kwargs):  # noqa: E501
        """updates an album share link and return it as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_album_link_with_http_info(uid, linkuid, link, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: album uid (required)
        :param str linkuid: link uid (required)
        :param FormLink link: properties to be updated (currently supported: slug, expires, token) (required)
        :return: EntityLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid', 'linkuid', 'link']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_album_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `update_album_link`")  # noqa: E501
        # verify the required parameter 'linkuid' is set
        if self.api_client.client_side_validation and ('linkuid' not in params or
                                                       params['linkuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `linkuid` when calling `update_album_link`")  # noqa: E501
        # verify the required parameter 'link' is set
        if self.api_client.client_side_validation and ('link' not in params or
                                                       params['link'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `link` when calling `update_album_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501
        if 'linkuid' in params:
            path_params['linkuid'] = params['linkuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'link' in params:
            body_params = params['link']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/albums/{uid}/links/{linkuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
