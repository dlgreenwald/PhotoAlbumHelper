# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PhotosApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_photo_label(self, label, uid, **kwargs):  # noqa: E501
        """adds a label to a photo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_photo_label(label, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormLabel label: label properties (required)
        :param str uid: photo uid (required)
        :return: EntityPhoto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_photo_label_with_http_info(label, uid, **kwargs)  # noqa: E501
        else:
            (data) = self.add_photo_label_with_http_info(label, uid, **kwargs)  # noqa: E501
            return data

    def add_photo_label_with_http_info(self, label, uid, **kwargs):  # noqa: E501
        """adds a label to a photo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_photo_label_with_http_info(label, uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormLabel label: label properties (required)
        :param str uid: photo uid (required)
        :return: EntityPhoto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['label', 'uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_photo_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'label' is set
        if self.api_client.client_side_validation and ('label' not in params or
                                                       params['label'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `label` when calling `add_photo_label`")  # noqa: E501
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `add_photo_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'label' in params:
            body_params = params['label']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/photos/{uid}/label', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityPhoto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def approve_photo(self, uid, **kwargs):  # noqa: E501
        """marks a photo in review as approved  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_photo(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :return: GinH
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.approve_photo_with_http_info(uid, **kwargs)  # noqa: E501
        else:
            (data) = self.approve_photo_with_http_info(uid, **kwargs)  # noqa: E501
            return data

    def approve_photo_with_http_info(self, uid, **kwargs):  # noqa: E501
        """marks a photo in review as approved  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_photo_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :return: GinH
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_photo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `approve_photo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/photos/{uid}/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GinH',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_photos_approve(self, photos, **kwargs):  # noqa: E501
        """approves multiple photos that are currently under review  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_photos_approve(photos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection photos: Photo Selection (required)
        :return: I18nResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_photos_approve_with_http_info(photos, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_photos_approve_with_http_info(photos, **kwargs)  # noqa: E501
            return data

    def batch_photos_approve_with_http_info(self, photos, **kwargs):  # noqa: E501
        """approves multiple photos that are currently under review  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_photos_approve_with_http_info(photos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection photos: Photo Selection (required)
        :return: I18nResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['photos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_photos_approve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'photos' is set
        if self.api_client.client_side_validation and ('photos' not in params or
                                                       params['photos'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `photos` when calling `batch_photos_approve`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'photos' in params:
            body_params = params['photos']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/batch/photos/approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='I18nResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_photos_archive(self, photos, **kwargs):  # noqa: E501
        """moves multiple photos to the archive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_photos_archive(photos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection photos: Photo Selection (required)
        :return: I18nResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_photos_archive_with_http_info(photos, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_photos_archive_with_http_info(photos, **kwargs)  # noqa: E501
            return data

    def batch_photos_archive_with_http_info(self, photos, **kwargs):  # noqa: E501
        """moves multiple photos to the archive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_photos_archive_with_http_info(photos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection photos: Photo Selection (required)
        :return: I18nResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['photos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_photos_archive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'photos' is set
        if self.api_client.client_side_validation and ('photos' not in params or
                                                       params['photos'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `photos` when calling `batch_photos_archive`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'photos' in params:
            body_params = params['photos']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/batch/photos/archive', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='I18nResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_photos_delete(self, photos, **kwargs):  # noqa: E501
        """permanently removes multiple or all photos from the archive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_photos_delete(photos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection photos: All or Photo Selection (required)
        :return: I18nResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_photos_delete_with_http_info(photos, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_photos_delete_with_http_info(photos, **kwargs)  # noqa: E501
            return data

    def batch_photos_delete_with_http_info(self, photos, **kwargs):  # noqa: E501
        """permanently removes multiple or all photos from the archive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_photos_delete_with_http_info(photos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection photos: All or Photo Selection (required)
        :return: I18nResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['photos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_photos_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'photos' is set
        if self.api_client.client_side_validation and ('photos' not in params or
                                                       params['photos'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `photos` when calling `batch_photos_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'photos' in params:
            body_params = params['photos']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/batch/photos/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='I18nResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_photos_private(self, photos, **kwargs):  # noqa: E501
        """toggles private state of multiple photos  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_photos_private(photos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection photos: Photo Selection (required)
        :return: I18nResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_photos_private_with_http_info(photos, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_photos_private_with_http_info(photos, **kwargs)  # noqa: E501
            return data

    def batch_photos_private_with_http_info(self, photos, **kwargs):  # noqa: E501
        """toggles private state of multiple photos  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_photos_private_with_http_info(photos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection photos: Photo Selection (required)
        :return: I18nResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['photos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_photos_private" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'photos' is set
        if self.api_client.client_side_validation and ('photos' not in params or
                                                       params['photos'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `photos` when calling `batch_photos_private`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'photos' in params:
            body_params = params['photos']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/batch/photos/private', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='I18nResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_photos_restore(self, photos, **kwargs):  # noqa: E501
        """restores multiple photos from the archive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_photos_restore(photos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection photos: Photo Selection (required)
        :return: I18nResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_photos_restore_with_http_info(photos, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_photos_restore_with_http_info(photos, **kwargs)  # noqa: E501
            return data

    def batch_photos_restore_with_http_info(self, photos, **kwargs):  # noqa: E501
        """restores multiple photos from the archive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_photos_restore_with_http_info(photos, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FormSelection photos: Photo Selection (required)
        :return: I18nResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['photos']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_photos_restore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'photos' is set
        if self.api_client.client_side_validation and ('photos' not in params or
                                                       params['photos'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `photos` when calling `batch_photos_restore`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'photos' in params:
            body_params = params['photos']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/batch/photos/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='I18nResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dislike_photo(self, uid, **kwargs):  # noqa: E501
        """removes the favorite flags from a photo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dislike_photo(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :return: GinH
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dislike_photo_with_http_info(uid, **kwargs)  # noqa: E501
        else:
            (data) = self.dislike_photo_with_http_info(uid, **kwargs)  # noqa: E501
            return data

    def dislike_photo_with_http_info(self, uid, **kwargs):  # noqa: E501
        """removes the favorite flags from a photo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dislike_photo_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :return: GinH
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dislike_photo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `dislike_photo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/photos/{uid}/like', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GinH',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_photo(self, uid, **kwargs):  # noqa: E501
        """returns picture details as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_photo(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Photo UID (required)
        :return: EntityPhoto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_photo_with_http_info(uid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_photo_with_http_info(uid, **kwargs)  # noqa: E501
            return data

    def get_photo_with_http_info(self, uid, **kwargs):  # noqa: E501
        """returns picture details as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_photo_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Photo UID (required)
        :return: EntityPhoto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_photo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `get_photo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/photos/{uid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityPhoto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_photo_yaml(self, uid, **kwargs):  # noqa: E501
        """returns picture details as YAML  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_photo_yaml(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_photo_yaml_with_http_info(uid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_photo_yaml_with_http_info(uid, **kwargs)  # noqa: E501
            return data

    def get_photo_yaml_with_http_info(self, uid, **kwargs):  # noqa: E501
        """returns picture details as YAML  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_photo_yaml_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_photo_yaml" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `get_photo_yaml`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/x-yaml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/photos/{uid}/yaml', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def like_photo(self, uid, **kwargs):  # noqa: E501
        """flags a photo as favorite  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.like_photo(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :return: GinH
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.like_photo_with_http_info(uid, **kwargs)  # noqa: E501
        else:
            (data) = self.like_photo_with_http_info(uid, **kwargs)  # noqa: E501
            return data

    def like_photo_with_http_info(self, uid, **kwargs):  # noqa: E501
        """flags a photo as favorite  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.like_photo_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :return: GinH
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method like_photo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `like_photo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/photos/{uid}/like', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GinH',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def photo_primary(self, uid, fileuid, **kwargs):  # noqa: E501
        """sets the primary file for a photo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.photo_primary(uid, fileuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :param str fileuid: file uid (required)
        :return: EntityPhoto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.photo_primary_with_http_info(uid, fileuid, **kwargs)  # noqa: E501
        else:
            (data) = self.photo_primary_with_http_info(uid, fileuid, **kwargs)  # noqa: E501
            return data

    def photo_primary_with_http_info(self, uid, fileuid, **kwargs):  # noqa: E501
        """sets the primary file for a photo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.photo_primary_with_http_info(uid, fileuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :param str fileuid: file uid (required)
        :return: EntityPhoto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid', 'fileuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method photo_primary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `photo_primary`")  # noqa: E501
        # verify the required parameter 'fileuid' is set
        if self.api_client.client_side_validation and ('fileuid' not in params or
                                                       params['fileuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fileuid` when calling `photo_primary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501
        if 'fileuid' in params:
            path_params['fileuid'] = params['fileuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/photos/{uid}/files/{fileuid}/primary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityPhoto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def photo_unstack(self, uid, fileuid, **kwargs):  # noqa: E501
        """removes a file from an existing photo stack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.photo_unstack(uid, fileuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :param str fileuid: file uid (required)
        :return: EntityPhoto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.photo_unstack_with_http_info(uid, fileuid, **kwargs)  # noqa: E501
        else:
            (data) = self.photo_unstack_with_http_info(uid, fileuid, **kwargs)  # noqa: E501
            return data

    def photo_unstack_with_http_info(self, uid, fileuid, **kwargs):  # noqa: E501
        """removes a file from an existing photo stack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.photo_unstack_with_http_info(uid, fileuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :param str fileuid: file uid (required)
        :return: EntityPhoto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid', 'fileuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method photo_unstack" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `photo_unstack`")  # noqa: E501
        # verify the required parameter 'fileuid' is set
        if self.api_client.client_side_validation and ('fileuid' not in params or
                                                       params['fileuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `fileuid` when calling `photo_unstack`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501
        if 'fileuid' in params:
            path_params['fileuid'] = params['fileuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/photos/{uid}/files/{fileuid}/unstack', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityPhoto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_photo_label(self, uid, id, **kwargs):  # noqa: E501
        """removes a label from a photo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_photo_label(uid, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :param str id: label id (required)
        :return: EntityPhoto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_photo_label_with_http_info(uid, id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_photo_label_with_http_info(uid, id, **kwargs)  # noqa: E501
            return data

    def remove_photo_label_with_http_info(self, uid, id, **kwargs):  # noqa: E501
        """removes a label from a photo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_photo_label_with_http_info(uid, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :param str id: label id (required)
        :return: EntityPhoto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_photo_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `remove_photo_label`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `remove_photo_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/photos/{uid}/label/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityPhoto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_geo(self, count, quality, **kwargs):  # noqa: E501
        """finds photos and returns results as JSON, so they can be displayed on a map or in a viewer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_geo(count, quality, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: maximum number of files (required)
        :param int quality: minimum quality score (1-7) (required)
        :param int offset: file offset
        :param bool public: excludes private pictures
        :param str q: search query
        :param str s: album uid
        :param str path: photo path
        :param bool video: is type video
        :return: list[SearchGeoResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_geo_with_http_info(count, quality, **kwargs)  # noqa: E501
        else:
            (data) = self.search_geo_with_http_info(count, quality, **kwargs)  # noqa: E501
            return data

    def search_geo_with_http_info(self, count, quality, **kwargs):  # noqa: E501
        """finds photos and returns results as JSON, so they can be displayed on a map or in a viewer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_geo_with_http_info(count, quality, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: maximum number of files (required)
        :param int quality: minimum quality score (1-7) (required)
        :param int offset: file offset
        :param bool public: excludes private pictures
        :param str q: search query
        :param str s: album uid
        :param str path: photo path
        :param bool video: is type video
        :return: list[SearchGeoResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'quality', 'offset', 'public', 'q', 's', 'path', 'video']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_geo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in params or
                                                       params['count'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `count` when calling `search_geo`")  # noqa: E501
        # verify the required parameter 'quality' is set
        if self.api_client.client_side_validation and ('quality' not in params or
                                                       params['quality'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quality` when calling `search_geo`")  # noqa: E501

        if self.api_client.client_side_validation and ('count' in params and params['count'] > 100000):  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling `search_geo`, must be a value less than or equal to `100000`")  # noqa: E501
        if self.api_client.client_side_validation and ('count' in params and params['count'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling `search_geo`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 100000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `search_geo`, must be a value less than or equal to `100000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `search_geo`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'public' in params:
            query_params.append(('public', params['public']))  # noqa: E501
        if 'quality' in params:
            query_params.append(('quality', params['quality']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 's' in params:
            query_params.append(('s', params['s']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'video' in params:
            query_params.append(('video', params['video']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/geo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SearchGeoResult]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_photos(self, count, quality, **kwargs):  # noqa: E501
        """finds pictures and returns them as JSON  # noqa: E501

        Fore more information see: - https://docs.photoprism.app/developer-guide/api/search/#get-apiv1photos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_photos(count, quality, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: maximum number of files (required)
        :param int quality: minimum quality score (1-7) (required)
        :param int offset: file offset
        :param str order: sort order
        :param bool merged: groups consecutive files that belong to the same photo
        :param bool public: excludes private pictures
        :param str q: search query
        :param str s: album uid
        :param str path: photo path
        :param bool video: is type video
        :return: list[SearchPhoto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_photos_with_http_info(count, quality, **kwargs)  # noqa: E501
        else:
            (data) = self.search_photos_with_http_info(count, quality, **kwargs)  # noqa: E501
            return data

    def search_photos_with_http_info(self, count, quality, **kwargs):  # noqa: E501
        """finds pictures and returns them as JSON  # noqa: E501

        Fore more information see: - https://docs.photoprism.app/developer-guide/api/search/#get-apiv1photos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_photos_with_http_info(count, quality, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: maximum number of files (required)
        :param int quality: minimum quality score (1-7) (required)
        :param int offset: file offset
        :param str order: sort order
        :param bool merged: groups consecutive files that belong to the same photo
        :param bool public: excludes private pictures
        :param str q: search query
        :param str s: album uid
        :param str path: photo path
        :param bool video: is type video
        :return: list[SearchPhoto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'quality', 'offset', 'order', 'merged', 'public', 'q', 's', 'path', 'video']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_photos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in params or
                                                       params['count'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `count` when calling `search_photos`")  # noqa: E501
        # verify the required parameter 'quality' is set
        if self.api_client.client_side_validation and ('quality' not in params or
                                                       params['quality'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quality` when calling `search_photos`")  # noqa: E501

        if self.api_client.client_side_validation and ('count' in params and params['count'] > 100000):  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling `search_photos`, must be a value less than or equal to `100000`")  # noqa: E501
        if self.api_client.client_side_validation and ('count' in params and params['count'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling `search_photos`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 100000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `search_photos`, must be a value less than or equal to `100000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `search_photos`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'merged' in params:
            query_params.append(('merged', params['merged']))  # noqa: E501
        if 'public' in params:
            query_params.append(('public', params['public']))  # noqa: E501
        if 'quality' in params:
            query_params.append(('quality', params['quality']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 's' in params:
            query_params.append(('s', params['s']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'video' in params:
            query_params.append(('video', params['video']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/photos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SearchPhoto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_photo(self, uid, photo, **kwargs):  # noqa: E501
        """updates picture details and returns them as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_photo(uid, photo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Photo UID (required)
        :param FormPhoto photo: properties to be updated (only submit values that should be changed) (required)
        :return: EntityPhoto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_photo_with_http_info(uid, photo, **kwargs)  # noqa: E501
        else:
            (data) = self.update_photo_with_http_info(uid, photo, **kwargs)  # noqa: E501
            return data

    def update_photo_with_http_info(self, uid, photo, **kwargs):  # noqa: E501
        """updates picture details and returns them as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_photo_with_http_info(uid, photo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: Photo UID (required)
        :param FormPhoto photo: properties to be updated (only submit values that should be changed) (required)
        :return: EntityPhoto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid', 'photo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_photo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `update_photo`")  # noqa: E501
        # verify the required parameter 'photo' is set
        if self.api_client.client_side_validation and ('photo' not in params or
                                                       params['photo'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `photo` when calling `update_photo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'photo' in params:
            body_params = params['photo']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/photos/{uid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityPhoto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_photo_label(self, uid, id, label, **kwargs):  # noqa: E501
        """changes a photo label  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_photo_label(uid, id, label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :param str id: label id (required)
        :param FormLabel label: properties to be updated (currently supports: uncertainty) (required)
        :return: EntityPhoto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_photo_label_with_http_info(uid, id, label, **kwargs)  # noqa: E501
        else:
            (data) = self.update_photo_label_with_http_info(uid, id, label, **kwargs)  # noqa: E501
            return data

    def update_photo_label_with_http_info(self, uid, id, label, **kwargs):  # noqa: E501
        """changes a photo label  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_photo_label_with_http_info(uid, id, label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uid: photo uid (required)
        :param str id: label id (required)
        :param FormLabel label: properties to be updated (currently supports: uncertainty) (required)
        :return: EntityPhoto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uid', 'id', 'label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_photo_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in params or
                                                       params['uid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uid` when calling `update_photo_label`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_photo_label`")  # noqa: E501
        # verify the required parameter 'label' is set
        if self.api_client.client_side_validation and ('label' not in params or
                                                       params['label'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `label` when calling `update_photo_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uid' in params:
            path_params['uid'] = params['uid']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'label' in params:
            body_params = params['label']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/photos/{uid}/label/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityPhoto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
