# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FacesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_face(self, id, **kwargs):  # noqa: E501
        """returns a face as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_face(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: face id (required)
        :return: EntityFace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_face_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_face_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_face_with_http_info(self, id, **kwargs):  # noqa: E501
        """returns a face as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_face_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: face id (required)
        :return: EntityFace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_face" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_face`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/faces/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityFace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_faces(self, count, **kwargs):  # noqa: E501
        """finds and returns faces as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_faces(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: maximum number of results (required)
        :param int offset: search result offset
        :param str order: sort order
        :param str hidden: show hidden
        :param str unknown: show unknown
        :return: list[SearchFace]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_faces_with_http_info(count, **kwargs)  # noqa: E501
        else:
            (data) = self.search_faces_with_http_info(count, **kwargs)  # noqa: E501
            return data

    def search_faces_with_http_info(self, count, **kwargs):  # noqa: E501
        """finds and returns faces as JSON  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_faces_with_http_info(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: maximum number of results (required)
        :param int offset: search result offset
        :param str order: sort order
        :param str hidden: show hidden
        :param str unknown: show unknown
        :return: list[SearchFace]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'offset', 'order', 'hidden', 'unknown']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_faces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in params or
                                                       params['count'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `count` when calling `search_faces`")  # noqa: E501

        if self.api_client.client_side_validation and ('count' in params and params['count'] > 100000):  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling `search_faces`, must be a value less than or equal to `100000`")  # noqa: E501
        if self.api_client.client_side_validation and ('count' in params and params['count'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling `search_faces`, must be a value greater than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] > 100000):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `search_faces`, must be a value less than or equal to `100000`")  # noqa: E501
        if self.api_client.client_side_validation and ('offset' in params and params['offset'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `search_faces`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'hidden' in params:
            query_params.append(('hidden', params['hidden']))  # noqa: E501
        if 'unknown' in params:
            query_params.append(('unknown', params['unknown']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/faces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SearchFace]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_face(self, id, face, **kwargs):  # noqa: E501
        """updates face properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_face(id, face, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: face id (required)
        :param FormFace face: properties to be updated (required)
        :return: EntityFace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_face_with_http_info(id, face, **kwargs)  # noqa: E501
        else:
            (data) = self.update_face_with_http_info(id, face, **kwargs)  # noqa: E501
            return data

    def update_face_with_http_info(self, id, face, **kwargs):  # noqa: E501
        """updates face properties  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_face_with_http_info(id, face, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: face id (required)
        :param FormFace face: properties to be updated (required)
        :return: EntityFace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'face']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_face" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_face`")  # noqa: E501
        # verify the required parameter 'face' is set
        if self.api_client.client_side_validation and ('face' not in params or
                                                       params['face'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `face` when calling `update_face`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'face' in params:
            body_params = params['face']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/faces/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EntityFace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
