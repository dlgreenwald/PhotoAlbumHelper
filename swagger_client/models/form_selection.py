# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FormSelection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'albums': 'list[str]',
        'all': 'bool',
        'files': 'list[str]',
        'labels': 'list[str]',
        'photos': 'list[str]',
        'places': 'list[str]',
        'subjects': 'list[str]'
    }

    attribute_map = {
        'albums': 'albums',
        'all': 'all',
        'files': 'files',
        'labels': 'labels',
        'photos': 'photos',
        'places': 'places',
        'subjects': 'subjects'
    }

    def __init__(self, albums=None, all=None, files=None, labels=None, photos=None, places=None, subjects=None, _configuration=None):  # noqa: E501
        """FormSelection - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._albums = None
        self._all = None
        self._files = None
        self._labels = None
        self._photos = None
        self._places = None
        self._subjects = None
        self.discriminator = None

        if albums is not None:
            self.albums = albums
        if all is not None:
            self.all = all
        if files is not None:
            self.files = files
        if labels is not None:
            self.labels = labels
        if photos is not None:
            self.photos = photos
        if places is not None:
            self.places = places
        if subjects is not None:
            self.subjects = subjects

    @property
    def albums(self):
        """Gets the albums of this FormSelection.  # noqa: E501


        :return: The albums of this FormSelection.  # noqa: E501
        :rtype: list[str]
        """
        return self._albums

    @albums.setter
    def albums(self, albums):
        """Sets the albums of this FormSelection.


        :param albums: The albums of this FormSelection.  # noqa: E501
        :type: list[str]
        """

        self._albums = albums

    @property
    def all(self):
        """Gets the all of this FormSelection.  # noqa: E501


        :return: The all of this FormSelection.  # noqa: E501
        :rtype: bool
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this FormSelection.


        :param all: The all of this FormSelection.  # noqa: E501
        :type: bool
        """

        self._all = all

    @property
    def files(self):
        """Gets the files of this FormSelection.  # noqa: E501


        :return: The files of this FormSelection.  # noqa: E501
        :rtype: list[str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this FormSelection.


        :param files: The files of this FormSelection.  # noqa: E501
        :type: list[str]
        """

        self._files = files

    @property
    def labels(self):
        """Gets the labels of this FormSelection.  # noqa: E501


        :return: The labels of this FormSelection.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this FormSelection.


        :param labels: The labels of this FormSelection.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def photos(self):
        """Gets the photos of this FormSelection.  # noqa: E501


        :return: The photos of this FormSelection.  # noqa: E501
        :rtype: list[str]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this FormSelection.


        :param photos: The photos of this FormSelection.  # noqa: E501
        :type: list[str]
        """

        self._photos = photos

    @property
    def places(self):
        """Gets the places of this FormSelection.  # noqa: E501


        :return: The places of this FormSelection.  # noqa: E501
        :rtype: list[str]
        """
        return self._places

    @places.setter
    def places(self, places):
        """Sets the places of this FormSelection.


        :param places: The places of this FormSelection.  # noqa: E501
        :type: list[str]
        """

        self._places = places

    @property
    def subjects(self):
        """Gets the subjects of this FormSelection.  # noqa: E501


        :return: The subjects of this FormSelection.  # noqa: E501
        :rtype: list[str]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this FormSelection.


        :param subjects: The subjects of this FormSelection.  # noqa: E501
        :type: list[str]
        """

        self._subjects = subjects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormSelection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormSelection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FormSelection):
            return True

        return self.to_dict() != other.to_dict()
