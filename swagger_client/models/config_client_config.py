# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ConfigClientConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'about': 'str',
        'acl': 'AclGrants',
        'album_categories': 'list[str]',
        'albums': 'list[EntityAlbum]',
        'api_uri': 'str',
        'app_color': 'str',
        'app_icon': 'str',
        'app_mode': 'str',
        'app_name': 'str',
        'auth_mode': 'str',
        'base_uri': 'str',
        'cameras': 'list[EntityCamera]',
        'categories': 'list[ConfigCategoryLabel]',
        'clip': 'int',
        'colors': 'list[dict(str, str)]',
        'content_uri': 'str',
        'copyright': 'str',
        'count': 'ConfigClientCounts',
        'countries': 'list[EntityCountry]',
        'css_uri': 'str',
        'customer': 'str',
        'debug': 'bool',
        'demo': 'bool',
        'disable': 'ConfigClientDisable',
        'download_token': 'str',
        'edition': 'str',
        'experimental': 'bool',
        'ext': 'ConfigMap',
        'flags': 'str',
        'js_uri': 'str',
        'legal_info': 'str',
        'legal_url': 'str',
        'lenses': 'list[EntityLens]',
        'login_uri': 'str',
        'manifest_uri': 'str',
        'map_key': 'str',
        'membership': 'str',
        'mode': 'str',
        'name': 'str',
        'password_length': 'int',
        'password_reset_uri': 'str',
        'people': 'list[EntityPerson]',
        'pos': 'ConfigClientPosition',
        'preview_token': 'str',
        'public': 'bool',
        'readonly': 'bool',
        'register_uri': 'str',
        'restart': 'bool',
        'server': 'EnvResources',
        'settings': 'CustomizeSettings',
        'site_author': 'str',
        'site_caption': 'str',
        'site_description': 'str',
        'site_domain': 'str',
        'site_preview': 'str',
        'site_title': 'str',
        'site_url': 'str',
        'sponsor': 'bool',
        'static_uri': 'str',
        'test': 'bool',
        'thumbs': 'list[ConfigThumbSize]',
        'tier': 'int',
        'trace': 'bool',
        'upload_nsfw': 'bool',
        'users_path': 'str',
        'version': 'str',
        'video_uri': 'str',
        'wallpaper_uri': 'str',
        'years': 'list[int]'
    }

    attribute_map = {
        'about': 'about',
        'acl': 'acl',
        'album_categories': 'albumCategories',
        'albums': 'albums',
        'api_uri': 'apiUri',
        'app_color': 'appColor',
        'app_icon': 'appIcon',
        'app_mode': 'appMode',
        'app_name': 'appName',
        'auth_mode': 'authMode',
        'base_uri': 'baseUri',
        'cameras': 'cameras',
        'categories': 'categories',
        'clip': 'clip',
        'colors': 'colors',
        'content_uri': 'contentUri',
        'copyright': 'copyright',
        'count': 'count',
        'countries': 'countries',
        'css_uri': 'cssUri',
        'customer': 'customer',
        'debug': 'debug',
        'demo': 'demo',
        'disable': 'disable',
        'download_token': 'downloadToken',
        'edition': 'edition',
        'experimental': 'experimental',
        'ext': 'ext',
        'flags': 'flags',
        'js_uri': 'jsUri',
        'legal_info': 'legalInfo',
        'legal_url': 'legalUrl',
        'lenses': 'lenses',
        'login_uri': 'loginUri',
        'manifest_uri': 'manifestUri',
        'map_key': 'mapKey',
        'membership': 'membership',
        'mode': 'mode',
        'name': 'name',
        'password_length': 'passwordLength',
        'password_reset_uri': 'passwordResetUri',
        'people': 'people',
        'pos': 'pos',
        'preview_token': 'previewToken',
        'public': 'public',
        'readonly': 'readonly',
        'register_uri': 'registerUri',
        'restart': 'restart',
        'server': 'server',
        'settings': 'settings',
        'site_author': 'siteAuthor',
        'site_caption': 'siteCaption',
        'site_description': 'siteDescription',
        'site_domain': 'siteDomain',
        'site_preview': 'sitePreview',
        'site_title': 'siteTitle',
        'site_url': 'siteUrl',
        'sponsor': 'sponsor',
        'static_uri': 'staticUri',
        'test': 'test',
        'thumbs': 'thumbs',
        'tier': 'tier',
        'trace': 'trace',
        'upload_nsfw': 'uploadNSFW',
        'users_path': 'usersPath',
        'version': 'version',
        'video_uri': 'videoUri',
        'wallpaper_uri': 'wallpaperUri',
        'years': 'years'
    }

    def __init__(self, about=None, acl=None, album_categories=None, albums=None, api_uri=None, app_color=None, app_icon=None, app_mode=None, app_name=None, auth_mode=None, base_uri=None, cameras=None, categories=None, clip=None, colors=None, content_uri=None, copyright=None, count=None, countries=None, css_uri=None, customer=None, debug=None, demo=None, disable=None, download_token=None, edition=None, experimental=None, ext=None, flags=None, js_uri=None, legal_info=None, legal_url=None, lenses=None, login_uri=None, manifest_uri=None, map_key=None, membership=None, mode=None, name=None, password_length=None, password_reset_uri=None, people=None, pos=None, preview_token=None, public=None, readonly=None, register_uri=None, restart=None, server=None, settings=None, site_author=None, site_caption=None, site_description=None, site_domain=None, site_preview=None, site_title=None, site_url=None, sponsor=None, static_uri=None, test=None, thumbs=None, tier=None, trace=None, upload_nsfw=None, users_path=None, version=None, video_uri=None, wallpaper_uri=None, years=None, _configuration=None):  # noqa: E501
        """ConfigClientConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._about = None
        self._acl = None
        self._album_categories = None
        self._albums = None
        self._api_uri = None
        self._app_color = None
        self._app_icon = None
        self._app_mode = None
        self._app_name = None
        self._auth_mode = None
        self._base_uri = None
        self._cameras = None
        self._categories = None
        self._clip = None
        self._colors = None
        self._content_uri = None
        self._copyright = None
        self._count = None
        self._countries = None
        self._css_uri = None
        self._customer = None
        self._debug = None
        self._demo = None
        self._disable = None
        self._download_token = None
        self._edition = None
        self._experimental = None
        self._ext = None
        self._flags = None
        self._js_uri = None
        self._legal_info = None
        self._legal_url = None
        self._lenses = None
        self._login_uri = None
        self._manifest_uri = None
        self._map_key = None
        self._membership = None
        self._mode = None
        self._name = None
        self._password_length = None
        self._password_reset_uri = None
        self._people = None
        self._pos = None
        self._preview_token = None
        self._public = None
        self._readonly = None
        self._register_uri = None
        self._restart = None
        self._server = None
        self._settings = None
        self._site_author = None
        self._site_caption = None
        self._site_description = None
        self._site_domain = None
        self._site_preview = None
        self._site_title = None
        self._site_url = None
        self._sponsor = None
        self._static_uri = None
        self._test = None
        self._thumbs = None
        self._tier = None
        self._trace = None
        self._upload_nsfw = None
        self._users_path = None
        self._version = None
        self._video_uri = None
        self._wallpaper_uri = None
        self._years = None
        self.discriminator = None

        if about is not None:
            self.about = about
        if acl is not None:
            self.acl = acl
        if album_categories is not None:
            self.album_categories = album_categories
        if albums is not None:
            self.albums = albums
        if api_uri is not None:
            self.api_uri = api_uri
        if app_color is not None:
            self.app_color = app_color
        if app_icon is not None:
            self.app_icon = app_icon
        if app_mode is not None:
            self.app_mode = app_mode
        if app_name is not None:
            self.app_name = app_name
        if auth_mode is not None:
            self.auth_mode = auth_mode
        if base_uri is not None:
            self.base_uri = base_uri
        if cameras is not None:
            self.cameras = cameras
        if categories is not None:
            self.categories = categories
        if clip is not None:
            self.clip = clip
        if colors is not None:
            self.colors = colors
        if content_uri is not None:
            self.content_uri = content_uri
        if copyright is not None:
            self.copyright = copyright
        if count is not None:
            self.count = count
        if countries is not None:
            self.countries = countries
        if css_uri is not None:
            self.css_uri = css_uri
        if customer is not None:
            self.customer = customer
        if debug is not None:
            self.debug = debug
        if demo is not None:
            self.demo = demo
        if disable is not None:
            self.disable = disable
        if download_token is not None:
            self.download_token = download_token
        if edition is not None:
            self.edition = edition
        if experimental is not None:
            self.experimental = experimental
        if ext is not None:
            self.ext = ext
        if flags is not None:
            self.flags = flags
        if js_uri is not None:
            self.js_uri = js_uri
        if legal_info is not None:
            self.legal_info = legal_info
        if legal_url is not None:
            self.legal_url = legal_url
        if lenses is not None:
            self.lenses = lenses
        if login_uri is not None:
            self.login_uri = login_uri
        if manifest_uri is not None:
            self.manifest_uri = manifest_uri
        if map_key is not None:
            self.map_key = map_key
        if membership is not None:
            self.membership = membership
        if mode is not None:
            self.mode = mode
        if name is not None:
            self.name = name
        if password_length is not None:
            self.password_length = password_length
        if password_reset_uri is not None:
            self.password_reset_uri = password_reset_uri
        if people is not None:
            self.people = people
        if pos is not None:
            self.pos = pos
        if preview_token is not None:
            self.preview_token = preview_token
        if public is not None:
            self.public = public
        if readonly is not None:
            self.readonly = readonly
        if register_uri is not None:
            self.register_uri = register_uri
        if restart is not None:
            self.restart = restart
        if server is not None:
            self.server = server
        if settings is not None:
            self.settings = settings
        if site_author is not None:
            self.site_author = site_author
        if site_caption is not None:
            self.site_caption = site_caption
        if site_description is not None:
            self.site_description = site_description
        if site_domain is not None:
            self.site_domain = site_domain
        if site_preview is not None:
            self.site_preview = site_preview
        if site_title is not None:
            self.site_title = site_title
        if site_url is not None:
            self.site_url = site_url
        if sponsor is not None:
            self.sponsor = sponsor
        if static_uri is not None:
            self.static_uri = static_uri
        if test is not None:
            self.test = test
        if thumbs is not None:
            self.thumbs = thumbs
        if tier is not None:
            self.tier = tier
        if trace is not None:
            self.trace = trace
        if upload_nsfw is not None:
            self.upload_nsfw = upload_nsfw
        if users_path is not None:
            self.users_path = users_path
        if version is not None:
            self.version = version
        if video_uri is not None:
            self.video_uri = video_uri
        if wallpaper_uri is not None:
            self.wallpaper_uri = wallpaper_uri
        if years is not None:
            self.years = years

    @property
    def about(self):
        """Gets the about of this ConfigClientConfig.  # noqa: E501


        :return: The about of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this ConfigClientConfig.


        :param about: The about of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._about = about

    @property
    def acl(self):
        """Gets the acl of this ConfigClientConfig.  # noqa: E501


        :return: The acl of this ConfigClientConfig.  # noqa: E501
        :rtype: AclGrants
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this ConfigClientConfig.


        :param acl: The acl of this ConfigClientConfig.  # noqa: E501
        :type: AclGrants
        """

        self._acl = acl

    @property
    def album_categories(self):
        """Gets the album_categories of this ConfigClientConfig.  # noqa: E501


        :return: The album_categories of this ConfigClientConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._album_categories

    @album_categories.setter
    def album_categories(self, album_categories):
        """Sets the album_categories of this ConfigClientConfig.


        :param album_categories: The album_categories of this ConfigClientConfig.  # noqa: E501
        :type: list[str]
        """

        self._album_categories = album_categories

    @property
    def albums(self):
        """Gets the albums of this ConfigClientConfig.  # noqa: E501


        :return: The albums of this ConfigClientConfig.  # noqa: E501
        :rtype: list[EntityAlbum]
        """
        return self._albums

    @albums.setter
    def albums(self, albums):
        """Sets the albums of this ConfigClientConfig.


        :param albums: The albums of this ConfigClientConfig.  # noqa: E501
        :type: list[EntityAlbum]
        """

        self._albums = albums

    @property
    def api_uri(self):
        """Gets the api_uri of this ConfigClientConfig.  # noqa: E501


        :return: The api_uri of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._api_uri

    @api_uri.setter
    def api_uri(self, api_uri):
        """Sets the api_uri of this ConfigClientConfig.


        :param api_uri: The api_uri of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._api_uri = api_uri

    @property
    def app_color(self):
        """Gets the app_color of this ConfigClientConfig.  # noqa: E501


        :return: The app_color of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._app_color

    @app_color.setter
    def app_color(self, app_color):
        """Sets the app_color of this ConfigClientConfig.


        :param app_color: The app_color of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._app_color = app_color

    @property
    def app_icon(self):
        """Gets the app_icon of this ConfigClientConfig.  # noqa: E501


        :return: The app_icon of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._app_icon

    @app_icon.setter
    def app_icon(self, app_icon):
        """Sets the app_icon of this ConfigClientConfig.


        :param app_icon: The app_icon of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._app_icon = app_icon

    @property
    def app_mode(self):
        """Gets the app_mode of this ConfigClientConfig.  # noqa: E501


        :return: The app_mode of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._app_mode

    @app_mode.setter
    def app_mode(self, app_mode):
        """Sets the app_mode of this ConfigClientConfig.


        :param app_mode: The app_mode of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._app_mode = app_mode

    @property
    def app_name(self):
        """Gets the app_name of this ConfigClientConfig.  # noqa: E501


        :return: The app_name of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this ConfigClientConfig.


        :param app_name: The app_name of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def auth_mode(self):
        """Gets the auth_mode of this ConfigClientConfig.  # noqa: E501


        :return: The auth_mode of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._auth_mode

    @auth_mode.setter
    def auth_mode(self, auth_mode):
        """Sets the auth_mode of this ConfigClientConfig.


        :param auth_mode: The auth_mode of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._auth_mode = auth_mode

    @property
    def base_uri(self):
        """Gets the base_uri of this ConfigClientConfig.  # noqa: E501


        :return: The base_uri of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._base_uri

    @base_uri.setter
    def base_uri(self, base_uri):
        """Sets the base_uri of this ConfigClientConfig.


        :param base_uri: The base_uri of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._base_uri = base_uri

    @property
    def cameras(self):
        """Gets the cameras of this ConfigClientConfig.  # noqa: E501


        :return: The cameras of this ConfigClientConfig.  # noqa: E501
        :rtype: list[EntityCamera]
        """
        return self._cameras

    @cameras.setter
    def cameras(self, cameras):
        """Sets the cameras of this ConfigClientConfig.


        :param cameras: The cameras of this ConfigClientConfig.  # noqa: E501
        :type: list[EntityCamera]
        """

        self._cameras = cameras

    @property
    def categories(self):
        """Gets the categories of this ConfigClientConfig.  # noqa: E501


        :return: The categories of this ConfigClientConfig.  # noqa: E501
        :rtype: list[ConfigCategoryLabel]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ConfigClientConfig.


        :param categories: The categories of this ConfigClientConfig.  # noqa: E501
        :type: list[ConfigCategoryLabel]
        """

        self._categories = categories

    @property
    def clip(self):
        """Gets the clip of this ConfigClientConfig.  # noqa: E501


        :return: The clip of this ConfigClientConfig.  # noqa: E501
        :rtype: int
        """
        return self._clip

    @clip.setter
    def clip(self, clip):
        """Sets the clip of this ConfigClientConfig.


        :param clip: The clip of this ConfigClientConfig.  # noqa: E501
        :type: int
        """

        self._clip = clip

    @property
    def colors(self):
        """Gets the colors of this ConfigClientConfig.  # noqa: E501


        :return: The colors of this ConfigClientConfig.  # noqa: E501
        :rtype: list[dict(str, str)]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this ConfigClientConfig.


        :param colors: The colors of this ConfigClientConfig.  # noqa: E501
        :type: list[dict(str, str)]
        """

        self._colors = colors

    @property
    def content_uri(self):
        """Gets the content_uri of this ConfigClientConfig.  # noqa: E501


        :return: The content_uri of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._content_uri

    @content_uri.setter
    def content_uri(self, content_uri):
        """Sets the content_uri of this ConfigClientConfig.


        :param content_uri: The content_uri of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._content_uri = content_uri

    @property
    def copyright(self):
        """Gets the copyright of this ConfigClientConfig.  # noqa: E501


        :return: The copyright of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this ConfigClientConfig.


        :param copyright: The copyright of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def count(self):
        """Gets the count of this ConfigClientConfig.  # noqa: E501


        :return: The count of this ConfigClientConfig.  # noqa: E501
        :rtype: ConfigClientCounts
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ConfigClientConfig.


        :param count: The count of this ConfigClientConfig.  # noqa: E501
        :type: ConfigClientCounts
        """

        self._count = count

    @property
    def countries(self):
        """Gets the countries of this ConfigClientConfig.  # noqa: E501


        :return: The countries of this ConfigClientConfig.  # noqa: E501
        :rtype: list[EntityCountry]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this ConfigClientConfig.


        :param countries: The countries of this ConfigClientConfig.  # noqa: E501
        :type: list[EntityCountry]
        """

        self._countries = countries

    @property
    def css_uri(self):
        """Gets the css_uri of this ConfigClientConfig.  # noqa: E501


        :return: The css_uri of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._css_uri

    @css_uri.setter
    def css_uri(self, css_uri):
        """Sets the css_uri of this ConfigClientConfig.


        :param css_uri: The css_uri of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._css_uri = css_uri

    @property
    def customer(self):
        """Gets the customer of this ConfigClientConfig.  # noqa: E501


        :return: The customer of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this ConfigClientConfig.


        :param customer: The customer of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._customer = customer

    @property
    def debug(self):
        """Gets the debug of this ConfigClientConfig.  # noqa: E501


        :return: The debug of this ConfigClientConfig.  # noqa: E501
        :rtype: bool
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this ConfigClientConfig.


        :param debug: The debug of this ConfigClientConfig.  # noqa: E501
        :type: bool
        """

        self._debug = debug

    @property
    def demo(self):
        """Gets the demo of this ConfigClientConfig.  # noqa: E501


        :return: The demo of this ConfigClientConfig.  # noqa: E501
        :rtype: bool
        """
        return self._demo

    @demo.setter
    def demo(self, demo):
        """Sets the demo of this ConfigClientConfig.


        :param demo: The demo of this ConfigClientConfig.  # noqa: E501
        :type: bool
        """

        self._demo = demo

    @property
    def disable(self):
        """Gets the disable of this ConfigClientConfig.  # noqa: E501


        :return: The disable of this ConfigClientConfig.  # noqa: E501
        :rtype: ConfigClientDisable
        """
        return self._disable

    @disable.setter
    def disable(self, disable):
        """Sets the disable of this ConfigClientConfig.


        :param disable: The disable of this ConfigClientConfig.  # noqa: E501
        :type: ConfigClientDisable
        """

        self._disable = disable

    @property
    def download_token(self):
        """Gets the download_token of this ConfigClientConfig.  # noqa: E501


        :return: The download_token of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._download_token

    @download_token.setter
    def download_token(self, download_token):
        """Sets the download_token of this ConfigClientConfig.


        :param download_token: The download_token of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._download_token = download_token

    @property
    def edition(self):
        """Gets the edition of this ConfigClientConfig.  # noqa: E501


        :return: The edition of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this ConfigClientConfig.


        :param edition: The edition of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._edition = edition

    @property
    def experimental(self):
        """Gets the experimental of this ConfigClientConfig.  # noqa: E501


        :return: The experimental of this ConfigClientConfig.  # noqa: E501
        :rtype: bool
        """
        return self._experimental

    @experimental.setter
    def experimental(self, experimental):
        """Sets the experimental of this ConfigClientConfig.


        :param experimental: The experimental of this ConfigClientConfig.  # noqa: E501
        :type: bool
        """

        self._experimental = experimental

    @property
    def ext(self):
        """Gets the ext of this ConfigClientConfig.  # noqa: E501


        :return: The ext of this ConfigClientConfig.  # noqa: E501
        :rtype: ConfigMap
        """
        return self._ext

    @ext.setter
    def ext(self, ext):
        """Sets the ext of this ConfigClientConfig.


        :param ext: The ext of this ConfigClientConfig.  # noqa: E501
        :type: ConfigMap
        """

        self._ext = ext

    @property
    def flags(self):
        """Gets the flags of this ConfigClientConfig.  # noqa: E501


        :return: The flags of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this ConfigClientConfig.


        :param flags: The flags of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._flags = flags

    @property
    def js_uri(self):
        """Gets the js_uri of this ConfigClientConfig.  # noqa: E501


        :return: The js_uri of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._js_uri

    @js_uri.setter
    def js_uri(self, js_uri):
        """Sets the js_uri of this ConfigClientConfig.


        :param js_uri: The js_uri of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._js_uri = js_uri

    @property
    def legal_info(self):
        """Gets the legal_info of this ConfigClientConfig.  # noqa: E501


        :return: The legal_info of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._legal_info

    @legal_info.setter
    def legal_info(self, legal_info):
        """Sets the legal_info of this ConfigClientConfig.


        :param legal_info: The legal_info of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._legal_info = legal_info

    @property
    def legal_url(self):
        """Gets the legal_url of this ConfigClientConfig.  # noqa: E501


        :return: The legal_url of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._legal_url

    @legal_url.setter
    def legal_url(self, legal_url):
        """Sets the legal_url of this ConfigClientConfig.


        :param legal_url: The legal_url of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._legal_url = legal_url

    @property
    def lenses(self):
        """Gets the lenses of this ConfigClientConfig.  # noqa: E501


        :return: The lenses of this ConfigClientConfig.  # noqa: E501
        :rtype: list[EntityLens]
        """
        return self._lenses

    @lenses.setter
    def lenses(self, lenses):
        """Sets the lenses of this ConfigClientConfig.


        :param lenses: The lenses of this ConfigClientConfig.  # noqa: E501
        :type: list[EntityLens]
        """

        self._lenses = lenses

    @property
    def login_uri(self):
        """Gets the login_uri of this ConfigClientConfig.  # noqa: E501


        :return: The login_uri of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._login_uri

    @login_uri.setter
    def login_uri(self, login_uri):
        """Sets the login_uri of this ConfigClientConfig.


        :param login_uri: The login_uri of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._login_uri = login_uri

    @property
    def manifest_uri(self):
        """Gets the manifest_uri of this ConfigClientConfig.  # noqa: E501


        :return: The manifest_uri of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._manifest_uri

    @manifest_uri.setter
    def manifest_uri(self, manifest_uri):
        """Sets the manifest_uri of this ConfigClientConfig.


        :param manifest_uri: The manifest_uri of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._manifest_uri = manifest_uri

    @property
    def map_key(self):
        """Gets the map_key of this ConfigClientConfig.  # noqa: E501


        :return: The map_key of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._map_key

    @map_key.setter
    def map_key(self, map_key):
        """Sets the map_key of this ConfigClientConfig.


        :param map_key: The map_key of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._map_key = map_key

    @property
    def membership(self):
        """Gets the membership of this ConfigClientConfig.  # noqa: E501


        :return: The membership of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this ConfigClientConfig.


        :param membership: The membership of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._membership = membership

    @property
    def mode(self):
        """Gets the mode of this ConfigClientConfig.  # noqa: E501


        :return: The mode of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ConfigClientConfig.


        :param mode: The mode of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this ConfigClientConfig.  # noqa: E501


        :return: The name of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigClientConfig.


        :param name: The name of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def password_length(self):
        """Gets the password_length of this ConfigClientConfig.  # noqa: E501


        :return: The password_length of this ConfigClientConfig.  # noqa: E501
        :rtype: int
        """
        return self._password_length

    @password_length.setter
    def password_length(self, password_length):
        """Sets the password_length of this ConfigClientConfig.


        :param password_length: The password_length of this ConfigClientConfig.  # noqa: E501
        :type: int
        """

        self._password_length = password_length

    @property
    def password_reset_uri(self):
        """Gets the password_reset_uri of this ConfigClientConfig.  # noqa: E501


        :return: The password_reset_uri of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._password_reset_uri

    @password_reset_uri.setter
    def password_reset_uri(self, password_reset_uri):
        """Sets the password_reset_uri of this ConfigClientConfig.


        :param password_reset_uri: The password_reset_uri of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._password_reset_uri = password_reset_uri

    @property
    def people(self):
        """Gets the people of this ConfigClientConfig.  # noqa: E501


        :return: The people of this ConfigClientConfig.  # noqa: E501
        :rtype: list[EntityPerson]
        """
        return self._people

    @people.setter
    def people(self, people):
        """Sets the people of this ConfigClientConfig.


        :param people: The people of this ConfigClientConfig.  # noqa: E501
        :type: list[EntityPerson]
        """

        self._people = people

    @property
    def pos(self):
        """Gets the pos of this ConfigClientConfig.  # noqa: E501


        :return: The pos of this ConfigClientConfig.  # noqa: E501
        :rtype: ConfigClientPosition
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this ConfigClientConfig.


        :param pos: The pos of this ConfigClientConfig.  # noqa: E501
        :type: ConfigClientPosition
        """

        self._pos = pos

    @property
    def preview_token(self):
        """Gets the preview_token of this ConfigClientConfig.  # noqa: E501


        :return: The preview_token of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._preview_token

    @preview_token.setter
    def preview_token(self, preview_token):
        """Sets the preview_token of this ConfigClientConfig.


        :param preview_token: The preview_token of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._preview_token = preview_token

    @property
    def public(self):
        """Gets the public of this ConfigClientConfig.  # noqa: E501


        :return: The public of this ConfigClientConfig.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this ConfigClientConfig.


        :param public: The public of this ConfigClientConfig.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def readonly(self):
        """Gets the readonly of this ConfigClientConfig.  # noqa: E501


        :return: The readonly of this ConfigClientConfig.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this ConfigClientConfig.


        :param readonly: The readonly of this ConfigClientConfig.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    @property
    def register_uri(self):
        """Gets the register_uri of this ConfigClientConfig.  # noqa: E501


        :return: The register_uri of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._register_uri

    @register_uri.setter
    def register_uri(self, register_uri):
        """Sets the register_uri of this ConfigClientConfig.


        :param register_uri: The register_uri of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._register_uri = register_uri

    @property
    def restart(self):
        """Gets the restart of this ConfigClientConfig.  # noqa: E501


        :return: The restart of this ConfigClientConfig.  # noqa: E501
        :rtype: bool
        """
        return self._restart

    @restart.setter
    def restart(self, restart):
        """Sets the restart of this ConfigClientConfig.


        :param restart: The restart of this ConfigClientConfig.  # noqa: E501
        :type: bool
        """

        self._restart = restart

    @property
    def server(self):
        """Gets the server of this ConfigClientConfig.  # noqa: E501


        :return: The server of this ConfigClientConfig.  # noqa: E501
        :rtype: EnvResources
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ConfigClientConfig.


        :param server: The server of this ConfigClientConfig.  # noqa: E501
        :type: EnvResources
        """

        self._server = server

    @property
    def settings(self):
        """Gets the settings of this ConfigClientConfig.  # noqa: E501


        :return: The settings of this ConfigClientConfig.  # noqa: E501
        :rtype: CustomizeSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this ConfigClientConfig.


        :param settings: The settings of this ConfigClientConfig.  # noqa: E501
        :type: CustomizeSettings
        """

        self._settings = settings

    @property
    def site_author(self):
        """Gets the site_author of this ConfigClientConfig.  # noqa: E501


        :return: The site_author of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._site_author

    @site_author.setter
    def site_author(self, site_author):
        """Sets the site_author of this ConfigClientConfig.


        :param site_author: The site_author of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._site_author = site_author

    @property
    def site_caption(self):
        """Gets the site_caption of this ConfigClientConfig.  # noqa: E501


        :return: The site_caption of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._site_caption

    @site_caption.setter
    def site_caption(self, site_caption):
        """Sets the site_caption of this ConfigClientConfig.


        :param site_caption: The site_caption of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._site_caption = site_caption

    @property
    def site_description(self):
        """Gets the site_description of this ConfigClientConfig.  # noqa: E501


        :return: The site_description of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._site_description

    @site_description.setter
    def site_description(self, site_description):
        """Sets the site_description of this ConfigClientConfig.


        :param site_description: The site_description of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._site_description = site_description

    @property
    def site_domain(self):
        """Gets the site_domain of this ConfigClientConfig.  # noqa: E501


        :return: The site_domain of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._site_domain

    @site_domain.setter
    def site_domain(self, site_domain):
        """Sets the site_domain of this ConfigClientConfig.


        :param site_domain: The site_domain of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._site_domain = site_domain

    @property
    def site_preview(self):
        """Gets the site_preview of this ConfigClientConfig.  # noqa: E501


        :return: The site_preview of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._site_preview

    @site_preview.setter
    def site_preview(self, site_preview):
        """Sets the site_preview of this ConfigClientConfig.


        :param site_preview: The site_preview of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._site_preview = site_preview

    @property
    def site_title(self):
        """Gets the site_title of this ConfigClientConfig.  # noqa: E501


        :return: The site_title of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._site_title

    @site_title.setter
    def site_title(self, site_title):
        """Sets the site_title of this ConfigClientConfig.


        :param site_title: The site_title of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._site_title = site_title

    @property
    def site_url(self):
        """Gets the site_url of this ConfigClientConfig.  # noqa: E501


        :return: The site_url of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._site_url

    @site_url.setter
    def site_url(self, site_url):
        """Sets the site_url of this ConfigClientConfig.


        :param site_url: The site_url of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._site_url = site_url

    @property
    def sponsor(self):
        """Gets the sponsor of this ConfigClientConfig.  # noqa: E501


        :return: The sponsor of this ConfigClientConfig.  # noqa: E501
        :rtype: bool
        """
        return self._sponsor

    @sponsor.setter
    def sponsor(self, sponsor):
        """Sets the sponsor of this ConfigClientConfig.


        :param sponsor: The sponsor of this ConfigClientConfig.  # noqa: E501
        :type: bool
        """

        self._sponsor = sponsor

    @property
    def static_uri(self):
        """Gets the static_uri of this ConfigClientConfig.  # noqa: E501


        :return: The static_uri of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._static_uri

    @static_uri.setter
    def static_uri(self, static_uri):
        """Sets the static_uri of this ConfigClientConfig.


        :param static_uri: The static_uri of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._static_uri = static_uri

    @property
    def test(self):
        """Gets the test of this ConfigClientConfig.  # noqa: E501


        :return: The test of this ConfigClientConfig.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this ConfigClientConfig.


        :param test: The test of this ConfigClientConfig.  # noqa: E501
        :type: bool
        """

        self._test = test

    @property
    def thumbs(self):
        """Gets the thumbs of this ConfigClientConfig.  # noqa: E501


        :return: The thumbs of this ConfigClientConfig.  # noqa: E501
        :rtype: list[ConfigThumbSize]
        """
        return self._thumbs

    @thumbs.setter
    def thumbs(self, thumbs):
        """Sets the thumbs of this ConfigClientConfig.


        :param thumbs: The thumbs of this ConfigClientConfig.  # noqa: E501
        :type: list[ConfigThumbSize]
        """

        self._thumbs = thumbs

    @property
    def tier(self):
        """Gets the tier of this ConfigClientConfig.  # noqa: E501


        :return: The tier of this ConfigClientConfig.  # noqa: E501
        :rtype: int
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this ConfigClientConfig.


        :param tier: The tier of this ConfigClientConfig.  # noqa: E501
        :type: int
        """

        self._tier = tier

    @property
    def trace(self):
        """Gets the trace of this ConfigClientConfig.  # noqa: E501


        :return: The trace of this ConfigClientConfig.  # noqa: E501
        :rtype: bool
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this ConfigClientConfig.


        :param trace: The trace of this ConfigClientConfig.  # noqa: E501
        :type: bool
        """

        self._trace = trace

    @property
    def upload_nsfw(self):
        """Gets the upload_nsfw of this ConfigClientConfig.  # noqa: E501


        :return: The upload_nsfw of this ConfigClientConfig.  # noqa: E501
        :rtype: bool
        """
        return self._upload_nsfw

    @upload_nsfw.setter
    def upload_nsfw(self, upload_nsfw):
        """Sets the upload_nsfw of this ConfigClientConfig.


        :param upload_nsfw: The upload_nsfw of this ConfigClientConfig.  # noqa: E501
        :type: bool
        """

        self._upload_nsfw = upload_nsfw

    @property
    def users_path(self):
        """Gets the users_path of this ConfigClientConfig.  # noqa: E501


        :return: The users_path of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._users_path

    @users_path.setter
    def users_path(self, users_path):
        """Sets the users_path of this ConfigClientConfig.


        :param users_path: The users_path of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._users_path = users_path

    @property
    def version(self):
        """Gets the version of this ConfigClientConfig.  # noqa: E501


        :return: The version of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConfigClientConfig.


        :param version: The version of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def video_uri(self):
        """Gets the video_uri of this ConfigClientConfig.  # noqa: E501


        :return: The video_uri of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._video_uri

    @video_uri.setter
    def video_uri(self, video_uri):
        """Sets the video_uri of this ConfigClientConfig.


        :param video_uri: The video_uri of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._video_uri = video_uri

    @property
    def wallpaper_uri(self):
        """Gets the wallpaper_uri of this ConfigClientConfig.  # noqa: E501


        :return: The wallpaper_uri of this ConfigClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._wallpaper_uri

    @wallpaper_uri.setter
    def wallpaper_uri(self, wallpaper_uri):
        """Sets the wallpaper_uri of this ConfigClientConfig.


        :param wallpaper_uri: The wallpaper_uri of this ConfigClientConfig.  # noqa: E501
        :type: str
        """

        self._wallpaper_uri = wallpaper_uri

    @property
    def years(self):
        """Gets the years of this ConfigClientConfig.  # noqa: E501


        :return: The years of this ConfigClientConfig.  # noqa: E501
        :rtype: list[int]
        """
        return self._years

    @years.setter
    def years(self, years):
        """Sets the years of this ConfigClientConfig.


        :param years: The years of this ConfigClientConfig.  # noqa: E501
        :type: list[int]
        """

        self._years = years

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigClientConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigClientConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigClientConfig):
            return True

        return self.to_dict() != other.to_dict()
