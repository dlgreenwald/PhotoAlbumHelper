# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EntitySession(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'ConfigClientConfig',
        'data': 'EntitySessionData',
        'expires_in': 'int',
        'provider': 'str',
        'scope': 'str',
        'session_id': 'str',
        'status': 'str',
        'user': 'EntityUser'
    }

    attribute_map = {
        'config': 'config',
        'data': 'data',
        'expires_in': 'expires_in',
        'provider': 'provider',
        'scope': 'scope',
        'session_id': 'session_id',
        'status': 'status',
        'user': 'user'
    }

    def __init__(self, config=None, data=None, expires_in=None, provider=None, scope=None, session_id=None, status=None, user=None, _configuration=None):  # noqa: E501
        """EntitySession - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._config = None
        self._data = None
        self._expires_in = None
        self._provider = None
        self._scope = None
        self._session_id = None
        self._status = None
        self._user = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if data is not None:
            self.data = data
        if expires_in is not None:
            self.expires_in = expires_in
        if provider is not None:
            self.provider = provider
        if scope is not None:
            self.scope = scope
        if session_id is not None:
            self.session_id = session_id
        if status is not None:
            self.status = status
        if user is not None:
            self.user = user

    @property
    def config(self):
        """Gets the config of this EntitySession.  # noqa: E501


        :return: The config of this EntitySession.  # noqa: E501
        :rtype: ConfigClientConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this EntitySession.


        :param config: The config of this EntitySession.  # noqa: E501
        :type: ConfigClientConfig
        """

        self._config = config

    @property
    def data(self):
        """Gets the data of this EntitySession.  # noqa: E501


        :return: The data of this EntitySession.  # noqa: E501
        :rtype: EntitySessionData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this EntitySession.


        :param data: The data of this EntitySession.  # noqa: E501
        :type: EntitySessionData
        """

        self._data = data

    @property
    def expires_in(self):
        """Gets the expires_in of this EntitySession.  # noqa: E501


        :return: The expires_in of this EntitySession.  # noqa: E501
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this EntitySession.


        :param expires_in: The expires_in of this EntitySession.  # noqa: E501
        :type: int
        """

        self._expires_in = expires_in

    @property
    def provider(self):
        """Gets the provider of this EntitySession.  # noqa: E501


        :return: The provider of this EntitySession.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this EntitySession.


        :param provider: The provider of this EntitySession.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def scope(self):
        """Gets the scope of this EntitySession.  # noqa: E501


        :return: The scope of this EntitySession.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this EntitySession.


        :param scope: The scope of this EntitySession.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def session_id(self):
        """Gets the session_id of this EntitySession.  # noqa: E501


        :return: The session_id of this EntitySession.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this EntitySession.


        :param session_id: The session_id of this EntitySession.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def status(self):
        """Gets the status of this EntitySession.  # noqa: E501


        :return: The status of this EntitySession.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EntitySession.


        :param status: The status of this EntitySession.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def user(self):
        """Gets the user of this EntitySession.  # noqa: E501


        :return: The user of this EntitySession.  # noqa: E501
        :rtype: EntityUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this EntitySession.


        :param user: The user of this EntitySession.  # noqa: E501
        :type: EntityUser
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntitySession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntitySession):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntitySession):
            return True

        return self.to_dict() != other.to_dict()
