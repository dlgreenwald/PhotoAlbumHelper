# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SearchGeoResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'favorite': 'bool',
        'hash': 'str',
        'height': 'int',
        'lat': 'float',
        'lng': 'float',
        'taken_at': 'str',
        'taken_at_local': 'str',
        'title': 'str',
        'type': 'str',
        'uid': 'str',
        'width': 'int'
    }

    attribute_map = {
        'description': 'Description',
        'favorite': 'Favorite',
        'hash': 'Hash',
        'height': 'Height',
        'lat': 'Lat',
        'lng': 'Lng',
        'taken_at': 'TakenAt',
        'taken_at_local': 'TakenAtLocal',
        'title': 'Title',
        'type': 'Type',
        'uid': 'UID',
        'width': 'Width'
    }

    def __init__(self, description=None, favorite=None, hash=None, height=None, lat=None, lng=None, taken_at=None, taken_at_local=None, title=None, type=None, uid=None, width=None, _configuration=None):  # noqa: E501
        """SearchGeoResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._favorite = None
        self._hash = None
        self._height = None
        self._lat = None
        self._lng = None
        self._taken_at = None
        self._taken_at_local = None
        self._title = None
        self._type = None
        self._uid = None
        self._width = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if favorite is not None:
            self.favorite = favorite
        if hash is not None:
            self.hash = hash
        if height is not None:
            self.height = height
        if lat is not None:
            self.lat = lat
        if lng is not None:
            self.lng = lng
        if taken_at is not None:
            self.taken_at = taken_at
        if taken_at_local is not None:
            self.taken_at_local = taken_at_local
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if uid is not None:
            self.uid = uid
        if width is not None:
            self.width = width

    @property
    def description(self):
        """Gets the description of this SearchGeoResult.  # noqa: E501


        :return: The description of this SearchGeoResult.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SearchGeoResult.


        :param description: The description of this SearchGeoResult.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def favorite(self):
        """Gets the favorite of this SearchGeoResult.  # noqa: E501


        :return: The favorite of this SearchGeoResult.  # noqa: E501
        :rtype: bool
        """
        return self._favorite

    @favorite.setter
    def favorite(self, favorite):
        """Sets the favorite of this SearchGeoResult.


        :param favorite: The favorite of this SearchGeoResult.  # noqa: E501
        :type: bool
        """

        self._favorite = favorite

    @property
    def hash(self):
        """Gets the hash of this SearchGeoResult.  # noqa: E501


        :return: The hash of this SearchGeoResult.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this SearchGeoResult.


        :param hash: The hash of this SearchGeoResult.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def height(self):
        """Gets the height of this SearchGeoResult.  # noqa: E501


        :return: The height of this SearchGeoResult.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this SearchGeoResult.


        :param height: The height of this SearchGeoResult.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def lat(self):
        """Gets the lat of this SearchGeoResult.  # noqa: E501


        :return: The lat of this SearchGeoResult.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this SearchGeoResult.


        :param lat: The lat of this SearchGeoResult.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this SearchGeoResult.  # noqa: E501


        :return: The lng of this SearchGeoResult.  # noqa: E501
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this SearchGeoResult.


        :param lng: The lng of this SearchGeoResult.  # noqa: E501
        :type: float
        """

        self._lng = lng

    @property
    def taken_at(self):
        """Gets the taken_at of this SearchGeoResult.  # noqa: E501


        :return: The taken_at of this SearchGeoResult.  # noqa: E501
        :rtype: str
        """
        return self._taken_at

    @taken_at.setter
    def taken_at(self, taken_at):
        """Sets the taken_at of this SearchGeoResult.


        :param taken_at: The taken_at of this SearchGeoResult.  # noqa: E501
        :type: str
        """

        self._taken_at = taken_at

    @property
    def taken_at_local(self):
        """Gets the taken_at_local of this SearchGeoResult.  # noqa: E501


        :return: The taken_at_local of this SearchGeoResult.  # noqa: E501
        :rtype: str
        """
        return self._taken_at_local

    @taken_at_local.setter
    def taken_at_local(self, taken_at_local):
        """Sets the taken_at_local of this SearchGeoResult.


        :param taken_at_local: The taken_at_local of this SearchGeoResult.  # noqa: E501
        :type: str
        """

        self._taken_at_local = taken_at_local

    @property
    def title(self):
        """Gets the title of this SearchGeoResult.  # noqa: E501


        :return: The title of this SearchGeoResult.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SearchGeoResult.


        :param title: The title of this SearchGeoResult.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this SearchGeoResult.  # noqa: E501


        :return: The type of this SearchGeoResult.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchGeoResult.


        :param type: The type of this SearchGeoResult.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this SearchGeoResult.  # noqa: E501


        :return: The uid of this SearchGeoResult.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SearchGeoResult.


        :param uid: The uid of this SearchGeoResult.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def width(self):
        """Gets the width of this SearchGeoResult.  # noqa: E501


        :return: The width of this SearchGeoResult.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this SearchGeoResult.


        :param width: The width of this SearchGeoResult.  # noqa: E501
        :type: int
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchGeoResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchGeoResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchGeoResult):
            return True

        return self.to_dict() != other.to_dict()
