# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ConfigOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_color': 'str',
        'app_icon': 'str',
        'app_mode': 'str',
        'app_name': 'str',
        'auto_import': 'int',
        'auto_index': 'int',
        'backup_albums': 'bool',
        'backup_database': 'bool',
        'backup_retain': 'int',
        'backup_schedule': 'str',
        'cdn_url': 'str',
        'cdn_video': 'bool',
        'debug': 'bool',
        'default_locale': 'str',
        'default_tls': 'bool',
        'default_theme': 'str',
        'default_timezone': 'str',
        'detect_nsfw': 'bool',
        'disable_backups': 'bool',
        'disable_classification': 'bool',
        'disable_darktable': 'bool',
        'disable_exif_tool': 'bool',
        'disable_f_fmpeg': 'bool',
        'disable_faces': 'bool',
        'disable_heif_convert': 'bool',
        'disable_image_magick': 'bool',
        'disable_jpeg_xl': 'bool',
        'disable_oidc': 'bool',
        'disable_places': 'bool',
        'disable_raw': 'bool',
        'disable_raw_therapee': 'bool',
        'disable_sips': 'bool',
        'disable_tls': 'bool',
        'disable_tensor_flow': 'bool',
        'disable_vectors': 'bool',
        'disable_vips': 'bool',
        'disable_web_dav': 'bool',
        'exif_brute_force': 'bool',
        'experimental': 'bool',
        'f_fmpeg_bitrate': 'int',
        'f_fmpeg_encoder': 'str',
        'f_fmpeg_map_audio': 'str',
        'f_fmpeg_map_video': 'str',
        'f_fmpeg_size': 'int',
        'http_cache_max_age': 'int',
        'http_cache_public': 'bool',
        'http_video_max_age': 'int',
        'https_proxy': 'str',
        'https_proxy_insecure': 'bool',
        'index_schedule': 'str',
        'index_workers': 'int',
        'jpeg_quality': 'int',
        'jpeg_size': 'int',
        'legal_info': 'str',
        'legal_url': 'str',
        'oidc_icon': 'str',
        'oidc_provider': 'str',
        'oidc_redirect': 'bool',
        'oidc_register': 'bool',
        'originals_limit': 'int',
        'png_size': 'int',
        'prod': 'bool',
        'raw_presets': 'bool',
        'read_only': 'bool',
        'resolution_limit': 'int',
        'sidecar_yaml': 'bool',
        'site_author': 'str',
        'site_caption': 'str',
        'site_description': 'str',
        'site_preview': 'str',
        'site_title': 'str',
        'site_url': 'str',
        'tls_cert': 'str',
        'tls_email': 'str',
        'tls_key': 'str',
        'test': 'bool',
        'thumb_color': 'str',
        'thumb_filter': 'str',
        'thumb_library': 'str',
        'thumb_size': 'int',
        'thumb_size_uncached': 'int',
        'thumb_uncached': 'bool',
        'trace': 'bool',
        'wakeup_interval': 'TimeDuration',
        'wallpaper_uri': 'str'
    }

    attribute_map = {
        'app_color': 'AppColor',
        'app_icon': 'AppIcon',
        'app_mode': 'AppMode',
        'app_name': 'AppName',
        'auto_import': 'AutoImport',
        'auto_index': 'AutoIndex',
        'backup_albums': 'BackupAlbums',
        'backup_database': 'BackupDatabase',
        'backup_retain': 'BackupRetain',
        'backup_schedule': 'BackupSchedule',
        'cdn_url': 'CdnUrl',
        'cdn_video': 'CdnVideo',
        'debug': 'Debug',
        'default_locale': 'DefaultLocale',
        'default_tls': 'DefaultTLS',
        'default_theme': 'DefaultTheme',
        'default_timezone': 'DefaultTimezone',
        'detect_nsfw': 'DetectNSFW',
        'disable_backups': 'DisableBackups',
        'disable_classification': 'DisableClassification',
        'disable_darktable': 'DisableDarktable',
        'disable_exif_tool': 'DisableExifTool',
        'disable_f_fmpeg': 'DisableFFmpeg',
        'disable_faces': 'DisableFaces',
        'disable_heif_convert': 'DisableHeifConvert',
        'disable_image_magick': 'DisableImageMagick',
        'disable_jpeg_xl': 'DisableJpegXL',
        'disable_oidc': 'DisableOIDC',
        'disable_places': 'DisablePlaces',
        'disable_raw': 'DisableRaw',
        'disable_raw_therapee': 'DisableRawTherapee',
        'disable_sips': 'DisableSips',
        'disable_tls': 'DisableTLS',
        'disable_tensor_flow': 'DisableTensorFlow',
        'disable_vectors': 'DisableVectors',
        'disable_vips': 'DisableVips',
        'disable_web_dav': 'DisableWebDAV',
        'exif_brute_force': 'ExifBruteForce',
        'experimental': 'Experimental',
        'f_fmpeg_bitrate': 'FFmpegBitrate',
        'f_fmpeg_encoder': 'FFmpegEncoder',
        'f_fmpeg_map_audio': 'FFmpegMapAudio',
        'f_fmpeg_map_video': 'FFmpegMapVideo',
        'f_fmpeg_size': 'FFmpegSize',
        'http_cache_max_age': 'HttpCacheMaxAge',
        'http_cache_public': 'HttpCachePublic',
        'http_video_max_age': 'HttpVideoMaxAge',
        'https_proxy': 'HttpsProxy',
        'https_proxy_insecure': 'HttpsProxyInsecure',
        'index_schedule': 'IndexSchedule',
        'index_workers': 'IndexWorkers',
        'jpeg_quality': 'JpegQuality',
        'jpeg_size': 'JpegSize',
        'legal_info': 'LegalInfo',
        'legal_url': 'LegalUrl',
        'oidc_icon': 'OIDCIcon',
        'oidc_provider': 'OIDCProvider',
        'oidc_redirect': 'OIDCRedirect',
        'oidc_register': 'OIDCRegister',
        'originals_limit': 'OriginalsLimit',
        'png_size': 'PngSize',
        'prod': 'Prod',
        'raw_presets': 'RawPresets',
        'read_only': 'ReadOnly',
        'resolution_limit': 'ResolutionLimit',
        'sidecar_yaml': 'SidecarYaml',
        'site_author': 'SiteAuthor',
        'site_caption': 'SiteCaption',
        'site_description': 'SiteDescription',
        'site_preview': 'SitePreview',
        'site_title': 'SiteTitle',
        'site_url': 'SiteUrl',
        'tls_cert': 'TLSCert',
        'tls_email': 'TLSEmail',
        'tls_key': 'TLSKey',
        'test': 'Test',
        'thumb_color': 'ThumbColor',
        'thumb_filter': 'ThumbFilter',
        'thumb_library': 'ThumbLibrary',
        'thumb_size': 'ThumbSize',
        'thumb_size_uncached': 'ThumbSizeUncached',
        'thumb_uncached': 'ThumbUncached',
        'trace': 'Trace',
        'wakeup_interval': 'WakeupInterval',
        'wallpaper_uri': 'WallpaperUri'
    }

    def __init__(self, app_color=None, app_icon=None, app_mode=None, app_name=None, auto_import=None, auto_index=None, backup_albums=True, backup_database=True, backup_retain=None, backup_schedule=None, cdn_url=None, cdn_video=None, debug=None, default_locale=None, default_tls=None, default_theme=None, default_timezone=None, detect_nsfw=None, disable_backups=None, disable_classification=None, disable_darktable=None, disable_exif_tool=None, disable_f_fmpeg=None, disable_faces=None, disable_heif_convert=None, disable_image_magick=None, disable_jpeg_xl=None, disable_oidc=None, disable_places=None, disable_raw=None, disable_raw_therapee=None, disable_sips=None, disable_tls=None, disable_tensor_flow=None, disable_vectors=None, disable_vips=None, disable_web_dav=None, exif_brute_force=None, experimental=None, f_fmpeg_bitrate=None, f_fmpeg_encoder=None, f_fmpeg_map_audio=None, f_fmpeg_map_video=None, f_fmpeg_size=None, http_cache_max_age=None, http_cache_public=None, http_video_max_age=None, https_proxy=None, https_proxy_insecure=None, index_schedule=None, index_workers=None, jpeg_quality=None, jpeg_size=None, legal_info=None, legal_url=None, oidc_icon=None, oidc_provider=None, oidc_redirect=None, oidc_register=None, originals_limit=None, png_size=None, prod=None, raw_presets=None, read_only=None, resolution_limit=None, sidecar_yaml=True, site_author=None, site_caption=None, site_description=None, site_preview=None, site_title=None, site_url=None, tls_cert=None, tls_email=None, tls_key=None, test=None, thumb_color=None, thumb_filter=None, thumb_library=None, thumb_size=None, thumb_size_uncached=None, thumb_uncached=None, trace=None, wakeup_interval=None, wallpaper_uri=None, _configuration=None):  # noqa: E501
        """ConfigOptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._app_color = None
        self._app_icon = None
        self._app_mode = None
        self._app_name = None
        self._auto_import = None
        self._auto_index = None
        self._backup_albums = None
        self._backup_database = None
        self._backup_retain = None
        self._backup_schedule = None
        self._cdn_url = None
        self._cdn_video = None
        self._debug = None
        self._default_locale = None
        self._default_tls = None
        self._default_theme = None
        self._default_timezone = None
        self._detect_nsfw = None
        self._disable_backups = None
        self._disable_classification = None
        self._disable_darktable = None
        self._disable_exif_tool = None
        self._disable_f_fmpeg = None
        self._disable_faces = None
        self._disable_heif_convert = None
        self._disable_image_magick = None
        self._disable_jpeg_xl = None
        self._disable_oidc = None
        self._disable_places = None
        self._disable_raw = None
        self._disable_raw_therapee = None
        self._disable_sips = None
        self._disable_tls = None
        self._disable_tensor_flow = None
        self._disable_vectors = None
        self._disable_vips = None
        self._disable_web_dav = None
        self._exif_brute_force = None
        self._experimental = None
        self._f_fmpeg_bitrate = None
        self._f_fmpeg_encoder = None
        self._f_fmpeg_map_audio = None
        self._f_fmpeg_map_video = None
        self._f_fmpeg_size = None
        self._http_cache_max_age = None
        self._http_cache_public = None
        self._http_video_max_age = None
        self._https_proxy = None
        self._https_proxy_insecure = None
        self._index_schedule = None
        self._index_workers = None
        self._jpeg_quality = None
        self._jpeg_size = None
        self._legal_info = None
        self._legal_url = None
        self._oidc_icon = None
        self._oidc_provider = None
        self._oidc_redirect = None
        self._oidc_register = None
        self._originals_limit = None
        self._png_size = None
        self._prod = None
        self._raw_presets = None
        self._read_only = None
        self._resolution_limit = None
        self._sidecar_yaml = None
        self._site_author = None
        self._site_caption = None
        self._site_description = None
        self._site_preview = None
        self._site_title = None
        self._site_url = None
        self._tls_cert = None
        self._tls_email = None
        self._tls_key = None
        self._test = None
        self._thumb_color = None
        self._thumb_filter = None
        self._thumb_library = None
        self._thumb_size = None
        self._thumb_size_uncached = None
        self._thumb_uncached = None
        self._trace = None
        self._wakeup_interval = None
        self._wallpaper_uri = None
        self.discriminator = None

        if app_color is not None:
            self.app_color = app_color
        if app_icon is not None:
            self.app_icon = app_icon
        if app_mode is not None:
            self.app_mode = app_mode
        if app_name is not None:
            self.app_name = app_name
        if auto_import is not None:
            self.auto_import = auto_import
        if auto_index is not None:
            self.auto_index = auto_index
        if backup_albums is not None:
            self.backup_albums = backup_albums
        if backup_database is not None:
            self.backup_database = backup_database
        if backup_retain is not None:
            self.backup_retain = backup_retain
        if backup_schedule is not None:
            self.backup_schedule = backup_schedule
        if cdn_url is not None:
            self.cdn_url = cdn_url
        if cdn_video is not None:
            self.cdn_video = cdn_video
        if debug is not None:
            self.debug = debug
        if default_locale is not None:
            self.default_locale = default_locale
        if default_tls is not None:
            self.default_tls = default_tls
        if default_theme is not None:
            self.default_theme = default_theme
        if default_timezone is not None:
            self.default_timezone = default_timezone
        if detect_nsfw is not None:
            self.detect_nsfw = detect_nsfw
        if disable_backups is not None:
            self.disable_backups = disable_backups
        if disable_classification is not None:
            self.disable_classification = disable_classification
        if disable_darktable is not None:
            self.disable_darktable = disable_darktable
        if disable_exif_tool is not None:
            self.disable_exif_tool = disable_exif_tool
        if disable_f_fmpeg is not None:
            self.disable_f_fmpeg = disable_f_fmpeg
        if disable_faces is not None:
            self.disable_faces = disable_faces
        if disable_heif_convert is not None:
            self.disable_heif_convert = disable_heif_convert
        if disable_image_magick is not None:
            self.disable_image_magick = disable_image_magick
        if disable_jpeg_xl is not None:
            self.disable_jpeg_xl = disable_jpeg_xl
        if disable_oidc is not None:
            self.disable_oidc = disable_oidc
        if disable_places is not None:
            self.disable_places = disable_places
        if disable_raw is not None:
            self.disable_raw = disable_raw
        if disable_raw_therapee is not None:
            self.disable_raw_therapee = disable_raw_therapee
        if disable_sips is not None:
            self.disable_sips = disable_sips
        if disable_tls is not None:
            self.disable_tls = disable_tls
        if disable_tensor_flow is not None:
            self.disable_tensor_flow = disable_tensor_flow
        if disable_vectors is not None:
            self.disable_vectors = disable_vectors
        if disable_vips is not None:
            self.disable_vips = disable_vips
        if disable_web_dav is not None:
            self.disable_web_dav = disable_web_dav
        if exif_brute_force is not None:
            self.exif_brute_force = exif_brute_force
        if experimental is not None:
            self.experimental = experimental
        if f_fmpeg_bitrate is not None:
            self.f_fmpeg_bitrate = f_fmpeg_bitrate
        if f_fmpeg_encoder is not None:
            self.f_fmpeg_encoder = f_fmpeg_encoder
        if f_fmpeg_map_audio is not None:
            self.f_fmpeg_map_audio = f_fmpeg_map_audio
        if f_fmpeg_map_video is not None:
            self.f_fmpeg_map_video = f_fmpeg_map_video
        if f_fmpeg_size is not None:
            self.f_fmpeg_size = f_fmpeg_size
        if http_cache_max_age is not None:
            self.http_cache_max_age = http_cache_max_age
        if http_cache_public is not None:
            self.http_cache_public = http_cache_public
        if http_video_max_age is not None:
            self.http_video_max_age = http_video_max_age
        if https_proxy is not None:
            self.https_proxy = https_proxy
        if https_proxy_insecure is not None:
            self.https_proxy_insecure = https_proxy_insecure
        if index_schedule is not None:
            self.index_schedule = index_schedule
        if index_workers is not None:
            self.index_workers = index_workers
        if jpeg_quality is not None:
            self.jpeg_quality = jpeg_quality
        if jpeg_size is not None:
            self.jpeg_size = jpeg_size
        if legal_info is not None:
            self.legal_info = legal_info
        if legal_url is not None:
            self.legal_url = legal_url
        if oidc_icon is not None:
            self.oidc_icon = oidc_icon
        if oidc_provider is not None:
            self.oidc_provider = oidc_provider
        if oidc_redirect is not None:
            self.oidc_redirect = oidc_redirect
        if oidc_register is not None:
            self.oidc_register = oidc_register
        if originals_limit is not None:
            self.originals_limit = originals_limit
        if png_size is not None:
            self.png_size = png_size
        if prod is not None:
            self.prod = prod
        if raw_presets is not None:
            self.raw_presets = raw_presets
        if read_only is not None:
            self.read_only = read_only
        if resolution_limit is not None:
            self.resolution_limit = resolution_limit
        if sidecar_yaml is not None:
            self.sidecar_yaml = sidecar_yaml
        if site_author is not None:
            self.site_author = site_author
        if site_caption is not None:
            self.site_caption = site_caption
        if site_description is not None:
            self.site_description = site_description
        if site_preview is not None:
            self.site_preview = site_preview
        if site_title is not None:
            self.site_title = site_title
        if site_url is not None:
            self.site_url = site_url
        if tls_cert is not None:
            self.tls_cert = tls_cert
        if tls_email is not None:
            self.tls_email = tls_email
        if tls_key is not None:
            self.tls_key = tls_key
        if test is not None:
            self.test = test
        if thumb_color is not None:
            self.thumb_color = thumb_color
        if thumb_filter is not None:
            self.thumb_filter = thumb_filter
        if thumb_library is not None:
            self.thumb_library = thumb_library
        if thumb_size is not None:
            self.thumb_size = thumb_size
        if thumb_size_uncached is not None:
            self.thumb_size_uncached = thumb_size_uncached
        if thumb_uncached is not None:
            self.thumb_uncached = thumb_uncached
        if trace is not None:
            self.trace = trace
        if wakeup_interval is not None:
            self.wakeup_interval = wakeup_interval
        if wallpaper_uri is not None:
            self.wallpaper_uri = wallpaper_uri

    @property
    def app_color(self):
        """Gets the app_color of this ConfigOptions.  # noqa: E501


        :return: The app_color of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._app_color

    @app_color.setter
    def app_color(self, app_color):
        """Sets the app_color of this ConfigOptions.


        :param app_color: The app_color of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._app_color = app_color

    @property
    def app_icon(self):
        """Gets the app_icon of this ConfigOptions.  # noqa: E501


        :return: The app_icon of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._app_icon

    @app_icon.setter
    def app_icon(self, app_icon):
        """Sets the app_icon of this ConfigOptions.


        :param app_icon: The app_icon of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._app_icon = app_icon

    @property
    def app_mode(self):
        """Gets the app_mode of this ConfigOptions.  # noqa: E501


        :return: The app_mode of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._app_mode

    @app_mode.setter
    def app_mode(self, app_mode):
        """Sets the app_mode of this ConfigOptions.


        :param app_mode: The app_mode of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._app_mode = app_mode

    @property
    def app_name(self):
        """Gets the app_name of this ConfigOptions.  # noqa: E501


        :return: The app_name of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this ConfigOptions.


        :param app_name: The app_name of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def auto_import(self):
        """Gets the auto_import of this ConfigOptions.  # noqa: E501


        :return: The auto_import of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._auto_import

    @auto_import.setter
    def auto_import(self, auto_import):
        """Sets the auto_import of this ConfigOptions.


        :param auto_import: The auto_import of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._auto_import = auto_import

    @property
    def auto_index(self):
        """Gets the auto_index of this ConfigOptions.  # noqa: E501


        :return: The auto_index of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._auto_index

    @auto_index.setter
    def auto_index(self, auto_index):
        """Sets the auto_index of this ConfigOptions.


        :param auto_index: The auto_index of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._auto_index = auto_index

    @property
    def backup_albums(self):
        """Gets the backup_albums of this ConfigOptions.  # noqa: E501


        :return: The backup_albums of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._backup_albums

    @backup_albums.setter
    def backup_albums(self, backup_albums):
        """Sets the backup_albums of this ConfigOptions.


        :param backup_albums: The backup_albums of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._backup_albums = backup_albums

    @property
    def backup_database(self):
        """Gets the backup_database of this ConfigOptions.  # noqa: E501


        :return: The backup_database of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._backup_database

    @backup_database.setter
    def backup_database(self, backup_database):
        """Sets the backup_database of this ConfigOptions.


        :param backup_database: The backup_database of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._backup_database = backup_database

    @property
    def backup_retain(self):
        """Gets the backup_retain of this ConfigOptions.  # noqa: E501


        :return: The backup_retain of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._backup_retain

    @backup_retain.setter
    def backup_retain(self, backup_retain):
        """Sets the backup_retain of this ConfigOptions.


        :param backup_retain: The backup_retain of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._backup_retain = backup_retain

    @property
    def backup_schedule(self):
        """Gets the backup_schedule of this ConfigOptions.  # noqa: E501


        :return: The backup_schedule of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._backup_schedule

    @backup_schedule.setter
    def backup_schedule(self, backup_schedule):
        """Sets the backup_schedule of this ConfigOptions.


        :param backup_schedule: The backup_schedule of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._backup_schedule = backup_schedule

    @property
    def cdn_url(self):
        """Gets the cdn_url of this ConfigOptions.  # noqa: E501


        :return: The cdn_url of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._cdn_url

    @cdn_url.setter
    def cdn_url(self, cdn_url):
        """Sets the cdn_url of this ConfigOptions.


        :param cdn_url: The cdn_url of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._cdn_url = cdn_url

    @property
    def cdn_video(self):
        """Gets the cdn_video of this ConfigOptions.  # noqa: E501


        :return: The cdn_video of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._cdn_video

    @cdn_video.setter
    def cdn_video(self, cdn_video):
        """Sets the cdn_video of this ConfigOptions.


        :param cdn_video: The cdn_video of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._cdn_video = cdn_video

    @property
    def debug(self):
        """Gets the debug of this ConfigOptions.  # noqa: E501


        :return: The debug of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this ConfigOptions.


        :param debug: The debug of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._debug = debug

    @property
    def default_locale(self):
        """Gets the default_locale of this ConfigOptions.  # noqa: E501


        :return: The default_locale of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._default_locale

    @default_locale.setter
    def default_locale(self, default_locale):
        """Sets the default_locale of this ConfigOptions.


        :param default_locale: The default_locale of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._default_locale = default_locale

    @property
    def default_tls(self):
        """Gets the default_tls of this ConfigOptions.  # noqa: E501


        :return: The default_tls of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._default_tls

    @default_tls.setter
    def default_tls(self, default_tls):
        """Sets the default_tls of this ConfigOptions.


        :param default_tls: The default_tls of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._default_tls = default_tls

    @property
    def default_theme(self):
        """Gets the default_theme of this ConfigOptions.  # noqa: E501


        :return: The default_theme of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._default_theme

    @default_theme.setter
    def default_theme(self, default_theme):
        """Sets the default_theme of this ConfigOptions.


        :param default_theme: The default_theme of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._default_theme = default_theme

    @property
    def default_timezone(self):
        """Gets the default_timezone of this ConfigOptions.  # noqa: E501


        :return: The default_timezone of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._default_timezone

    @default_timezone.setter
    def default_timezone(self, default_timezone):
        """Sets the default_timezone of this ConfigOptions.


        :param default_timezone: The default_timezone of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._default_timezone = default_timezone

    @property
    def detect_nsfw(self):
        """Gets the detect_nsfw of this ConfigOptions.  # noqa: E501


        :return: The detect_nsfw of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._detect_nsfw

    @detect_nsfw.setter
    def detect_nsfw(self, detect_nsfw):
        """Sets the detect_nsfw of this ConfigOptions.


        :param detect_nsfw: The detect_nsfw of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._detect_nsfw = detect_nsfw

    @property
    def disable_backups(self):
        """Gets the disable_backups of this ConfigOptions.  # noqa: E501


        :return: The disable_backups of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_backups

    @disable_backups.setter
    def disable_backups(self, disable_backups):
        """Sets the disable_backups of this ConfigOptions.


        :param disable_backups: The disable_backups of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_backups = disable_backups

    @property
    def disable_classification(self):
        """Gets the disable_classification of this ConfigOptions.  # noqa: E501


        :return: The disable_classification of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_classification

    @disable_classification.setter
    def disable_classification(self, disable_classification):
        """Sets the disable_classification of this ConfigOptions.


        :param disable_classification: The disable_classification of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_classification = disable_classification

    @property
    def disable_darktable(self):
        """Gets the disable_darktable of this ConfigOptions.  # noqa: E501


        :return: The disable_darktable of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_darktable

    @disable_darktable.setter
    def disable_darktable(self, disable_darktable):
        """Sets the disable_darktable of this ConfigOptions.


        :param disable_darktable: The disable_darktable of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_darktable = disable_darktable

    @property
    def disable_exif_tool(self):
        """Gets the disable_exif_tool of this ConfigOptions.  # noqa: E501


        :return: The disable_exif_tool of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_exif_tool

    @disable_exif_tool.setter
    def disable_exif_tool(self, disable_exif_tool):
        """Sets the disable_exif_tool of this ConfigOptions.


        :param disable_exif_tool: The disable_exif_tool of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_exif_tool = disable_exif_tool

    @property
    def disable_f_fmpeg(self):
        """Gets the disable_f_fmpeg of this ConfigOptions.  # noqa: E501


        :return: The disable_f_fmpeg of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_f_fmpeg

    @disable_f_fmpeg.setter
    def disable_f_fmpeg(self, disable_f_fmpeg):
        """Sets the disable_f_fmpeg of this ConfigOptions.


        :param disable_f_fmpeg: The disable_f_fmpeg of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_f_fmpeg = disable_f_fmpeg

    @property
    def disable_faces(self):
        """Gets the disable_faces of this ConfigOptions.  # noqa: E501


        :return: The disable_faces of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_faces

    @disable_faces.setter
    def disable_faces(self, disable_faces):
        """Sets the disable_faces of this ConfigOptions.


        :param disable_faces: The disable_faces of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_faces = disable_faces

    @property
    def disable_heif_convert(self):
        """Gets the disable_heif_convert of this ConfigOptions.  # noqa: E501


        :return: The disable_heif_convert of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_heif_convert

    @disable_heif_convert.setter
    def disable_heif_convert(self, disable_heif_convert):
        """Sets the disable_heif_convert of this ConfigOptions.


        :param disable_heif_convert: The disable_heif_convert of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_heif_convert = disable_heif_convert

    @property
    def disable_image_magick(self):
        """Gets the disable_image_magick of this ConfigOptions.  # noqa: E501


        :return: The disable_image_magick of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_image_magick

    @disable_image_magick.setter
    def disable_image_magick(self, disable_image_magick):
        """Sets the disable_image_magick of this ConfigOptions.


        :param disable_image_magick: The disable_image_magick of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_image_magick = disable_image_magick

    @property
    def disable_jpeg_xl(self):
        """Gets the disable_jpeg_xl of this ConfigOptions.  # noqa: E501


        :return: The disable_jpeg_xl of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_jpeg_xl

    @disable_jpeg_xl.setter
    def disable_jpeg_xl(self, disable_jpeg_xl):
        """Sets the disable_jpeg_xl of this ConfigOptions.


        :param disable_jpeg_xl: The disable_jpeg_xl of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_jpeg_xl = disable_jpeg_xl

    @property
    def disable_oidc(self):
        """Gets the disable_oidc of this ConfigOptions.  # noqa: E501


        :return: The disable_oidc of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_oidc

    @disable_oidc.setter
    def disable_oidc(self, disable_oidc):
        """Sets the disable_oidc of this ConfigOptions.


        :param disable_oidc: The disable_oidc of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_oidc = disable_oidc

    @property
    def disable_places(self):
        """Gets the disable_places of this ConfigOptions.  # noqa: E501


        :return: The disable_places of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_places

    @disable_places.setter
    def disable_places(self, disable_places):
        """Sets the disable_places of this ConfigOptions.


        :param disable_places: The disable_places of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_places = disable_places

    @property
    def disable_raw(self):
        """Gets the disable_raw of this ConfigOptions.  # noqa: E501


        :return: The disable_raw of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_raw

    @disable_raw.setter
    def disable_raw(self, disable_raw):
        """Sets the disable_raw of this ConfigOptions.


        :param disable_raw: The disable_raw of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_raw = disable_raw

    @property
    def disable_raw_therapee(self):
        """Gets the disable_raw_therapee of this ConfigOptions.  # noqa: E501


        :return: The disable_raw_therapee of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_raw_therapee

    @disable_raw_therapee.setter
    def disable_raw_therapee(self, disable_raw_therapee):
        """Sets the disable_raw_therapee of this ConfigOptions.


        :param disable_raw_therapee: The disable_raw_therapee of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_raw_therapee = disable_raw_therapee

    @property
    def disable_sips(self):
        """Gets the disable_sips of this ConfigOptions.  # noqa: E501


        :return: The disable_sips of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_sips

    @disable_sips.setter
    def disable_sips(self, disable_sips):
        """Sets the disable_sips of this ConfigOptions.


        :param disable_sips: The disable_sips of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_sips = disable_sips

    @property
    def disable_tls(self):
        """Gets the disable_tls of this ConfigOptions.  # noqa: E501


        :return: The disable_tls of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_tls

    @disable_tls.setter
    def disable_tls(self, disable_tls):
        """Sets the disable_tls of this ConfigOptions.


        :param disable_tls: The disable_tls of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_tls = disable_tls

    @property
    def disable_tensor_flow(self):
        """Gets the disable_tensor_flow of this ConfigOptions.  # noqa: E501


        :return: The disable_tensor_flow of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_tensor_flow

    @disable_tensor_flow.setter
    def disable_tensor_flow(self, disable_tensor_flow):
        """Sets the disable_tensor_flow of this ConfigOptions.


        :param disable_tensor_flow: The disable_tensor_flow of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_tensor_flow = disable_tensor_flow

    @property
    def disable_vectors(self):
        """Gets the disable_vectors of this ConfigOptions.  # noqa: E501


        :return: The disable_vectors of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_vectors

    @disable_vectors.setter
    def disable_vectors(self, disable_vectors):
        """Sets the disable_vectors of this ConfigOptions.


        :param disable_vectors: The disable_vectors of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_vectors = disable_vectors

    @property
    def disable_vips(self):
        """Gets the disable_vips of this ConfigOptions.  # noqa: E501


        :return: The disable_vips of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_vips

    @disable_vips.setter
    def disable_vips(self, disable_vips):
        """Sets the disable_vips of this ConfigOptions.


        :param disable_vips: The disable_vips of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_vips = disable_vips

    @property
    def disable_web_dav(self):
        """Gets the disable_web_dav of this ConfigOptions.  # noqa: E501


        :return: The disable_web_dav of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._disable_web_dav

    @disable_web_dav.setter
    def disable_web_dav(self, disable_web_dav):
        """Sets the disable_web_dav of this ConfigOptions.


        :param disable_web_dav: The disable_web_dav of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._disable_web_dav = disable_web_dav

    @property
    def exif_brute_force(self):
        """Gets the exif_brute_force of this ConfigOptions.  # noqa: E501


        :return: The exif_brute_force of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._exif_brute_force

    @exif_brute_force.setter
    def exif_brute_force(self, exif_brute_force):
        """Sets the exif_brute_force of this ConfigOptions.


        :param exif_brute_force: The exif_brute_force of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._exif_brute_force = exif_brute_force

    @property
    def experimental(self):
        """Gets the experimental of this ConfigOptions.  # noqa: E501


        :return: The experimental of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._experimental

    @experimental.setter
    def experimental(self, experimental):
        """Sets the experimental of this ConfigOptions.


        :param experimental: The experimental of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._experimental = experimental

    @property
    def f_fmpeg_bitrate(self):
        """Gets the f_fmpeg_bitrate of this ConfigOptions.  # noqa: E501


        :return: The f_fmpeg_bitrate of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._f_fmpeg_bitrate

    @f_fmpeg_bitrate.setter
    def f_fmpeg_bitrate(self, f_fmpeg_bitrate):
        """Sets the f_fmpeg_bitrate of this ConfigOptions.


        :param f_fmpeg_bitrate: The f_fmpeg_bitrate of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._f_fmpeg_bitrate = f_fmpeg_bitrate

    @property
    def f_fmpeg_encoder(self):
        """Gets the f_fmpeg_encoder of this ConfigOptions.  # noqa: E501


        :return: The f_fmpeg_encoder of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._f_fmpeg_encoder

    @f_fmpeg_encoder.setter
    def f_fmpeg_encoder(self, f_fmpeg_encoder):
        """Sets the f_fmpeg_encoder of this ConfigOptions.


        :param f_fmpeg_encoder: The f_fmpeg_encoder of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._f_fmpeg_encoder = f_fmpeg_encoder

    @property
    def f_fmpeg_map_audio(self):
        """Gets the f_fmpeg_map_audio of this ConfigOptions.  # noqa: E501


        :return: The f_fmpeg_map_audio of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._f_fmpeg_map_audio

    @f_fmpeg_map_audio.setter
    def f_fmpeg_map_audio(self, f_fmpeg_map_audio):
        """Sets the f_fmpeg_map_audio of this ConfigOptions.


        :param f_fmpeg_map_audio: The f_fmpeg_map_audio of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._f_fmpeg_map_audio = f_fmpeg_map_audio

    @property
    def f_fmpeg_map_video(self):
        """Gets the f_fmpeg_map_video of this ConfigOptions.  # noqa: E501


        :return: The f_fmpeg_map_video of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._f_fmpeg_map_video

    @f_fmpeg_map_video.setter
    def f_fmpeg_map_video(self, f_fmpeg_map_video):
        """Sets the f_fmpeg_map_video of this ConfigOptions.


        :param f_fmpeg_map_video: The f_fmpeg_map_video of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._f_fmpeg_map_video = f_fmpeg_map_video

    @property
    def f_fmpeg_size(self):
        """Gets the f_fmpeg_size of this ConfigOptions.  # noqa: E501


        :return: The f_fmpeg_size of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._f_fmpeg_size

    @f_fmpeg_size.setter
    def f_fmpeg_size(self, f_fmpeg_size):
        """Sets the f_fmpeg_size of this ConfigOptions.


        :param f_fmpeg_size: The f_fmpeg_size of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._f_fmpeg_size = f_fmpeg_size

    @property
    def http_cache_max_age(self):
        """Gets the http_cache_max_age of this ConfigOptions.  # noqa: E501


        :return: The http_cache_max_age of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._http_cache_max_age

    @http_cache_max_age.setter
    def http_cache_max_age(self, http_cache_max_age):
        """Sets the http_cache_max_age of this ConfigOptions.


        :param http_cache_max_age: The http_cache_max_age of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._http_cache_max_age = http_cache_max_age

    @property
    def http_cache_public(self):
        """Gets the http_cache_public of this ConfigOptions.  # noqa: E501


        :return: The http_cache_public of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._http_cache_public

    @http_cache_public.setter
    def http_cache_public(self, http_cache_public):
        """Sets the http_cache_public of this ConfigOptions.


        :param http_cache_public: The http_cache_public of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._http_cache_public = http_cache_public

    @property
    def http_video_max_age(self):
        """Gets the http_video_max_age of this ConfigOptions.  # noqa: E501


        :return: The http_video_max_age of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._http_video_max_age

    @http_video_max_age.setter
    def http_video_max_age(self, http_video_max_age):
        """Sets the http_video_max_age of this ConfigOptions.


        :param http_video_max_age: The http_video_max_age of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._http_video_max_age = http_video_max_age

    @property
    def https_proxy(self):
        """Gets the https_proxy of this ConfigOptions.  # noqa: E501


        :return: The https_proxy of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._https_proxy

    @https_proxy.setter
    def https_proxy(self, https_proxy):
        """Sets the https_proxy of this ConfigOptions.


        :param https_proxy: The https_proxy of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._https_proxy = https_proxy

    @property
    def https_proxy_insecure(self):
        """Gets the https_proxy_insecure of this ConfigOptions.  # noqa: E501


        :return: The https_proxy_insecure of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._https_proxy_insecure

    @https_proxy_insecure.setter
    def https_proxy_insecure(self, https_proxy_insecure):
        """Sets the https_proxy_insecure of this ConfigOptions.


        :param https_proxy_insecure: The https_proxy_insecure of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._https_proxy_insecure = https_proxy_insecure

    @property
    def index_schedule(self):
        """Gets the index_schedule of this ConfigOptions.  # noqa: E501


        :return: The index_schedule of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._index_schedule

    @index_schedule.setter
    def index_schedule(self, index_schedule):
        """Sets the index_schedule of this ConfigOptions.


        :param index_schedule: The index_schedule of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._index_schedule = index_schedule

    @property
    def index_workers(self):
        """Gets the index_workers of this ConfigOptions.  # noqa: E501


        :return: The index_workers of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._index_workers

    @index_workers.setter
    def index_workers(self, index_workers):
        """Sets the index_workers of this ConfigOptions.


        :param index_workers: The index_workers of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._index_workers = index_workers

    @property
    def jpeg_quality(self):
        """Gets the jpeg_quality of this ConfigOptions.  # noqa: E501


        :return: The jpeg_quality of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._jpeg_quality

    @jpeg_quality.setter
    def jpeg_quality(self, jpeg_quality):
        """Sets the jpeg_quality of this ConfigOptions.


        :param jpeg_quality: The jpeg_quality of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._jpeg_quality = jpeg_quality

    @property
    def jpeg_size(self):
        """Gets the jpeg_size of this ConfigOptions.  # noqa: E501


        :return: The jpeg_size of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._jpeg_size

    @jpeg_size.setter
    def jpeg_size(self, jpeg_size):
        """Sets the jpeg_size of this ConfigOptions.


        :param jpeg_size: The jpeg_size of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._jpeg_size = jpeg_size

    @property
    def legal_info(self):
        """Gets the legal_info of this ConfigOptions.  # noqa: E501


        :return: The legal_info of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._legal_info

    @legal_info.setter
    def legal_info(self, legal_info):
        """Sets the legal_info of this ConfigOptions.


        :param legal_info: The legal_info of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._legal_info = legal_info

    @property
    def legal_url(self):
        """Gets the legal_url of this ConfigOptions.  # noqa: E501


        :return: The legal_url of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._legal_url

    @legal_url.setter
    def legal_url(self, legal_url):
        """Sets the legal_url of this ConfigOptions.


        :param legal_url: The legal_url of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._legal_url = legal_url

    @property
    def oidc_icon(self):
        """Gets the oidc_icon of this ConfigOptions.  # noqa: E501


        :return: The oidc_icon of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._oidc_icon

    @oidc_icon.setter
    def oidc_icon(self, oidc_icon):
        """Sets the oidc_icon of this ConfigOptions.


        :param oidc_icon: The oidc_icon of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._oidc_icon = oidc_icon

    @property
    def oidc_provider(self):
        """Gets the oidc_provider of this ConfigOptions.  # noqa: E501


        :return: The oidc_provider of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._oidc_provider

    @oidc_provider.setter
    def oidc_provider(self, oidc_provider):
        """Sets the oidc_provider of this ConfigOptions.


        :param oidc_provider: The oidc_provider of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._oidc_provider = oidc_provider

    @property
    def oidc_redirect(self):
        """Gets the oidc_redirect of this ConfigOptions.  # noqa: E501


        :return: The oidc_redirect of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._oidc_redirect

    @oidc_redirect.setter
    def oidc_redirect(self, oidc_redirect):
        """Sets the oidc_redirect of this ConfigOptions.


        :param oidc_redirect: The oidc_redirect of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._oidc_redirect = oidc_redirect

    @property
    def oidc_register(self):
        """Gets the oidc_register of this ConfigOptions.  # noqa: E501


        :return: The oidc_register of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._oidc_register

    @oidc_register.setter
    def oidc_register(self, oidc_register):
        """Sets the oidc_register of this ConfigOptions.


        :param oidc_register: The oidc_register of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._oidc_register = oidc_register

    @property
    def originals_limit(self):
        """Gets the originals_limit of this ConfigOptions.  # noqa: E501


        :return: The originals_limit of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._originals_limit

    @originals_limit.setter
    def originals_limit(self, originals_limit):
        """Sets the originals_limit of this ConfigOptions.


        :param originals_limit: The originals_limit of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._originals_limit = originals_limit

    @property
    def png_size(self):
        """Gets the png_size of this ConfigOptions.  # noqa: E501


        :return: The png_size of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._png_size

    @png_size.setter
    def png_size(self, png_size):
        """Sets the png_size of this ConfigOptions.


        :param png_size: The png_size of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._png_size = png_size

    @property
    def prod(self):
        """Gets the prod of this ConfigOptions.  # noqa: E501


        :return: The prod of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._prod

    @prod.setter
    def prod(self, prod):
        """Sets the prod of this ConfigOptions.


        :param prod: The prod of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._prod = prod

    @property
    def raw_presets(self):
        """Gets the raw_presets of this ConfigOptions.  # noqa: E501


        :return: The raw_presets of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._raw_presets

    @raw_presets.setter
    def raw_presets(self, raw_presets):
        """Sets the raw_presets of this ConfigOptions.


        :param raw_presets: The raw_presets of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._raw_presets = raw_presets

    @property
    def read_only(self):
        """Gets the read_only of this ConfigOptions.  # noqa: E501


        :return: The read_only of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this ConfigOptions.


        :param read_only: The read_only of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def resolution_limit(self):
        """Gets the resolution_limit of this ConfigOptions.  # noqa: E501


        :return: The resolution_limit of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._resolution_limit

    @resolution_limit.setter
    def resolution_limit(self, resolution_limit):
        """Sets the resolution_limit of this ConfigOptions.


        :param resolution_limit: The resolution_limit of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._resolution_limit = resolution_limit

    @property
    def sidecar_yaml(self):
        """Gets the sidecar_yaml of this ConfigOptions.  # noqa: E501


        :return: The sidecar_yaml of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._sidecar_yaml

    @sidecar_yaml.setter
    def sidecar_yaml(self, sidecar_yaml):
        """Sets the sidecar_yaml of this ConfigOptions.


        :param sidecar_yaml: The sidecar_yaml of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._sidecar_yaml = sidecar_yaml

    @property
    def site_author(self):
        """Gets the site_author of this ConfigOptions.  # noqa: E501


        :return: The site_author of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._site_author

    @site_author.setter
    def site_author(self, site_author):
        """Sets the site_author of this ConfigOptions.


        :param site_author: The site_author of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._site_author = site_author

    @property
    def site_caption(self):
        """Gets the site_caption of this ConfigOptions.  # noqa: E501


        :return: The site_caption of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._site_caption

    @site_caption.setter
    def site_caption(self, site_caption):
        """Sets the site_caption of this ConfigOptions.


        :param site_caption: The site_caption of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._site_caption = site_caption

    @property
    def site_description(self):
        """Gets the site_description of this ConfigOptions.  # noqa: E501


        :return: The site_description of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._site_description

    @site_description.setter
    def site_description(self, site_description):
        """Sets the site_description of this ConfigOptions.


        :param site_description: The site_description of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._site_description = site_description

    @property
    def site_preview(self):
        """Gets the site_preview of this ConfigOptions.  # noqa: E501


        :return: The site_preview of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._site_preview

    @site_preview.setter
    def site_preview(self, site_preview):
        """Sets the site_preview of this ConfigOptions.


        :param site_preview: The site_preview of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._site_preview = site_preview

    @property
    def site_title(self):
        """Gets the site_title of this ConfigOptions.  # noqa: E501


        :return: The site_title of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._site_title

    @site_title.setter
    def site_title(self, site_title):
        """Sets the site_title of this ConfigOptions.


        :param site_title: The site_title of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._site_title = site_title

    @property
    def site_url(self):
        """Gets the site_url of this ConfigOptions.  # noqa: E501


        :return: The site_url of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._site_url

    @site_url.setter
    def site_url(self, site_url):
        """Sets the site_url of this ConfigOptions.


        :param site_url: The site_url of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._site_url = site_url

    @property
    def tls_cert(self):
        """Gets the tls_cert of this ConfigOptions.  # noqa: E501


        :return: The tls_cert of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._tls_cert

    @tls_cert.setter
    def tls_cert(self, tls_cert):
        """Sets the tls_cert of this ConfigOptions.


        :param tls_cert: The tls_cert of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._tls_cert = tls_cert

    @property
    def tls_email(self):
        """Gets the tls_email of this ConfigOptions.  # noqa: E501


        :return: The tls_email of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._tls_email

    @tls_email.setter
    def tls_email(self, tls_email):
        """Sets the tls_email of this ConfigOptions.


        :param tls_email: The tls_email of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._tls_email = tls_email

    @property
    def tls_key(self):
        """Gets the tls_key of this ConfigOptions.  # noqa: E501


        :return: The tls_key of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._tls_key

    @tls_key.setter
    def tls_key(self, tls_key):
        """Sets the tls_key of this ConfigOptions.


        :param tls_key: The tls_key of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._tls_key = tls_key

    @property
    def test(self):
        """Gets the test of this ConfigOptions.  # noqa: E501


        :return: The test of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this ConfigOptions.


        :param test: The test of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._test = test

    @property
    def thumb_color(self):
        """Gets the thumb_color of this ConfigOptions.  # noqa: E501


        :return: The thumb_color of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._thumb_color

    @thumb_color.setter
    def thumb_color(self, thumb_color):
        """Sets the thumb_color of this ConfigOptions.


        :param thumb_color: The thumb_color of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._thumb_color = thumb_color

    @property
    def thumb_filter(self):
        """Gets the thumb_filter of this ConfigOptions.  # noqa: E501


        :return: The thumb_filter of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._thumb_filter

    @thumb_filter.setter
    def thumb_filter(self, thumb_filter):
        """Sets the thumb_filter of this ConfigOptions.


        :param thumb_filter: The thumb_filter of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._thumb_filter = thumb_filter

    @property
    def thumb_library(self):
        """Gets the thumb_library of this ConfigOptions.  # noqa: E501


        :return: The thumb_library of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._thumb_library

    @thumb_library.setter
    def thumb_library(self, thumb_library):
        """Sets the thumb_library of this ConfigOptions.


        :param thumb_library: The thumb_library of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._thumb_library = thumb_library

    @property
    def thumb_size(self):
        """Gets the thumb_size of this ConfigOptions.  # noqa: E501


        :return: The thumb_size of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._thumb_size

    @thumb_size.setter
    def thumb_size(self, thumb_size):
        """Sets the thumb_size of this ConfigOptions.


        :param thumb_size: The thumb_size of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._thumb_size = thumb_size

    @property
    def thumb_size_uncached(self):
        """Gets the thumb_size_uncached of this ConfigOptions.  # noqa: E501


        :return: The thumb_size_uncached of this ConfigOptions.  # noqa: E501
        :rtype: int
        """
        return self._thumb_size_uncached

    @thumb_size_uncached.setter
    def thumb_size_uncached(self, thumb_size_uncached):
        """Sets the thumb_size_uncached of this ConfigOptions.


        :param thumb_size_uncached: The thumb_size_uncached of this ConfigOptions.  # noqa: E501
        :type: int
        """

        self._thumb_size_uncached = thumb_size_uncached

    @property
    def thumb_uncached(self):
        """Gets the thumb_uncached of this ConfigOptions.  # noqa: E501


        :return: The thumb_uncached of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._thumb_uncached

    @thumb_uncached.setter
    def thumb_uncached(self, thumb_uncached):
        """Sets the thumb_uncached of this ConfigOptions.


        :param thumb_uncached: The thumb_uncached of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._thumb_uncached = thumb_uncached

    @property
    def trace(self):
        """Gets the trace of this ConfigOptions.  # noqa: E501


        :return: The trace of this ConfigOptions.  # noqa: E501
        :rtype: bool
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this ConfigOptions.


        :param trace: The trace of this ConfigOptions.  # noqa: E501
        :type: bool
        """

        self._trace = trace

    @property
    def wakeup_interval(self):
        """Gets the wakeup_interval of this ConfigOptions.  # noqa: E501


        :return: The wakeup_interval of this ConfigOptions.  # noqa: E501
        :rtype: TimeDuration
        """
        return self._wakeup_interval

    @wakeup_interval.setter
    def wakeup_interval(self, wakeup_interval):
        """Sets the wakeup_interval of this ConfigOptions.


        :param wakeup_interval: The wakeup_interval of this ConfigOptions.  # noqa: E501
        :type: TimeDuration
        """

        self._wakeup_interval = wakeup_interval

    @property
    def wallpaper_uri(self):
        """Gets the wallpaper_uri of this ConfigOptions.  # noqa: E501


        :return: The wallpaper_uri of this ConfigOptions.  # noqa: E501
        :rtype: str
        """
        return self._wallpaper_uri

    @wallpaper_uri.setter
    def wallpaper_uri(self, wallpaper_uri):
        """Sets the wallpaper_uri of this ConfigOptions.


        :param wallpaper_uri: The wallpaper_uri of this ConfigOptions.  # noqa: E501
        :type: str
        """

        self._wallpaper_uri = wallpaper_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigOptions):
            return True

        return self.to_dict() != other.to_dict()
