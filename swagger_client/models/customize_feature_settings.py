# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CustomizeFeatureSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'bool',
        'albums': 'bool',
        'archive': 'bool',
        'delete': 'bool',
        'download': 'bool',
        'edit': 'bool',
        'estimates': 'bool',
        'favorites': 'bool',
        'files': 'bool',
        'folders': 'bool',
        '_import': 'bool',
        'labels': 'bool',
        'library': 'bool',
        'logs': 'bool',
        'moments': 'bool',
        'people': 'bool',
        'places': 'bool',
        'private': 'bool',
        'ratings': 'bool',
        'reactions': 'bool',
        'review': 'bool',
        'search': 'bool',
        'services': 'bool',
        'settings': 'bool',
        'share': 'bool',
        'upload': 'bool',
        'videos': 'bool'
    }

    attribute_map = {
        'account': 'account',
        'albums': 'albums',
        'archive': 'archive',
        'delete': 'delete',
        'download': 'download',
        'edit': 'edit',
        'estimates': 'estimates',
        'favorites': 'favorites',
        'files': 'files',
        'folders': 'folders',
        '_import': 'import',
        'labels': 'labels',
        'library': 'library',
        'logs': 'logs',
        'moments': 'moments',
        'people': 'people',
        'places': 'places',
        'private': 'private',
        'ratings': 'ratings',
        'reactions': 'reactions',
        'review': 'review',
        'search': 'search',
        'services': 'services',
        'settings': 'settings',
        'share': 'share',
        'upload': 'upload',
        'videos': 'videos'
    }

    def __init__(self, account=None, albums=None, archive=None, delete=None, download=None, edit=None, estimates=None, favorites=None, files=None, folders=None, _import=None, labels=None, library=None, logs=None, moments=None, people=None, places=None, private=None, ratings=None, reactions=None, review=None, search=None, services=None, settings=None, share=None, upload=None, videos=None, _configuration=None):  # noqa: E501
        """CustomizeFeatureSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account = None
        self._albums = None
        self._archive = None
        self._delete = None
        self._download = None
        self._edit = None
        self._estimates = None
        self._favorites = None
        self._files = None
        self._folders = None
        self.__import = None
        self._labels = None
        self._library = None
        self._logs = None
        self._moments = None
        self._people = None
        self._places = None
        self._private = None
        self._ratings = None
        self._reactions = None
        self._review = None
        self._search = None
        self._services = None
        self._settings = None
        self._share = None
        self._upload = None
        self._videos = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if albums is not None:
            self.albums = albums
        if archive is not None:
            self.archive = archive
        if delete is not None:
            self.delete = delete
        if download is not None:
            self.download = download
        if edit is not None:
            self.edit = edit
        if estimates is not None:
            self.estimates = estimates
        if favorites is not None:
            self.favorites = favorites
        if files is not None:
            self.files = files
        if folders is not None:
            self.folders = folders
        if _import is not None:
            self._import = _import
        if labels is not None:
            self.labels = labels
        if library is not None:
            self.library = library
        if logs is not None:
            self.logs = logs
        if moments is not None:
            self.moments = moments
        if people is not None:
            self.people = people
        if places is not None:
            self.places = places
        if private is not None:
            self.private = private
        if ratings is not None:
            self.ratings = ratings
        if reactions is not None:
            self.reactions = reactions
        if review is not None:
            self.review = review
        if search is not None:
            self.search = search
        if services is not None:
            self.services = services
        if settings is not None:
            self.settings = settings
        if share is not None:
            self.share = share
        if upload is not None:
            self.upload = upload
        if videos is not None:
            self.videos = videos

    @property
    def account(self):
        """Gets the account of this CustomizeFeatureSettings.  # noqa: E501


        :return: The account of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this CustomizeFeatureSettings.


        :param account: The account of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._account = account

    @property
    def albums(self):
        """Gets the albums of this CustomizeFeatureSettings.  # noqa: E501


        :return: The albums of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._albums

    @albums.setter
    def albums(self, albums):
        """Sets the albums of this CustomizeFeatureSettings.


        :param albums: The albums of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._albums = albums

    @property
    def archive(self):
        """Gets the archive of this CustomizeFeatureSettings.  # noqa: E501


        :return: The archive of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._archive

    @archive.setter
    def archive(self, archive):
        """Sets the archive of this CustomizeFeatureSettings.


        :param archive: The archive of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._archive = archive

    @property
    def delete(self):
        """Gets the delete of this CustomizeFeatureSettings.  # noqa: E501


        :return: The delete of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this CustomizeFeatureSettings.


        :param delete: The delete of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._delete = delete

    @property
    def download(self):
        """Gets the download of this CustomizeFeatureSettings.  # noqa: E501


        :return: The download of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this CustomizeFeatureSettings.


        :param download: The download of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._download = download

    @property
    def edit(self):
        """Gets the edit of this CustomizeFeatureSettings.  # noqa: E501


        :return: The edit of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._edit

    @edit.setter
    def edit(self, edit):
        """Sets the edit of this CustomizeFeatureSettings.


        :param edit: The edit of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._edit = edit

    @property
    def estimates(self):
        """Gets the estimates of this CustomizeFeatureSettings.  # noqa: E501


        :return: The estimates of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._estimates

    @estimates.setter
    def estimates(self, estimates):
        """Sets the estimates of this CustomizeFeatureSettings.


        :param estimates: The estimates of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._estimates = estimates

    @property
    def favorites(self):
        """Gets the favorites of this CustomizeFeatureSettings.  # noqa: E501


        :return: The favorites of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._favorites

    @favorites.setter
    def favorites(self, favorites):
        """Sets the favorites of this CustomizeFeatureSettings.


        :param favorites: The favorites of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._favorites = favorites

    @property
    def files(self):
        """Gets the files of this CustomizeFeatureSettings.  # noqa: E501


        :return: The files of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this CustomizeFeatureSettings.


        :param files: The files of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._files = files

    @property
    def folders(self):
        """Gets the folders of this CustomizeFeatureSettings.  # noqa: E501


        :return: The folders of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """Sets the folders of this CustomizeFeatureSettings.


        :param folders: The folders of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._folders = folders

    @property
    def _import(self):
        """Gets the _import of this CustomizeFeatureSettings.  # noqa: E501


        :return: The _import of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """Sets the _import of this CustomizeFeatureSettings.


        :param _import: The _import of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self.__import = _import

    @property
    def labels(self):
        """Gets the labels of this CustomizeFeatureSettings.  # noqa: E501


        :return: The labels of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CustomizeFeatureSettings.


        :param labels: The labels of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._labels = labels

    @property
    def library(self):
        """Gets the library of this CustomizeFeatureSettings.  # noqa: E501


        :return: The library of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._library

    @library.setter
    def library(self, library):
        """Sets the library of this CustomizeFeatureSettings.


        :param library: The library of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._library = library

    @property
    def logs(self):
        """Gets the logs of this CustomizeFeatureSettings.  # noqa: E501


        :return: The logs of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this CustomizeFeatureSettings.


        :param logs: The logs of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._logs = logs

    @property
    def moments(self):
        """Gets the moments of this CustomizeFeatureSettings.  # noqa: E501


        :return: The moments of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._moments

    @moments.setter
    def moments(self, moments):
        """Sets the moments of this CustomizeFeatureSettings.


        :param moments: The moments of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._moments = moments

    @property
    def people(self):
        """Gets the people of this CustomizeFeatureSettings.  # noqa: E501


        :return: The people of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._people

    @people.setter
    def people(self, people):
        """Sets the people of this CustomizeFeatureSettings.


        :param people: The people of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._people = people

    @property
    def places(self):
        """Gets the places of this CustomizeFeatureSettings.  # noqa: E501


        :return: The places of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._places

    @places.setter
    def places(self, places):
        """Sets the places of this CustomizeFeatureSettings.


        :param places: The places of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._places = places

    @property
    def private(self):
        """Gets the private of this CustomizeFeatureSettings.  # noqa: E501


        :return: The private of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this CustomizeFeatureSettings.


        :param private: The private of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._private = private

    @property
    def ratings(self):
        """Gets the ratings of this CustomizeFeatureSettings.  # noqa: E501


        :return: The ratings of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this CustomizeFeatureSettings.


        :param ratings: The ratings of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._ratings = ratings

    @property
    def reactions(self):
        """Gets the reactions of this CustomizeFeatureSettings.  # noqa: E501


        :return: The reactions of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this CustomizeFeatureSettings.


        :param reactions: The reactions of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._reactions = reactions

    @property
    def review(self):
        """Gets the review of this CustomizeFeatureSettings.  # noqa: E501


        :return: The review of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this CustomizeFeatureSettings.


        :param review: The review of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._review = review

    @property
    def search(self):
        """Gets the search of this CustomizeFeatureSettings.  # noqa: E501


        :return: The search of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this CustomizeFeatureSettings.


        :param search: The search of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._search = search

    @property
    def services(self):
        """Gets the services of this CustomizeFeatureSettings.  # noqa: E501


        :return: The services of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this CustomizeFeatureSettings.


        :param services: The services of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._services = services

    @property
    def settings(self):
        """Gets the settings of this CustomizeFeatureSettings.  # noqa: E501


        :return: The settings of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CustomizeFeatureSettings.


        :param settings: The settings of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._settings = settings

    @property
    def share(self):
        """Gets the share of this CustomizeFeatureSettings.  # noqa: E501


        :return: The share of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this CustomizeFeatureSettings.


        :param share: The share of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._share = share

    @property
    def upload(self):
        """Gets the upload of this CustomizeFeatureSettings.  # noqa: E501


        :return: The upload of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this CustomizeFeatureSettings.


        :param upload: The upload of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._upload = upload

    @property
    def videos(self):
        """Gets the videos of this CustomizeFeatureSettings.  # noqa: E501


        :return: The videos of this CustomizeFeatureSettings.  # noqa: E501
        :rtype: bool
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this CustomizeFeatureSettings.


        :param videos: The videos of this CustomizeFeatureSettings.  # noqa: E501
        :type: bool
        """

        self._videos = videos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomizeFeatureSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomizeFeatureSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomizeFeatureSettings):
            return True

        return self.to_dict() != other.to_dict()
