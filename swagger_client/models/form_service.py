# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FormService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acc_error': 'str',
        'acc_key': 'str',
        'acc_name': 'str',
        'acc_owner': 'str',
        'acc_pass': 'str',
        'acc_share': 'bool',
        'acc_sync': 'bool',
        'acc_timeout': 'str',
        'acc_type': 'str',
        'acc_url': 'str',
        'acc_user': 'str',
        'retry_limit': 'int',
        'share_expires': 'int',
        'share_path': 'str',
        'share_size': 'str',
        'sync_download': 'bool',
        'sync_filenames': 'bool',
        'sync_interval': 'int',
        'sync_path': 'str',
        'sync_raw': 'bool',
        'sync_upload': 'bool'
    }

    attribute_map = {
        'acc_error': 'AccError',
        'acc_key': 'AccKey',
        'acc_name': 'AccName',
        'acc_owner': 'AccOwner',
        'acc_pass': 'AccPass',
        'acc_share': 'AccShare',
        'acc_sync': 'AccSync',
        'acc_timeout': 'AccTimeout',
        'acc_type': 'AccType',
        'acc_url': 'AccURL',
        'acc_user': 'AccUser',
        'retry_limit': 'RetryLimit',
        'share_expires': 'ShareExpires',
        'share_path': 'SharePath',
        'share_size': 'ShareSize',
        'sync_download': 'SyncDownload',
        'sync_filenames': 'SyncFilenames',
        'sync_interval': 'SyncInterval',
        'sync_path': 'SyncPath',
        'sync_raw': 'SyncRaw',
        'sync_upload': 'SyncUpload'
    }

    def __init__(self, acc_error=None, acc_key=None, acc_name=None, acc_owner=None, acc_pass=None, acc_share=None, acc_sync=None, acc_timeout=None, acc_type=None, acc_url=None, acc_user=None, retry_limit=None, share_expires=None, share_path=None, share_size=None, sync_download=None, sync_filenames=None, sync_interval=None, sync_path=None, sync_raw=None, sync_upload=None, _configuration=None):  # noqa: E501
        """FormService - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._acc_error = None
        self._acc_key = None
        self._acc_name = None
        self._acc_owner = None
        self._acc_pass = None
        self._acc_share = None
        self._acc_sync = None
        self._acc_timeout = None
        self._acc_type = None
        self._acc_url = None
        self._acc_user = None
        self._retry_limit = None
        self._share_expires = None
        self._share_path = None
        self._share_size = None
        self._sync_download = None
        self._sync_filenames = None
        self._sync_interval = None
        self._sync_path = None
        self._sync_raw = None
        self._sync_upload = None
        self.discriminator = None

        if acc_error is not None:
            self.acc_error = acc_error
        if acc_key is not None:
            self.acc_key = acc_key
        if acc_name is not None:
            self.acc_name = acc_name
        if acc_owner is not None:
            self.acc_owner = acc_owner
        if acc_pass is not None:
            self.acc_pass = acc_pass
        if acc_share is not None:
            self.acc_share = acc_share
        if acc_sync is not None:
            self.acc_sync = acc_sync
        if acc_timeout is not None:
            self.acc_timeout = acc_timeout
        if acc_type is not None:
            self.acc_type = acc_type
        if acc_url is not None:
            self.acc_url = acc_url
        if acc_user is not None:
            self.acc_user = acc_user
        if retry_limit is not None:
            self.retry_limit = retry_limit
        if share_expires is not None:
            self.share_expires = share_expires
        if share_path is not None:
            self.share_path = share_path
        if share_size is not None:
            self.share_size = share_size
        if sync_download is not None:
            self.sync_download = sync_download
        if sync_filenames is not None:
            self.sync_filenames = sync_filenames
        if sync_interval is not None:
            self.sync_interval = sync_interval
        if sync_path is not None:
            self.sync_path = sync_path
        if sync_raw is not None:
            self.sync_raw = sync_raw
        if sync_upload is not None:
            self.sync_upload = sync_upload

    @property
    def acc_error(self):
        """Gets the acc_error of this FormService.  # noqa: E501


        :return: The acc_error of this FormService.  # noqa: E501
        :rtype: str
        """
        return self._acc_error

    @acc_error.setter
    def acc_error(self, acc_error):
        """Sets the acc_error of this FormService.


        :param acc_error: The acc_error of this FormService.  # noqa: E501
        :type: str
        """

        self._acc_error = acc_error

    @property
    def acc_key(self):
        """Gets the acc_key of this FormService.  # noqa: E501


        :return: The acc_key of this FormService.  # noqa: E501
        :rtype: str
        """
        return self._acc_key

    @acc_key.setter
    def acc_key(self, acc_key):
        """Sets the acc_key of this FormService.


        :param acc_key: The acc_key of this FormService.  # noqa: E501
        :type: str
        """

        self._acc_key = acc_key

    @property
    def acc_name(self):
        """Gets the acc_name of this FormService.  # noqa: E501


        :return: The acc_name of this FormService.  # noqa: E501
        :rtype: str
        """
        return self._acc_name

    @acc_name.setter
    def acc_name(self, acc_name):
        """Sets the acc_name of this FormService.


        :param acc_name: The acc_name of this FormService.  # noqa: E501
        :type: str
        """

        self._acc_name = acc_name

    @property
    def acc_owner(self):
        """Gets the acc_owner of this FormService.  # noqa: E501


        :return: The acc_owner of this FormService.  # noqa: E501
        :rtype: str
        """
        return self._acc_owner

    @acc_owner.setter
    def acc_owner(self, acc_owner):
        """Sets the acc_owner of this FormService.


        :param acc_owner: The acc_owner of this FormService.  # noqa: E501
        :type: str
        """

        self._acc_owner = acc_owner

    @property
    def acc_pass(self):
        """Gets the acc_pass of this FormService.  # noqa: E501


        :return: The acc_pass of this FormService.  # noqa: E501
        :rtype: str
        """
        return self._acc_pass

    @acc_pass.setter
    def acc_pass(self, acc_pass):
        """Sets the acc_pass of this FormService.


        :param acc_pass: The acc_pass of this FormService.  # noqa: E501
        :type: str
        """

        self._acc_pass = acc_pass

    @property
    def acc_share(self):
        """Gets the acc_share of this FormService.  # noqa: E501

        Manual upload enabled, see SharePath, ShareSize, and ShareExpires.  # noqa: E501

        :return: The acc_share of this FormService.  # noqa: E501
        :rtype: bool
        """
        return self._acc_share

    @acc_share.setter
    def acc_share(self, acc_share):
        """Sets the acc_share of this FormService.

        Manual upload enabled, see SharePath, ShareSize, and ShareExpires.  # noqa: E501

        :param acc_share: The acc_share of this FormService.  # noqa: E501
        :type: bool
        """

        self._acc_share = acc_share

    @property
    def acc_sync(self):
        """Gets the acc_sync of this FormService.  # noqa: E501

        Background sync enabled, see SyncDownload and SyncUpload.  # noqa: E501

        :return: The acc_sync of this FormService.  # noqa: E501
        :rtype: bool
        """
        return self._acc_sync

    @acc_sync.setter
    def acc_sync(self, acc_sync):
        """Sets the acc_sync of this FormService.

        Background sync enabled, see SyncDownload and SyncUpload.  # noqa: E501

        :param acc_sync: The acc_sync of this FormService.  # noqa: E501
        :type: bool
        """

        self._acc_sync = acc_sync

    @property
    def acc_timeout(self):
        """Gets the acc_timeout of this FormService.  # noqa: E501

        Request timeout: default, high, medium, low, none  # noqa: E501

        :return: The acc_timeout of this FormService.  # noqa: E501
        :rtype: str
        """
        return self._acc_timeout

    @acc_timeout.setter
    def acc_timeout(self, acc_timeout):
        """Sets the acc_timeout of this FormService.

        Request timeout: default, high, medium, low, none  # noqa: E501

        :param acc_timeout: The acc_timeout of this FormService.  # noqa: E501
        :type: str
        """

        self._acc_timeout = acc_timeout

    @property
    def acc_type(self):
        """Gets the acc_type of this FormService.  # noqa: E501


        :return: The acc_type of this FormService.  # noqa: E501
        :rtype: str
        """
        return self._acc_type

    @acc_type.setter
    def acc_type(self, acc_type):
        """Sets the acc_type of this FormService.


        :param acc_type: The acc_type of this FormService.  # noqa: E501
        :type: str
        """

        self._acc_type = acc_type

    @property
    def acc_url(self):
        """Gets the acc_url of this FormService.  # noqa: E501


        :return: The acc_url of this FormService.  # noqa: E501
        :rtype: str
        """
        return self._acc_url

    @acc_url.setter
    def acc_url(self, acc_url):
        """Sets the acc_url of this FormService.


        :param acc_url: The acc_url of this FormService.  # noqa: E501
        :type: str
        """

        self._acc_url = acc_url

    @property
    def acc_user(self):
        """Gets the acc_user of this FormService.  # noqa: E501


        :return: The acc_user of this FormService.  # noqa: E501
        :rtype: str
        """
        return self._acc_user

    @acc_user.setter
    def acc_user(self, acc_user):
        """Sets the acc_user of this FormService.


        :param acc_user: The acc_user of this FormService.  # noqa: E501
        :type: str
        """

        self._acc_user = acc_user

    @property
    def retry_limit(self):
        """Gets the retry_limit of this FormService.  # noqa: E501

        Maximum number of failed requests.  # noqa: E501

        :return: The retry_limit of this FormService.  # noqa: E501
        :rtype: int
        """
        return self._retry_limit

    @retry_limit.setter
    def retry_limit(self, retry_limit):
        """Sets the retry_limit of this FormService.

        Maximum number of failed requests.  # noqa: E501

        :param retry_limit: The retry_limit of this FormService.  # noqa: E501
        :type: int
        """

        self._retry_limit = retry_limit

    @property
    def share_expires(self):
        """Gets the share_expires of this FormService.  # noqa: E501


        :return: The share_expires of this FormService.  # noqa: E501
        :rtype: int
        """
        return self._share_expires

    @share_expires.setter
    def share_expires(self, share_expires):
        """Sets the share_expires of this FormService.


        :param share_expires: The share_expires of this FormService.  # noqa: E501
        :type: int
        """

        self._share_expires = share_expires

    @property
    def share_path(self):
        """Gets the share_path of this FormService.  # noqa: E501


        :return: The share_path of this FormService.  # noqa: E501
        :rtype: str
        """
        return self._share_path

    @share_path.setter
    def share_path(self, share_path):
        """Sets the share_path of this FormService.


        :param share_path: The share_path of this FormService.  # noqa: E501
        :type: str
        """

        self._share_path = share_path

    @property
    def share_size(self):
        """Gets the share_size of this FormService.  # noqa: E501


        :return: The share_size of this FormService.  # noqa: E501
        :rtype: str
        """
        return self._share_size

    @share_size.setter
    def share_size(self, share_size):
        """Sets the share_size of this FormService.


        :param share_size: The share_size of this FormService.  # noqa: E501
        :type: str
        """

        self._share_size = share_size

    @property
    def sync_download(self):
        """Gets the sync_download of this FormService.  # noqa: E501


        :return: The sync_download of this FormService.  # noqa: E501
        :rtype: bool
        """
        return self._sync_download

    @sync_download.setter
    def sync_download(self, sync_download):
        """Sets the sync_download of this FormService.


        :param sync_download: The sync_download of this FormService.  # noqa: E501
        :type: bool
        """

        self._sync_download = sync_download

    @property
    def sync_filenames(self):
        """Gets the sync_filenames of this FormService.  # noqa: E501


        :return: The sync_filenames of this FormService.  # noqa: E501
        :rtype: bool
        """
        return self._sync_filenames

    @sync_filenames.setter
    def sync_filenames(self, sync_filenames):
        """Sets the sync_filenames of this FormService.


        :param sync_filenames: The sync_filenames of this FormService.  # noqa: E501
        :type: bool
        """

        self._sync_filenames = sync_filenames

    @property
    def sync_interval(self):
        """Gets the sync_interval of this FormService.  # noqa: E501


        :return: The sync_interval of this FormService.  # noqa: E501
        :rtype: int
        """
        return self._sync_interval

    @sync_interval.setter
    def sync_interval(self, sync_interval):
        """Sets the sync_interval of this FormService.


        :param sync_interval: The sync_interval of this FormService.  # noqa: E501
        :type: int
        """

        self._sync_interval = sync_interval

    @property
    def sync_path(self):
        """Gets the sync_path of this FormService.  # noqa: E501


        :return: The sync_path of this FormService.  # noqa: E501
        :rtype: str
        """
        return self._sync_path

    @sync_path.setter
    def sync_path(self, sync_path):
        """Sets the sync_path of this FormService.


        :param sync_path: The sync_path of this FormService.  # noqa: E501
        :type: str
        """

        self._sync_path = sync_path

    @property
    def sync_raw(self):
        """Gets the sync_raw of this FormService.  # noqa: E501


        :return: The sync_raw of this FormService.  # noqa: E501
        :rtype: bool
        """
        return self._sync_raw

    @sync_raw.setter
    def sync_raw(self, sync_raw):
        """Sets the sync_raw of this FormService.


        :param sync_raw: The sync_raw of this FormService.  # noqa: E501
        :type: bool
        """

        self._sync_raw = sync_raw

    @property
    def sync_upload(self):
        """Gets the sync_upload of this FormService.  # noqa: E501


        :return: The sync_upload of this FormService.  # noqa: E501
        :rtype: bool
        """
        return self._sync_upload

    @sync_upload.setter
    def sync_upload(self, sync_upload):
        """Sets the sync_upload of this FormService.


        :param sync_upload: The sync_upload of this FormService.  # noqa: E501
        :type: bool
        """

        self._sync_upload = sync_upload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FormService):
            return True

        return self.to_dict() != other.to_dict()
