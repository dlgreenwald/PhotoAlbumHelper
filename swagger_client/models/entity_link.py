# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EntityLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'created_at': 'str',
        'created_by': 'str',
        'expires': 'int',
        'max_views': 'int',
        'modified_at': 'str',
        'perm': 'int',
        'share_uid': 'str',
        'slug': 'str',
        'token': 'str',
        'uid': 'str',
        'verify_password': 'bool',
        'views': 'int'
    }

    attribute_map = {
        'comment': 'Comment',
        'created_at': 'CreatedAt',
        'created_by': 'CreatedBy',
        'expires': 'Expires',
        'max_views': 'MaxViews',
        'modified_at': 'ModifiedAt',
        'perm': 'Perm',
        'share_uid': 'ShareUID',
        'slug': 'Slug',
        'token': 'Token',
        'uid': 'UID',
        'verify_password': 'VerifyPassword',
        'views': 'Views'
    }

    def __init__(self, comment=None, created_at=None, created_by=None, expires=None, max_views=None, modified_at=None, perm=None, share_uid=None, slug=None, token=None, uid=None, verify_password=None, views=None, _configuration=None):  # noqa: E501
        """EntityLink - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._comment = None
        self._created_at = None
        self._created_by = None
        self._expires = None
        self._max_views = None
        self._modified_at = None
        self._perm = None
        self._share_uid = None
        self._slug = None
        self._token = None
        self._uid = None
        self._verify_password = None
        self._views = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if expires is not None:
            self.expires = expires
        if max_views is not None:
            self.max_views = max_views
        if modified_at is not None:
            self.modified_at = modified_at
        if perm is not None:
            self.perm = perm
        if share_uid is not None:
            self.share_uid = share_uid
        if slug is not None:
            self.slug = slug
        if token is not None:
            self.token = token
        if uid is not None:
            self.uid = uid
        if verify_password is not None:
            self.verify_password = verify_password
        if views is not None:
            self.views = views

    @property
    def comment(self):
        """Gets the comment of this EntityLink.  # noqa: E501


        :return: The comment of this EntityLink.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EntityLink.


        :param comment: The comment of this EntityLink.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this EntityLink.  # noqa: E501


        :return: The created_at of this EntityLink.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EntityLink.


        :param created_at: The created_at of this EntityLink.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this EntityLink.  # noqa: E501


        :return: The created_by of this EntityLink.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this EntityLink.


        :param created_by: The created_by of this EntityLink.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def expires(self):
        """Gets the expires of this EntityLink.  # noqa: E501


        :return: The expires of this EntityLink.  # noqa: E501
        :rtype: int
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this EntityLink.


        :param expires: The expires of this EntityLink.  # noqa: E501
        :type: int
        """

        self._expires = expires

    @property
    def max_views(self):
        """Gets the max_views of this EntityLink.  # noqa: E501


        :return: The max_views of this EntityLink.  # noqa: E501
        :rtype: int
        """
        return self._max_views

    @max_views.setter
    def max_views(self, max_views):
        """Sets the max_views of this EntityLink.


        :param max_views: The max_views of this EntityLink.  # noqa: E501
        :type: int
        """

        self._max_views = max_views

    @property
    def modified_at(self):
        """Gets the modified_at of this EntityLink.  # noqa: E501


        :return: The modified_at of this EntityLink.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this EntityLink.


        :param modified_at: The modified_at of this EntityLink.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    @property
    def perm(self):
        """Gets the perm of this EntityLink.  # noqa: E501


        :return: The perm of this EntityLink.  # noqa: E501
        :rtype: int
        """
        return self._perm

    @perm.setter
    def perm(self, perm):
        """Sets the perm of this EntityLink.


        :param perm: The perm of this EntityLink.  # noqa: E501
        :type: int
        """

        self._perm = perm

    @property
    def share_uid(self):
        """Gets the share_uid of this EntityLink.  # noqa: E501


        :return: The share_uid of this EntityLink.  # noqa: E501
        :rtype: str
        """
        return self._share_uid

    @share_uid.setter
    def share_uid(self, share_uid):
        """Sets the share_uid of this EntityLink.


        :param share_uid: The share_uid of this EntityLink.  # noqa: E501
        :type: str
        """

        self._share_uid = share_uid

    @property
    def slug(self):
        """Gets the slug of this EntityLink.  # noqa: E501


        :return: The slug of this EntityLink.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this EntityLink.


        :param slug: The slug of this EntityLink.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def token(self):
        """Gets the token of this EntityLink.  # noqa: E501


        :return: The token of this EntityLink.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this EntityLink.


        :param token: The token of this EntityLink.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid(self):
        """Gets the uid of this EntityLink.  # noqa: E501


        :return: The uid of this EntityLink.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this EntityLink.


        :param uid: The uid of this EntityLink.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def verify_password(self):
        """Gets the verify_password of this EntityLink.  # noqa: E501


        :return: The verify_password of this EntityLink.  # noqa: E501
        :rtype: bool
        """
        return self._verify_password

    @verify_password.setter
    def verify_password(self, verify_password):
        """Sets the verify_password of this EntityLink.


        :param verify_password: The verify_password of this EntityLink.  # noqa: E501
        :type: bool
        """

        self._verify_password = verify_password

    @property
    def views(self):
        """Gets the views of this EntityLink.  # noqa: E501


        :return: The views of this EntityLink.  # noqa: E501
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this EntityLink.


        :param views: The views of this EntityLink.  # noqa: E501
        :type: int
        """

        self._views = views

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityLink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntityLink):
            return True

        return self.to_dict() != other.to_dict()
