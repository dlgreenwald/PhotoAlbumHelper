# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EntityMarker(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'face_dist': 'float',
        'face_id': 'str',
        'file_uid': 'str',
        'h': 'float',
        'invalid': 'bool',
        'matched_at': 'str',
        'name': 'str',
        'q': 'int',
        'review': 'bool',
        'score': 'int',
        'size': 'int',
        'src': 'str',
        'subj_src': 'str',
        'subj_uid': 'str',
        'thumb': 'str',
        'type': 'str',
        'uid': 'str',
        'w': 'float',
        'x': 'float',
        'y': 'float',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'face_dist': 'FaceDist',
        'face_id': 'FaceID',
        'file_uid': 'FileUID',
        'h': 'H',
        'invalid': 'Invalid',
        'matched_at': 'MatchedAt',
        'name': 'Name',
        'q': 'Q',
        'review': 'Review',
        'score': 'Score',
        'size': 'Size',
        'src': 'Src',
        'subj_src': 'SubjSrc',
        'subj_uid': 'SubjUID',
        'thumb': 'Thumb',
        'type': 'Type',
        'uid': 'UID',
        'w': 'W',
        'x': 'X',
        'y': 'Y',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, face_dist=None, face_id=None, file_uid=None, h=None, invalid=None, matched_at=None, name=None, q=None, review=None, score=None, size=None, src=None, subj_src=None, subj_uid=None, thumb=None, type=None, uid=None, w=None, x=None, y=None, created_at=None, updated_at=None, _configuration=None):  # noqa: E501
        """EntityMarker - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._face_dist = None
        self._face_id = None
        self._file_uid = None
        self._h = None
        self._invalid = None
        self._matched_at = None
        self._name = None
        self._q = None
        self._review = None
        self._score = None
        self._size = None
        self._src = None
        self._subj_src = None
        self._subj_uid = None
        self._thumb = None
        self._type = None
        self._uid = None
        self._w = None
        self._x = None
        self._y = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if face_dist is not None:
            self.face_dist = face_dist
        if face_id is not None:
            self.face_id = face_id
        if file_uid is not None:
            self.file_uid = file_uid
        if h is not None:
            self.h = h
        if invalid is not None:
            self.invalid = invalid
        if matched_at is not None:
            self.matched_at = matched_at
        if name is not None:
            self.name = name
        if q is not None:
            self.q = q
        if review is not None:
            self.review = review
        if score is not None:
            self.score = score
        if size is not None:
            self.size = size
        if src is not None:
            self.src = src
        if subj_src is not None:
            self.subj_src = subj_src
        if subj_uid is not None:
            self.subj_uid = subj_uid
        if thumb is not None:
            self.thumb = thumb
        if type is not None:
            self.type = type
        if uid is not None:
            self.uid = uid
        if w is not None:
            self.w = w
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def face_dist(self):
        """Gets the face_dist of this EntityMarker.  # noqa: E501


        :return: The face_dist of this EntityMarker.  # noqa: E501
        :rtype: float
        """
        return self._face_dist

    @face_dist.setter
    def face_dist(self, face_dist):
        """Sets the face_dist of this EntityMarker.


        :param face_dist: The face_dist of this EntityMarker.  # noqa: E501
        :type: float
        """

        self._face_dist = face_dist

    @property
    def face_id(self):
        """Gets the face_id of this EntityMarker.  # noqa: E501


        :return: The face_id of this EntityMarker.  # noqa: E501
        :rtype: str
        """
        return self._face_id

    @face_id.setter
    def face_id(self, face_id):
        """Sets the face_id of this EntityMarker.


        :param face_id: The face_id of this EntityMarker.  # noqa: E501
        :type: str
        """

        self._face_id = face_id

    @property
    def file_uid(self):
        """Gets the file_uid of this EntityMarker.  # noqa: E501


        :return: The file_uid of this EntityMarker.  # noqa: E501
        :rtype: str
        """
        return self._file_uid

    @file_uid.setter
    def file_uid(self, file_uid):
        """Sets the file_uid of this EntityMarker.


        :param file_uid: The file_uid of this EntityMarker.  # noqa: E501
        :type: str
        """

        self._file_uid = file_uid

    @property
    def h(self):
        """Gets the h of this EntityMarker.  # noqa: E501


        :return: The h of this EntityMarker.  # noqa: E501
        :rtype: float
        """
        return self._h

    @h.setter
    def h(self, h):
        """Sets the h of this EntityMarker.


        :param h: The h of this EntityMarker.  # noqa: E501
        :type: float
        """

        self._h = h

    @property
    def invalid(self):
        """Gets the invalid of this EntityMarker.  # noqa: E501


        :return: The invalid of this EntityMarker.  # noqa: E501
        :rtype: bool
        """
        return self._invalid

    @invalid.setter
    def invalid(self, invalid):
        """Sets the invalid of this EntityMarker.


        :param invalid: The invalid of this EntityMarker.  # noqa: E501
        :type: bool
        """

        self._invalid = invalid

    @property
    def matched_at(self):
        """Gets the matched_at of this EntityMarker.  # noqa: E501


        :return: The matched_at of this EntityMarker.  # noqa: E501
        :rtype: str
        """
        return self._matched_at

    @matched_at.setter
    def matched_at(self, matched_at):
        """Sets the matched_at of this EntityMarker.


        :param matched_at: The matched_at of this EntityMarker.  # noqa: E501
        :type: str
        """

        self._matched_at = matched_at

    @property
    def name(self):
        """Gets the name of this EntityMarker.  # noqa: E501


        :return: The name of this EntityMarker.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntityMarker.


        :param name: The name of this EntityMarker.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def q(self):
        """Gets the q of this EntityMarker.  # noqa: E501


        :return: The q of this EntityMarker.  # noqa: E501
        :rtype: int
        """
        return self._q

    @q.setter
    def q(self, q):
        """Sets the q of this EntityMarker.


        :param q: The q of this EntityMarker.  # noqa: E501
        :type: int
        """

        self._q = q

    @property
    def review(self):
        """Gets the review of this EntityMarker.  # noqa: E501


        :return: The review of this EntityMarker.  # noqa: E501
        :rtype: bool
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this EntityMarker.


        :param review: The review of this EntityMarker.  # noqa: E501
        :type: bool
        """

        self._review = review

    @property
    def score(self):
        """Gets the score of this EntityMarker.  # noqa: E501


        :return: The score of this EntityMarker.  # noqa: E501
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this EntityMarker.


        :param score: The score of this EntityMarker.  # noqa: E501
        :type: int
        """

        self._score = score

    @property
    def size(self):
        """Gets the size of this EntityMarker.  # noqa: E501


        :return: The size of this EntityMarker.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this EntityMarker.


        :param size: The size of this EntityMarker.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def src(self):
        """Gets the src of this EntityMarker.  # noqa: E501


        :return: The src of this EntityMarker.  # noqa: E501
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this EntityMarker.


        :param src: The src of this EntityMarker.  # noqa: E501
        :type: str
        """

        self._src = src

    @property
    def subj_src(self):
        """Gets the subj_src of this EntityMarker.  # noqa: E501


        :return: The subj_src of this EntityMarker.  # noqa: E501
        :rtype: str
        """
        return self._subj_src

    @subj_src.setter
    def subj_src(self, subj_src):
        """Sets the subj_src of this EntityMarker.


        :param subj_src: The subj_src of this EntityMarker.  # noqa: E501
        :type: str
        """

        self._subj_src = subj_src

    @property
    def subj_uid(self):
        """Gets the subj_uid of this EntityMarker.  # noqa: E501


        :return: The subj_uid of this EntityMarker.  # noqa: E501
        :rtype: str
        """
        return self._subj_uid

    @subj_uid.setter
    def subj_uid(self, subj_uid):
        """Sets the subj_uid of this EntityMarker.


        :param subj_uid: The subj_uid of this EntityMarker.  # noqa: E501
        :type: str
        """

        self._subj_uid = subj_uid

    @property
    def thumb(self):
        """Gets the thumb of this EntityMarker.  # noqa: E501


        :return: The thumb of this EntityMarker.  # noqa: E501
        :rtype: str
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this EntityMarker.


        :param thumb: The thumb of this EntityMarker.  # noqa: E501
        :type: str
        """

        self._thumb = thumb

    @property
    def type(self):
        """Gets the type of this EntityMarker.  # noqa: E501


        :return: The type of this EntityMarker.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EntityMarker.


        :param type: The type of this EntityMarker.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this EntityMarker.  # noqa: E501


        :return: The uid of this EntityMarker.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this EntityMarker.


        :param uid: The uid of this EntityMarker.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def w(self):
        """Gets the w of this EntityMarker.  # noqa: E501


        :return: The w of this EntityMarker.  # noqa: E501
        :rtype: float
        """
        return self._w

    @w.setter
    def w(self, w):
        """Sets the w of this EntityMarker.


        :param w: The w of this EntityMarker.  # noqa: E501
        :type: float
        """

        self._w = w

    @property
    def x(self):
        """Gets the x of this EntityMarker.  # noqa: E501


        :return: The x of this EntityMarker.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this EntityMarker.


        :param x: The x of this EntityMarker.  # noqa: E501
        :type: float
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this EntityMarker.  # noqa: E501


        :return: The y of this EntityMarker.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this EntityMarker.


        :param y: The y of this EntityMarker.  # noqa: E501
        :type: float
        """

        self._y = y

    @property
    def created_at(self):
        """Gets the created_at of this EntityMarker.  # noqa: E501


        :return: The created_at of this EntityMarker.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EntityMarker.


        :param created_at: The created_at of this EntityMarker.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this EntityMarker.  # noqa: E501


        :return: The updated_at of this EntityMarker.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EntityMarker.


        :param updated_at: The updated_at of this EntityMarker.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityMarker, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityMarker):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntityMarker):
            return True

        return self.to_dict() != other.to_dict()
