# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EntitySettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index_path': 'str',
        'index_rescan': 'int',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'index_path': 'IndexPath',
        'index_rescan': 'IndexRescan',
        'created_at': 'CreatedAt',
        'updated_at': 'UpdatedAt'
    }

    def __init__(self, index_path=None, index_rescan=None, created_at=None, updated_at=None, _configuration=None):  # noqa: E501
        """EntitySettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._index_path = None
        self._index_rescan = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if index_path is not None:
            self.index_path = index_path
        if index_rescan is not None:
            self.index_rescan = index_rescan
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def index_path(self):
        """Gets the index_path of this EntitySettings.  # noqa: E501


        :return: The index_path of this EntitySettings.  # noqa: E501
        :rtype: str
        """
        return self._index_path

    @index_path.setter
    def index_path(self, index_path):
        """Sets the index_path of this EntitySettings.


        :param index_path: The index_path of this EntitySettings.  # noqa: E501
        :type: str
        """

        self._index_path = index_path

    @property
    def index_rescan(self):
        """Gets the index_rescan of this EntitySettings.  # noqa: E501


        :return: The index_rescan of this EntitySettings.  # noqa: E501
        :rtype: int
        """
        return self._index_rescan

    @index_rescan.setter
    def index_rescan(self, index_rescan):
        """Sets the index_rescan of this EntitySettings.


        :param index_rescan: The index_rescan of this EntitySettings.  # noqa: E501
        :type: int
        """

        self._index_rescan = index_rescan

    @property
    def created_at(self):
        """Gets the created_at of this EntitySettings.  # noqa: E501


        :return: The created_at of this EntitySettings.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EntitySettings.


        :param created_at: The created_at of this EntitySettings.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this EntitySettings.  # noqa: E501


        :return: The updated_at of this EntitySettings.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EntitySettings.


        :param updated_at: The updated_at of this EntitySettings.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntitySettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntitySettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntitySettings):
            return True

        return self.to_dict() != other.to_dict()
