# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SearchPhoto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'altitude': 'int',
        'camera_id': 'int',
        'camera_make': 'str',
        'camera_model': 'str',
        'camera_serial': 'str',
        'camera_src': 'str',
        'cell_accuracy': 'int',
        'cell_id': 'str',
        'checked_at': 'str',
        'color': 'int',
        'country': 'str',
        'created_at': 'str',
        'day': 'int',
        'deleted_at': 'str',
        'description': 'str',
        'document_id': 'str',
        'duration': 'TimeDuration',
        'edited_at': 'str',
        'exposure': 'str',
        'f_number': 'float',
        'faces': 'int',
        'favorite': 'bool',
        'file_name': 'str',
        'file_root': 'str',
        'file_uid': 'str',
        'files': 'list[EntityFile]',
        'focal_length': 'int',
        'hash': 'str',
        'height': 'int',
        'id': 'str',
        'instance_id': 'str',
        'iso': 'int',
        'lat': 'float',
        'lens_id': 'int',
        'lens_make': 'str',
        'lens_model': 'str',
        'lng': 'float',
        'merged': 'bool',
        'month': 'int',
        'name': 'str',
        'original_name': 'str',
        'panorama': 'bool',
        'path': 'str',
        'place_city': 'str',
        'place_country': 'str',
        'place_id': 'str',
        'place_label': 'str',
        'place_src': 'str',
        'place_state': 'str',
        'portrait': 'bool',
        'private': 'bool',
        'quality': 'int',
        'resolution': 'int',
        'scan': 'bool',
        'stack': 'int',
        'taken_at': 'str',
        'taken_at_local': 'str',
        'taken_src': 'str',
        'time_zone': 'str',
        'title': 'str',
        'type': 'str',
        'type_src': 'str',
        'uid': 'str',
        'updated_at': 'str',
        'width': 'int',
        'year': 'int'
    }

    attribute_map = {
        'altitude': 'Altitude',
        'camera_id': 'CameraID',
        'camera_make': 'CameraMake',
        'camera_model': 'CameraModel',
        'camera_serial': 'CameraSerial',
        'camera_src': 'CameraSrc',
        'cell_accuracy': 'CellAccuracy',
        'cell_id': 'CellID',
        'checked_at': 'CheckedAt',
        'color': 'Color',
        'country': 'Country',
        'created_at': 'CreatedAt',
        'day': 'Day',
        'deleted_at': 'DeletedAt',
        'description': 'Description',
        'document_id': 'DocumentID',
        'duration': 'Duration',
        'edited_at': 'EditedAt',
        'exposure': 'Exposure',
        'f_number': 'FNumber',
        'faces': 'Faces',
        'favorite': 'Favorite',
        'file_name': 'FileName',
        'file_root': 'FileRoot',
        'file_uid': 'FileUID',
        'files': 'Files',
        'focal_length': 'FocalLength',
        'hash': 'Hash',
        'height': 'Height',
        'id': 'ID',
        'instance_id': 'InstanceID',
        'iso': 'Iso',
        'lat': 'Lat',
        'lens_id': 'LensID',
        'lens_make': 'LensMake',
        'lens_model': 'LensModel',
        'lng': 'Lng',
        'merged': 'Merged',
        'month': 'Month',
        'name': 'Name',
        'original_name': 'OriginalName',
        'panorama': 'Panorama',
        'path': 'Path',
        'place_city': 'PlaceCity',
        'place_country': 'PlaceCountry',
        'place_id': 'PlaceID',
        'place_label': 'PlaceLabel',
        'place_src': 'PlaceSrc',
        'place_state': 'PlaceState',
        'portrait': 'Portrait',
        'private': 'Private',
        'quality': 'Quality',
        'resolution': 'Resolution',
        'scan': 'Scan',
        'stack': 'Stack',
        'taken_at': 'TakenAt',
        'taken_at_local': 'TakenAtLocal',
        'taken_src': 'TakenSrc',
        'time_zone': 'TimeZone',
        'title': 'Title',
        'type': 'Type',
        'type_src': 'TypeSrc',
        'uid': 'UID',
        'updated_at': 'UpdatedAt',
        'width': 'Width',
        'year': 'Year'
    }

    def __init__(self, altitude=None, camera_id=None, camera_make=None, camera_model=None, camera_serial=None, camera_src=None, cell_accuracy=None, cell_id=None, checked_at=None, color=None, country=None, created_at=None, day=None, deleted_at=None, description=None, document_id=None, duration=None, edited_at=None, exposure=None, f_number=None, faces=None, favorite=None, file_name=None, file_root=None, file_uid=None, files=None, focal_length=None, hash=None, height=None, id=None, instance_id=None, iso=None, lat=None, lens_id=None, lens_make=None, lens_model=None, lng=None, merged=None, month=None, name=None, original_name=None, panorama=None, path=None, place_city=None, place_country=None, place_id=None, place_label=None, place_src=None, place_state=None, portrait=None, private=None, quality=None, resolution=None, scan=None, stack=None, taken_at=None, taken_at_local=None, taken_src=None, time_zone=None, title=None, type=None, type_src=None, uid=None, updated_at=None, width=None, year=None, _configuration=None):  # noqa: E501
        """SearchPhoto - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._altitude = None
        self._camera_id = None
        self._camera_make = None
        self._camera_model = None
        self._camera_serial = None
        self._camera_src = None
        self._cell_accuracy = None
        self._cell_id = None
        self._checked_at = None
        self._color = None
        self._country = None
        self._created_at = None
        self._day = None
        self._deleted_at = None
        self._description = None
        self._document_id = None
        self._duration = None
        self._edited_at = None
        self._exposure = None
        self._f_number = None
        self._faces = None
        self._favorite = None
        self._file_name = None
        self._file_root = None
        self._file_uid = None
        self._files = None
        self._focal_length = None
        self._hash = None
        self._height = None
        self._id = None
        self._instance_id = None
        self._iso = None
        self._lat = None
        self._lens_id = None
        self._lens_make = None
        self._lens_model = None
        self._lng = None
        self._merged = None
        self._month = None
        self._name = None
        self._original_name = None
        self._panorama = None
        self._path = None
        self._place_city = None
        self._place_country = None
        self._place_id = None
        self._place_label = None
        self._place_src = None
        self._place_state = None
        self._portrait = None
        self._private = None
        self._quality = None
        self._resolution = None
        self._scan = None
        self._stack = None
        self._taken_at = None
        self._taken_at_local = None
        self._taken_src = None
        self._time_zone = None
        self._title = None
        self._type = None
        self._type_src = None
        self._uid = None
        self._updated_at = None
        self._width = None
        self._year = None
        self.discriminator = None

        if altitude is not None:
            self.altitude = altitude
        if camera_id is not None:
            self.camera_id = camera_id
        if camera_make is not None:
            self.camera_make = camera_make
        if camera_model is not None:
            self.camera_model = camera_model
        if camera_serial is not None:
            self.camera_serial = camera_serial
        if camera_src is not None:
            self.camera_src = camera_src
        if cell_accuracy is not None:
            self.cell_accuracy = cell_accuracy
        if cell_id is not None:
            self.cell_id = cell_id
        if checked_at is not None:
            self.checked_at = checked_at
        if color is not None:
            self.color = color
        if country is not None:
            self.country = country
        if created_at is not None:
            self.created_at = created_at
        if day is not None:
            self.day = day
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if description is not None:
            self.description = description
        if document_id is not None:
            self.document_id = document_id
        if duration is not None:
            self.duration = duration
        if edited_at is not None:
            self.edited_at = edited_at
        if exposure is not None:
            self.exposure = exposure
        if f_number is not None:
            self.f_number = f_number
        if faces is not None:
            self.faces = faces
        if favorite is not None:
            self.favorite = favorite
        if file_name is not None:
            self.file_name = file_name
        if file_root is not None:
            self.file_root = file_root
        if file_uid is not None:
            self.file_uid = file_uid
        if files is not None:
            self.files = files
        if focal_length is not None:
            self.focal_length = focal_length
        if hash is not None:
            self.hash = hash
        if height is not None:
            self.height = height
        if id is not None:
            self.id = id
        if instance_id is not None:
            self.instance_id = instance_id
        if iso is not None:
            self.iso = iso
        if lat is not None:
            self.lat = lat
        if lens_id is not None:
            self.lens_id = lens_id
        if lens_make is not None:
            self.lens_make = lens_make
        if lens_model is not None:
            self.lens_model = lens_model
        if lng is not None:
            self.lng = lng
        if merged is not None:
            self.merged = merged
        if month is not None:
            self.month = month
        if name is not None:
            self.name = name
        if original_name is not None:
            self.original_name = original_name
        if panorama is not None:
            self.panorama = panorama
        if path is not None:
            self.path = path
        if place_city is not None:
            self.place_city = place_city
        if place_country is not None:
            self.place_country = place_country
        if place_id is not None:
            self.place_id = place_id
        if place_label is not None:
            self.place_label = place_label
        if place_src is not None:
            self.place_src = place_src
        if place_state is not None:
            self.place_state = place_state
        if portrait is not None:
            self.portrait = portrait
        if private is not None:
            self.private = private
        if quality is not None:
            self.quality = quality
        if resolution is not None:
            self.resolution = resolution
        if scan is not None:
            self.scan = scan
        if stack is not None:
            self.stack = stack
        if taken_at is not None:
            self.taken_at = taken_at
        if taken_at_local is not None:
            self.taken_at_local = taken_at_local
        if taken_src is not None:
            self.taken_src = taken_src
        if time_zone is not None:
            self.time_zone = time_zone
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if type_src is not None:
            self.type_src = type_src
        if uid is not None:
            self.uid = uid
        if updated_at is not None:
            self.updated_at = updated_at
        if width is not None:
            self.width = width
        if year is not None:
            self.year = year

    @property
    def altitude(self):
        """Gets the altitude of this SearchPhoto.  # noqa: E501


        :return: The altitude of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this SearchPhoto.


        :param altitude: The altitude of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._altitude = altitude

    @property
    def camera_id(self):
        """Gets the camera_id of this SearchPhoto.  # noqa: E501

        Camera  # noqa: E501

        :return: The camera_id of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._camera_id

    @camera_id.setter
    def camera_id(self, camera_id):
        """Sets the camera_id of this SearchPhoto.

        Camera  # noqa: E501

        :param camera_id: The camera_id of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._camera_id = camera_id

    @property
    def camera_make(self):
        """Gets the camera_make of this SearchPhoto.  # noqa: E501


        :return: The camera_make of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._camera_make

    @camera_make.setter
    def camera_make(self, camera_make):
        """Sets the camera_make of this SearchPhoto.


        :param camera_make: The camera_make of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._camera_make = camera_make

    @property
    def camera_model(self):
        """Gets the camera_model of this SearchPhoto.  # noqa: E501


        :return: The camera_model of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._camera_model

    @camera_model.setter
    def camera_model(self, camera_model):
        """Sets the camera_model of this SearchPhoto.


        :param camera_model: The camera_model of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._camera_model = camera_model

    @property
    def camera_serial(self):
        """Gets the camera_serial of this SearchPhoto.  # noqa: E501


        :return: The camera_serial of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._camera_serial

    @camera_serial.setter
    def camera_serial(self, camera_serial):
        """Sets the camera_serial of this SearchPhoto.


        :param camera_serial: The camera_serial of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._camera_serial = camera_serial

    @property
    def camera_src(self):
        """Gets the camera_src of this SearchPhoto.  # noqa: E501


        :return: The camera_src of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._camera_src

    @camera_src.setter
    def camera_src(self, camera_src):
        """Sets the camera_src of this SearchPhoto.


        :param camera_src: The camera_src of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._camera_src = camera_src

    @property
    def cell_accuracy(self):
        """Gets the cell_accuracy of this SearchPhoto.  # noqa: E501


        :return: The cell_accuracy of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._cell_accuracy

    @cell_accuracy.setter
    def cell_accuracy(self, cell_accuracy):
        """Sets the cell_accuracy of this SearchPhoto.


        :param cell_accuracy: The cell_accuracy of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._cell_accuracy = cell_accuracy

    @property
    def cell_id(self):
        """Gets the cell_id of this SearchPhoto.  # noqa: E501

        Cell  # noqa: E501

        :return: The cell_id of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._cell_id

    @cell_id.setter
    def cell_id(self, cell_id):
        """Sets the cell_id of this SearchPhoto.

        Cell  # noqa: E501

        :param cell_id: The cell_id of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._cell_id = cell_id

    @property
    def checked_at(self):
        """Gets the checked_at of this SearchPhoto.  # noqa: E501


        :return: The checked_at of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._checked_at

    @checked_at.setter
    def checked_at(self, checked_at):
        """Sets the checked_at of this SearchPhoto.


        :param checked_at: The checked_at of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._checked_at = checked_at

    @property
    def color(self):
        """Gets the color of this SearchPhoto.  # noqa: E501


        :return: The color of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this SearchPhoto.


        :param color: The color of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._color = color

    @property
    def country(self):
        """Gets the country of this SearchPhoto.  # noqa: E501


        :return: The country of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SearchPhoto.


        :param country: The country of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def created_at(self):
        """Gets the created_at of this SearchPhoto.  # noqa: E501


        :return: The created_at of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SearchPhoto.


        :param created_at: The created_at of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def day(self):
        """Gets the day of this SearchPhoto.  # noqa: E501


        :return: The day of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this SearchPhoto.


        :param day: The day of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._day = day

    @property
    def deleted_at(self):
        """Gets the deleted_at of this SearchPhoto.  # noqa: E501


        :return: The deleted_at of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this SearchPhoto.


        :param deleted_at: The deleted_at of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def description(self):
        """Gets the description of this SearchPhoto.  # noqa: E501


        :return: The description of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SearchPhoto.


        :param description: The description of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def document_id(self):
        """Gets the document_id of this SearchPhoto.  # noqa: E501


        :return: The document_id of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this SearchPhoto.


        :param document_id: The document_id of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def duration(self):
        """Gets the duration of this SearchPhoto.  # noqa: E501


        :return: The duration of this SearchPhoto.  # noqa: E501
        :rtype: TimeDuration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SearchPhoto.


        :param duration: The duration of this SearchPhoto.  # noqa: E501
        :type: TimeDuration
        """

        self._duration = duration

    @property
    def edited_at(self):
        """Gets the edited_at of this SearchPhoto.  # noqa: E501


        :return: The edited_at of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._edited_at

    @edited_at.setter
    def edited_at(self, edited_at):
        """Sets the edited_at of this SearchPhoto.


        :param edited_at: The edited_at of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._edited_at = edited_at

    @property
    def exposure(self):
        """Gets the exposure of this SearchPhoto.  # noqa: E501


        :return: The exposure of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._exposure

    @exposure.setter
    def exposure(self, exposure):
        """Sets the exposure of this SearchPhoto.


        :param exposure: The exposure of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._exposure = exposure

    @property
    def f_number(self):
        """Gets the f_number of this SearchPhoto.  # noqa: E501


        :return: The f_number of this SearchPhoto.  # noqa: E501
        :rtype: float
        """
        return self._f_number

    @f_number.setter
    def f_number(self, f_number):
        """Sets the f_number of this SearchPhoto.


        :param f_number: The f_number of this SearchPhoto.  # noqa: E501
        :type: float
        """

        self._f_number = f_number

    @property
    def faces(self):
        """Gets the faces of this SearchPhoto.  # noqa: E501


        :return: The faces of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._faces

    @faces.setter
    def faces(self, faces):
        """Sets the faces of this SearchPhoto.


        :param faces: The faces of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._faces = faces

    @property
    def favorite(self):
        """Gets the favorite of this SearchPhoto.  # noqa: E501


        :return: The favorite of this SearchPhoto.  # noqa: E501
        :rtype: bool
        """
        return self._favorite

    @favorite.setter
    def favorite(self, favorite):
        """Sets the favorite of this SearchPhoto.


        :param favorite: The favorite of this SearchPhoto.  # noqa: E501
        :type: bool
        """

        self._favorite = favorite

    @property
    def file_name(self):
        """Gets the file_name of this SearchPhoto.  # noqa: E501


        :return: The file_name of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this SearchPhoto.


        :param file_name: The file_name of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_root(self):
        """Gets the file_root of this SearchPhoto.  # noqa: E501


        :return: The file_root of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._file_root

    @file_root.setter
    def file_root(self, file_root):
        """Sets the file_root of this SearchPhoto.


        :param file_root: The file_root of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._file_root = file_root

    @property
    def file_uid(self):
        """Gets the file_uid of this SearchPhoto.  # noqa: E501


        :return: The file_uid of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._file_uid

    @file_uid.setter
    def file_uid(self, file_uid):
        """Sets the file_uid of this SearchPhoto.


        :param file_uid: The file_uid of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._file_uid = file_uid

    @property
    def files(self):
        """Gets the files of this SearchPhoto.  # noqa: E501


        :return: The files of this SearchPhoto.  # noqa: E501
        :rtype: list[EntityFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this SearchPhoto.


        :param files: The files of this SearchPhoto.  # noqa: E501
        :type: list[EntityFile]
        """

        self._files = files

    @property
    def focal_length(self):
        """Gets the focal_length of this SearchPhoto.  # noqa: E501


        :return: The focal_length of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._focal_length

    @focal_length.setter
    def focal_length(self, focal_length):
        """Sets the focal_length of this SearchPhoto.


        :param focal_length: The focal_length of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._focal_length = focal_length

    @property
    def hash(self):
        """Gets the hash of this SearchPhoto.  # noqa: E501


        :return: The hash of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this SearchPhoto.


        :param hash: The hash of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def height(self):
        """Gets the height of this SearchPhoto.  # noqa: E501


        :return: The height of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this SearchPhoto.


        :param height: The height of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this SearchPhoto.  # noqa: E501


        :return: The id of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchPhoto.


        :param id: The id of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instance_id(self):
        """Gets the instance_id of this SearchPhoto.  # noqa: E501


        :return: The instance_id of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this SearchPhoto.


        :param instance_id: The instance_id of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def iso(self):
        """Gets the iso of this SearchPhoto.  # noqa: E501


        :return: The iso of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._iso

    @iso.setter
    def iso(self, iso):
        """Sets the iso of this SearchPhoto.


        :param iso: The iso of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._iso = iso

    @property
    def lat(self):
        """Gets the lat of this SearchPhoto.  # noqa: E501


        :return: The lat of this SearchPhoto.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this SearchPhoto.


        :param lat: The lat of this SearchPhoto.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def lens_id(self):
        """Gets the lens_id of this SearchPhoto.  # noqa: E501

        Lens  # noqa: E501

        :return: The lens_id of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._lens_id

    @lens_id.setter
    def lens_id(self, lens_id):
        """Sets the lens_id of this SearchPhoto.

        Lens  # noqa: E501

        :param lens_id: The lens_id of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._lens_id = lens_id

    @property
    def lens_make(self):
        """Gets the lens_make of this SearchPhoto.  # noqa: E501


        :return: The lens_make of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._lens_make

    @lens_make.setter
    def lens_make(self, lens_make):
        """Sets the lens_make of this SearchPhoto.


        :param lens_make: The lens_make of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._lens_make = lens_make

    @property
    def lens_model(self):
        """Gets the lens_model of this SearchPhoto.  # noqa: E501


        :return: The lens_model of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._lens_model

    @lens_model.setter
    def lens_model(self, lens_model):
        """Sets the lens_model of this SearchPhoto.


        :param lens_model: The lens_model of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._lens_model = lens_model

    @property
    def lng(self):
        """Gets the lng of this SearchPhoto.  # noqa: E501


        :return: The lng of this SearchPhoto.  # noqa: E501
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this SearchPhoto.


        :param lng: The lng of this SearchPhoto.  # noqa: E501
        :type: float
        """

        self._lng = lng

    @property
    def merged(self):
        """Gets the merged of this SearchPhoto.  # noqa: E501


        :return: The merged of this SearchPhoto.  # noqa: E501
        :rtype: bool
        """
        return self._merged

    @merged.setter
    def merged(self, merged):
        """Sets the merged of this SearchPhoto.


        :param merged: The merged of this SearchPhoto.  # noqa: E501
        :type: bool
        """

        self._merged = merged

    @property
    def month(self):
        """Gets the month of this SearchPhoto.  # noqa: E501


        :return: The month of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this SearchPhoto.


        :param month: The month of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def name(self):
        """Gets the name of this SearchPhoto.  # noqa: E501


        :return: The name of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchPhoto.


        :param name: The name of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def original_name(self):
        """Gets the original_name of this SearchPhoto.  # noqa: E501


        :return: The original_name of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this SearchPhoto.


        :param original_name: The original_name of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._original_name = original_name

    @property
    def panorama(self):
        """Gets the panorama of this SearchPhoto.  # noqa: E501


        :return: The panorama of this SearchPhoto.  # noqa: E501
        :rtype: bool
        """
        return self._panorama

    @panorama.setter
    def panorama(self, panorama):
        """Sets the panorama of this SearchPhoto.


        :param panorama: The panorama of this SearchPhoto.  # noqa: E501
        :type: bool
        """

        self._panorama = panorama

    @property
    def path(self):
        """Gets the path of this SearchPhoto.  # noqa: E501


        :return: The path of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SearchPhoto.


        :param path: The path of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def place_city(self):
        """Gets the place_city of this SearchPhoto.  # noqa: E501


        :return: The place_city of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._place_city

    @place_city.setter
    def place_city(self, place_city):
        """Sets the place_city of this SearchPhoto.


        :param place_city: The place_city of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._place_city = place_city

    @property
    def place_country(self):
        """Gets the place_country of this SearchPhoto.  # noqa: E501


        :return: The place_country of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._place_country

    @place_country.setter
    def place_country(self, place_country):
        """Sets the place_country of this SearchPhoto.


        :param place_country: The place_country of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._place_country = place_country

    @property
    def place_id(self):
        """Gets the place_id of this SearchPhoto.  # noqa: E501


        :return: The place_id of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this SearchPhoto.


        :param place_id: The place_id of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._place_id = place_id

    @property
    def place_label(self):
        """Gets the place_label of this SearchPhoto.  # noqa: E501


        :return: The place_label of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._place_label

    @place_label.setter
    def place_label(self, place_label):
        """Sets the place_label of this SearchPhoto.


        :param place_label: The place_label of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._place_label = place_label

    @property
    def place_src(self):
        """Gets the place_src of this SearchPhoto.  # noqa: E501


        :return: The place_src of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._place_src

    @place_src.setter
    def place_src(self, place_src):
        """Sets the place_src of this SearchPhoto.


        :param place_src: The place_src of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._place_src = place_src

    @property
    def place_state(self):
        """Gets the place_state of this SearchPhoto.  # noqa: E501


        :return: The place_state of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._place_state

    @place_state.setter
    def place_state(self, place_state):
        """Sets the place_state of this SearchPhoto.


        :param place_state: The place_state of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._place_state = place_state

    @property
    def portrait(self):
        """Gets the portrait of this SearchPhoto.  # noqa: E501


        :return: The portrait of this SearchPhoto.  # noqa: E501
        :rtype: bool
        """
        return self._portrait

    @portrait.setter
    def portrait(self, portrait):
        """Sets the portrait of this SearchPhoto.


        :param portrait: The portrait of this SearchPhoto.  # noqa: E501
        :type: bool
        """

        self._portrait = portrait

    @property
    def private(self):
        """Gets the private of this SearchPhoto.  # noqa: E501


        :return: The private of this SearchPhoto.  # noqa: E501
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this SearchPhoto.


        :param private: The private of this SearchPhoto.  # noqa: E501
        :type: bool
        """

        self._private = private

    @property
    def quality(self):
        """Gets the quality of this SearchPhoto.  # noqa: E501


        :return: The quality of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this SearchPhoto.


        :param quality: The quality of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._quality = quality

    @property
    def resolution(self):
        """Gets the resolution of this SearchPhoto.  # noqa: E501


        :return: The resolution of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this SearchPhoto.


        :param resolution: The resolution of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._resolution = resolution

    @property
    def scan(self):
        """Gets the scan of this SearchPhoto.  # noqa: E501


        :return: The scan of this SearchPhoto.  # noqa: E501
        :rtype: bool
        """
        return self._scan

    @scan.setter
    def scan(self, scan):
        """Sets the scan of this SearchPhoto.


        :param scan: The scan of this SearchPhoto.  # noqa: E501
        :type: bool
        """

        self._scan = scan

    @property
    def stack(self):
        """Gets the stack of this SearchPhoto.  # noqa: E501


        :return: The stack of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._stack

    @stack.setter
    def stack(self, stack):
        """Sets the stack of this SearchPhoto.


        :param stack: The stack of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._stack = stack

    @property
    def taken_at(self):
        """Gets the taken_at of this SearchPhoto.  # noqa: E501


        :return: The taken_at of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._taken_at

    @taken_at.setter
    def taken_at(self, taken_at):
        """Sets the taken_at of this SearchPhoto.


        :param taken_at: The taken_at of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._taken_at = taken_at

    @property
    def taken_at_local(self):
        """Gets the taken_at_local of this SearchPhoto.  # noqa: E501


        :return: The taken_at_local of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._taken_at_local

    @taken_at_local.setter
    def taken_at_local(self, taken_at_local):
        """Sets the taken_at_local of this SearchPhoto.


        :param taken_at_local: The taken_at_local of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._taken_at_local = taken_at_local

    @property
    def taken_src(self):
        """Gets the taken_src of this SearchPhoto.  # noqa: E501


        :return: The taken_src of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._taken_src

    @taken_src.setter
    def taken_src(self, taken_src):
        """Sets the taken_src of this SearchPhoto.


        :param taken_src: The taken_src of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._taken_src = taken_src

    @property
    def time_zone(self):
        """Gets the time_zone of this SearchPhoto.  # noqa: E501


        :return: The time_zone of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this SearchPhoto.


        :param time_zone: The time_zone of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def title(self):
        """Gets the title of this SearchPhoto.  # noqa: E501


        :return: The title of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SearchPhoto.


        :param title: The title of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this SearchPhoto.  # noqa: E501


        :return: The type of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchPhoto.


        :param type: The type of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def type_src(self):
        """Gets the type_src of this SearchPhoto.  # noqa: E501


        :return: The type_src of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._type_src

    @type_src.setter
    def type_src(self, type_src):
        """Sets the type_src of this SearchPhoto.


        :param type_src: The type_src of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._type_src = type_src

    @property
    def uid(self):
        """Gets the uid of this SearchPhoto.  # noqa: E501


        :return: The uid of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SearchPhoto.


        :param uid: The uid of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def updated_at(self):
        """Gets the updated_at of this SearchPhoto.  # noqa: E501


        :return: The updated_at of this SearchPhoto.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SearchPhoto.


        :param updated_at: The updated_at of this SearchPhoto.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def width(self):
        """Gets the width of this SearchPhoto.  # noqa: E501


        :return: The width of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this SearchPhoto.


        :param width: The width of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def year(self):
        """Gets the year of this SearchPhoto.  # noqa: E501


        :return: The year of this SearchPhoto.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this SearchPhoto.


        :param year: The year of this SearchPhoto.  # noqa: E501
        :type: int
        """

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchPhoto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchPhoto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchPhoto):
            return True

        return self.to_dict() != other.to_dict()
