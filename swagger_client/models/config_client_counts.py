# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ConfigClientCounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'albums': 'int',
        'all': 'int',
        'archived': 'int',
        'cameras': 'int',
        'countries': 'int',
        'favorites': 'int',
        'files': 'int',
        'folders': 'int',
        'hidden': 'int',
        'label_max_photos': 'int',
        'labels': 'int',
        'lenses': 'int',
        'live': 'int',
        'moments': 'int',
        'months': 'int',
        'people': 'int',
        'photos': 'int',
        'places': 'int',
        'private': 'int',
        'private_albums': 'int',
        'private_folders': 'int',
        'private_moments': 'int',
        'private_months': 'int',
        'private_states': 'int',
        'review': 'int',
        'states': 'int',
        'stories': 'int',
        'videos': 'int'
    }

    attribute_map = {
        'albums': 'albums',
        'all': 'all',
        'archived': 'archived',
        'cameras': 'cameras',
        'countries': 'countries',
        'favorites': 'favorites',
        'files': 'files',
        'folders': 'folders',
        'hidden': 'hidden',
        'label_max_photos': 'labelMaxPhotos',
        'labels': 'labels',
        'lenses': 'lenses',
        'live': 'live',
        'moments': 'moments',
        'months': 'months',
        'people': 'people',
        'photos': 'photos',
        'places': 'places',
        'private': 'private',
        'private_albums': 'private_albums',
        'private_folders': 'private_folders',
        'private_moments': 'private_moments',
        'private_months': 'private_months',
        'private_states': 'private_states',
        'review': 'review',
        'states': 'states',
        'stories': 'stories',
        'videos': 'videos'
    }

    def __init__(self, albums=None, all=None, archived=None, cameras=None, countries=None, favorites=None, files=None, folders=None, hidden=None, label_max_photos=None, labels=None, lenses=None, live=None, moments=None, months=None, people=None, photos=None, places=None, private=None, private_albums=None, private_folders=None, private_moments=None, private_months=None, private_states=None, review=None, states=None, stories=None, videos=None, _configuration=None):  # noqa: E501
        """ConfigClientCounts - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._albums = None
        self._all = None
        self._archived = None
        self._cameras = None
        self._countries = None
        self._favorites = None
        self._files = None
        self._folders = None
        self._hidden = None
        self._label_max_photos = None
        self._labels = None
        self._lenses = None
        self._live = None
        self._moments = None
        self._months = None
        self._people = None
        self._photos = None
        self._places = None
        self._private = None
        self._private_albums = None
        self._private_folders = None
        self._private_moments = None
        self._private_months = None
        self._private_states = None
        self._review = None
        self._states = None
        self._stories = None
        self._videos = None
        self.discriminator = None

        if albums is not None:
            self.albums = albums
        if all is not None:
            self.all = all
        if archived is not None:
            self.archived = archived
        if cameras is not None:
            self.cameras = cameras
        if countries is not None:
            self.countries = countries
        if favorites is not None:
            self.favorites = favorites
        if files is not None:
            self.files = files
        if folders is not None:
            self.folders = folders
        if hidden is not None:
            self.hidden = hidden
        if label_max_photos is not None:
            self.label_max_photos = label_max_photos
        if labels is not None:
            self.labels = labels
        if lenses is not None:
            self.lenses = lenses
        if live is not None:
            self.live = live
        if moments is not None:
            self.moments = moments
        if months is not None:
            self.months = months
        if people is not None:
            self.people = people
        if photos is not None:
            self.photos = photos
        if places is not None:
            self.places = places
        if private is not None:
            self.private = private
        if private_albums is not None:
            self.private_albums = private_albums
        if private_folders is not None:
            self.private_folders = private_folders
        if private_moments is not None:
            self.private_moments = private_moments
        if private_months is not None:
            self.private_months = private_months
        if private_states is not None:
            self.private_states = private_states
        if review is not None:
            self.review = review
        if states is not None:
            self.states = states
        if stories is not None:
            self.stories = stories
        if videos is not None:
            self.videos = videos

    @property
    def albums(self):
        """Gets the albums of this ConfigClientCounts.  # noqa: E501


        :return: The albums of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._albums

    @albums.setter
    def albums(self, albums):
        """Sets the albums of this ConfigClientCounts.


        :param albums: The albums of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._albums = albums

    @property
    def all(self):
        """Gets the all of this ConfigClientCounts.  # noqa: E501


        :return: The all of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this ConfigClientCounts.


        :param all: The all of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._all = all

    @property
    def archived(self):
        """Gets the archived of this ConfigClientCounts.  # noqa: E501


        :return: The archived of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ConfigClientCounts.


        :param archived: The archived of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._archived = archived

    @property
    def cameras(self):
        """Gets the cameras of this ConfigClientCounts.  # noqa: E501


        :return: The cameras of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._cameras

    @cameras.setter
    def cameras(self, cameras):
        """Sets the cameras of this ConfigClientCounts.


        :param cameras: The cameras of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._cameras = cameras

    @property
    def countries(self):
        """Gets the countries of this ConfigClientCounts.  # noqa: E501


        :return: The countries of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this ConfigClientCounts.


        :param countries: The countries of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._countries = countries

    @property
    def favorites(self):
        """Gets the favorites of this ConfigClientCounts.  # noqa: E501


        :return: The favorites of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._favorites

    @favorites.setter
    def favorites(self, favorites):
        """Sets the favorites of this ConfigClientCounts.


        :param favorites: The favorites of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._favorites = favorites

    @property
    def files(self):
        """Gets the files of this ConfigClientCounts.  # noqa: E501


        :return: The files of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ConfigClientCounts.


        :param files: The files of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._files = files

    @property
    def folders(self):
        """Gets the folders of this ConfigClientCounts.  # noqa: E501


        :return: The folders of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """Sets the folders of this ConfigClientCounts.


        :param folders: The folders of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._folders = folders

    @property
    def hidden(self):
        """Gets the hidden of this ConfigClientCounts.  # noqa: E501


        :return: The hidden of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this ConfigClientCounts.


        :param hidden: The hidden of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._hidden = hidden

    @property
    def label_max_photos(self):
        """Gets the label_max_photos of this ConfigClientCounts.  # noqa: E501


        :return: The label_max_photos of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._label_max_photos

    @label_max_photos.setter
    def label_max_photos(self, label_max_photos):
        """Sets the label_max_photos of this ConfigClientCounts.


        :param label_max_photos: The label_max_photos of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._label_max_photos = label_max_photos

    @property
    def labels(self):
        """Gets the labels of this ConfigClientCounts.  # noqa: E501


        :return: The labels of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ConfigClientCounts.


        :param labels: The labels of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._labels = labels

    @property
    def lenses(self):
        """Gets the lenses of this ConfigClientCounts.  # noqa: E501


        :return: The lenses of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._lenses

    @lenses.setter
    def lenses(self, lenses):
        """Sets the lenses of this ConfigClientCounts.


        :param lenses: The lenses of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._lenses = lenses

    @property
    def live(self):
        """Gets the live of this ConfigClientCounts.  # noqa: E501


        :return: The live of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._live

    @live.setter
    def live(self, live):
        """Sets the live of this ConfigClientCounts.


        :param live: The live of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._live = live

    @property
    def moments(self):
        """Gets the moments of this ConfigClientCounts.  # noqa: E501


        :return: The moments of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._moments

    @moments.setter
    def moments(self, moments):
        """Sets the moments of this ConfigClientCounts.


        :param moments: The moments of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._moments = moments

    @property
    def months(self):
        """Gets the months of this ConfigClientCounts.  # noqa: E501


        :return: The months of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._months

    @months.setter
    def months(self, months):
        """Sets the months of this ConfigClientCounts.


        :param months: The months of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._months = months

    @property
    def people(self):
        """Gets the people of this ConfigClientCounts.  # noqa: E501


        :return: The people of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._people

    @people.setter
    def people(self, people):
        """Sets the people of this ConfigClientCounts.


        :param people: The people of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._people = people

    @property
    def photos(self):
        """Gets the photos of this ConfigClientCounts.  # noqa: E501


        :return: The photos of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this ConfigClientCounts.


        :param photos: The photos of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._photos = photos

    @property
    def places(self):
        """Gets the places of this ConfigClientCounts.  # noqa: E501


        :return: The places of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._places

    @places.setter
    def places(self, places):
        """Sets the places of this ConfigClientCounts.


        :param places: The places of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._places = places

    @property
    def private(self):
        """Gets the private of this ConfigClientCounts.  # noqa: E501


        :return: The private of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this ConfigClientCounts.


        :param private: The private of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._private = private

    @property
    def private_albums(self):
        """Gets the private_albums of this ConfigClientCounts.  # noqa: E501


        :return: The private_albums of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._private_albums

    @private_albums.setter
    def private_albums(self, private_albums):
        """Sets the private_albums of this ConfigClientCounts.


        :param private_albums: The private_albums of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._private_albums = private_albums

    @property
    def private_folders(self):
        """Gets the private_folders of this ConfigClientCounts.  # noqa: E501


        :return: The private_folders of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._private_folders

    @private_folders.setter
    def private_folders(self, private_folders):
        """Sets the private_folders of this ConfigClientCounts.


        :param private_folders: The private_folders of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._private_folders = private_folders

    @property
    def private_moments(self):
        """Gets the private_moments of this ConfigClientCounts.  # noqa: E501


        :return: The private_moments of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._private_moments

    @private_moments.setter
    def private_moments(self, private_moments):
        """Sets the private_moments of this ConfigClientCounts.


        :param private_moments: The private_moments of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._private_moments = private_moments

    @property
    def private_months(self):
        """Gets the private_months of this ConfigClientCounts.  # noqa: E501


        :return: The private_months of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._private_months

    @private_months.setter
    def private_months(self, private_months):
        """Sets the private_months of this ConfigClientCounts.


        :param private_months: The private_months of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._private_months = private_months

    @property
    def private_states(self):
        """Gets the private_states of this ConfigClientCounts.  # noqa: E501


        :return: The private_states of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._private_states

    @private_states.setter
    def private_states(self, private_states):
        """Sets the private_states of this ConfigClientCounts.


        :param private_states: The private_states of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._private_states = private_states

    @property
    def review(self):
        """Gets the review of this ConfigClientCounts.  # noqa: E501


        :return: The review of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this ConfigClientCounts.


        :param review: The review of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._review = review

    @property
    def states(self):
        """Gets the states of this ConfigClientCounts.  # noqa: E501


        :return: The states of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this ConfigClientCounts.


        :param states: The states of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._states = states

    @property
    def stories(self):
        """Gets the stories of this ConfigClientCounts.  # noqa: E501


        :return: The stories of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._stories

    @stories.setter
    def stories(self, stories):
        """Sets the stories of this ConfigClientCounts.


        :param stories: The stories of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._stories = stories

    @property
    def videos(self):
        """Gets the videos of this ConfigClientCounts.  # noqa: E501


        :return: The videos of this ConfigClientCounts.  # noqa: E501
        :rtype: int
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this ConfigClientCounts.


        :param videos: The videos of this ConfigClientCounts.  # noqa: E501
        :type: int
        """

        self._videos = videos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigClientCounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigClientCounts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigClientCounts):
            return True

        return self.to_dict() != other.to_dict()
