# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EntityFace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collision_radius': 'float',
        'collisions': 'int',
        'created_at': 'str',
        'hidden': 'bool',
        'id': 'str',
        'kind': 'int',
        'matched_at': 'str',
        'sample_radius': 'float',
        'samples': 'int',
        'src': 'str',
        'subj_uid': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'collision_radius': 'CollisionRadius',
        'collisions': 'Collisions',
        'created_at': 'CreatedAt',
        'hidden': 'Hidden',
        'id': 'ID',
        'kind': 'Kind',
        'matched_at': 'MatchedAt',
        'sample_radius': 'SampleRadius',
        'samples': 'Samples',
        'src': 'Src',
        'subj_uid': 'SubjUID',
        'updated_at': 'UpdatedAt'
    }

    def __init__(self, collision_radius=None, collisions=None, created_at=None, hidden=None, id=None, kind=None, matched_at=None, sample_radius=None, samples=None, src=None, subj_uid=None, updated_at=None, _configuration=None):  # noqa: E501
        """EntityFace - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._collision_radius = None
        self._collisions = None
        self._created_at = None
        self._hidden = None
        self._id = None
        self._kind = None
        self._matched_at = None
        self._sample_radius = None
        self._samples = None
        self._src = None
        self._subj_uid = None
        self._updated_at = None
        self.discriminator = None

        if collision_radius is not None:
            self.collision_radius = collision_radius
        if collisions is not None:
            self.collisions = collisions
        if created_at is not None:
            self.created_at = created_at
        if hidden is not None:
            self.hidden = hidden
        if id is not None:
            self.id = id
        if kind is not None:
            self.kind = kind
        if matched_at is not None:
            self.matched_at = matched_at
        if sample_radius is not None:
            self.sample_radius = sample_radius
        if samples is not None:
            self.samples = samples
        if src is not None:
            self.src = src
        if subj_uid is not None:
            self.subj_uid = subj_uid
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def collision_radius(self):
        """Gets the collision_radius of this EntityFace.  # noqa: E501


        :return: The collision_radius of this EntityFace.  # noqa: E501
        :rtype: float
        """
        return self._collision_radius

    @collision_radius.setter
    def collision_radius(self, collision_radius):
        """Sets the collision_radius of this EntityFace.


        :param collision_radius: The collision_radius of this EntityFace.  # noqa: E501
        :type: float
        """

        self._collision_radius = collision_radius

    @property
    def collisions(self):
        """Gets the collisions of this EntityFace.  # noqa: E501


        :return: The collisions of this EntityFace.  # noqa: E501
        :rtype: int
        """
        return self._collisions

    @collisions.setter
    def collisions(self, collisions):
        """Sets the collisions of this EntityFace.


        :param collisions: The collisions of this EntityFace.  # noqa: E501
        :type: int
        """

        self._collisions = collisions

    @property
    def created_at(self):
        """Gets the created_at of this EntityFace.  # noqa: E501


        :return: The created_at of this EntityFace.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EntityFace.


        :param created_at: The created_at of this EntityFace.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def hidden(self):
        """Gets the hidden of this EntityFace.  # noqa: E501


        :return: The hidden of this EntityFace.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this EntityFace.


        :param hidden: The hidden of this EntityFace.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this EntityFace.  # noqa: E501


        :return: The id of this EntityFace.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EntityFace.


        :param id: The id of this EntityFace.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this EntityFace.  # noqa: E501


        :return: The kind of this EntityFace.  # noqa: E501
        :rtype: int
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this EntityFace.


        :param kind: The kind of this EntityFace.  # noqa: E501
        :type: int
        """

        self._kind = kind

    @property
    def matched_at(self):
        """Gets the matched_at of this EntityFace.  # noqa: E501


        :return: The matched_at of this EntityFace.  # noqa: E501
        :rtype: str
        """
        return self._matched_at

    @matched_at.setter
    def matched_at(self, matched_at):
        """Sets the matched_at of this EntityFace.


        :param matched_at: The matched_at of this EntityFace.  # noqa: E501
        :type: str
        """

        self._matched_at = matched_at

    @property
    def sample_radius(self):
        """Gets the sample_radius of this EntityFace.  # noqa: E501


        :return: The sample_radius of this EntityFace.  # noqa: E501
        :rtype: float
        """
        return self._sample_radius

    @sample_radius.setter
    def sample_radius(self, sample_radius):
        """Sets the sample_radius of this EntityFace.


        :param sample_radius: The sample_radius of this EntityFace.  # noqa: E501
        :type: float
        """

        self._sample_radius = sample_radius

    @property
    def samples(self):
        """Gets the samples of this EntityFace.  # noqa: E501


        :return: The samples of this EntityFace.  # noqa: E501
        :rtype: int
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this EntityFace.


        :param samples: The samples of this EntityFace.  # noqa: E501
        :type: int
        """

        self._samples = samples

    @property
    def src(self):
        """Gets the src of this EntityFace.  # noqa: E501


        :return: The src of this EntityFace.  # noqa: E501
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this EntityFace.


        :param src: The src of this EntityFace.  # noqa: E501
        :type: str
        """

        self._src = src

    @property
    def subj_uid(self):
        """Gets the subj_uid of this EntityFace.  # noqa: E501


        :return: The subj_uid of this EntityFace.  # noqa: E501
        :rtype: str
        """
        return self._subj_uid

    @subj_uid.setter
    def subj_uid(self, subj_uid):
        """Sets the subj_uid of this EntityFace.


        :param subj_uid: The subj_uid of this EntityFace.  # noqa: E501
        :type: str
        """

        self._subj_uid = subj_uid

    @property
    def updated_at(self):
        """Gets the updated_at of this EntityFace.  # noqa: E501


        :return: The updated_at of this EntityFace.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EntityFace.


        :param updated_at: The updated_at of this EntityFace.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityFace, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityFace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntityFace):
            return True

        return self.to_dict() != other.to_dict()
