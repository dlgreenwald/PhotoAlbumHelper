# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SearchAlbum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'caption': 'str',
        'category': 'str',
        'country': 'str',
        'created_at': 'str',
        'day': 'int',
        'deleted_at': 'str',
        'description': 'str',
        'favorite': 'bool',
        'filter': 'str',
        'link_count': 'int',
        'location': 'str',
        'month': 'int',
        'notes': 'str',
        'order': 'str',
        'parent_uid': 'str',
        'path': 'str',
        'photo_count': 'int',
        'private': 'bool',
        'slug': 'str',
        'state': 'str',
        'template': 'str',
        'thumb': 'str',
        'thumb_src': 'str',
        'title': 'str',
        'type': 'str',
        'uid': 'str',
        'updated_at': 'str',
        'year': 'int'
    }

    attribute_map = {
        'caption': 'Caption',
        'category': 'Category',
        'country': 'Country',
        'created_at': 'CreatedAt',
        'day': 'Day',
        'deleted_at': 'DeletedAt',
        'description': 'Description',
        'favorite': 'Favorite',
        'filter': 'Filter',
        'link_count': 'LinkCount',
        'location': 'Location',
        'month': 'Month',
        'notes': 'Notes',
        'order': 'Order',
        'parent_uid': 'ParentUID',
        'path': 'Path',
        'photo_count': 'PhotoCount',
        'private': 'Private',
        'slug': 'Slug',
        'state': 'State',
        'template': 'Template',
        'thumb': 'Thumb',
        'thumb_src': 'ThumbSrc',
        'title': 'Title',
        'type': 'Type',
        'uid': 'UID',
        'updated_at': 'UpdatedAt',
        'year': 'Year'
    }

    def __init__(self, caption=None, category=None, country=None, created_at=None, day=None, deleted_at=None, description=None, favorite=None, filter=None, link_count=None, location=None, month=None, notes=None, order=None, parent_uid=None, path=None, photo_count=None, private=None, slug=None, state=None, template=None, thumb=None, thumb_src=None, title=None, type=None, uid=None, updated_at=None, year=None, _configuration=None):  # noqa: E501
        """SearchAlbum - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._caption = None
        self._category = None
        self._country = None
        self._created_at = None
        self._day = None
        self._deleted_at = None
        self._description = None
        self._favorite = None
        self._filter = None
        self._link_count = None
        self._location = None
        self._month = None
        self._notes = None
        self._order = None
        self._parent_uid = None
        self._path = None
        self._photo_count = None
        self._private = None
        self._slug = None
        self._state = None
        self._template = None
        self._thumb = None
        self._thumb_src = None
        self._title = None
        self._type = None
        self._uid = None
        self._updated_at = None
        self._year = None
        self.discriminator = None

        if caption is not None:
            self.caption = caption
        if category is not None:
            self.category = category
        if country is not None:
            self.country = country
        if created_at is not None:
            self.created_at = created_at
        if day is not None:
            self.day = day
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if description is not None:
            self.description = description
        if favorite is not None:
            self.favorite = favorite
        if filter is not None:
            self.filter = filter
        if link_count is not None:
            self.link_count = link_count
        if location is not None:
            self.location = location
        if month is not None:
            self.month = month
        if notes is not None:
            self.notes = notes
        if order is not None:
            self.order = order
        if parent_uid is not None:
            self.parent_uid = parent_uid
        if path is not None:
            self.path = path
        if photo_count is not None:
            self.photo_count = photo_count
        if private is not None:
            self.private = private
        if slug is not None:
            self.slug = slug
        if state is not None:
            self.state = state
        if template is not None:
            self.template = template
        if thumb is not None:
            self.thumb = thumb
        if thumb_src is not None:
            self.thumb_src = thumb_src
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if uid is not None:
            self.uid = uid
        if updated_at is not None:
            self.updated_at = updated_at
        if year is not None:
            self.year = year

    @property
    def caption(self):
        """Gets the caption of this SearchAlbum.  # noqa: E501


        :return: The caption of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this SearchAlbum.


        :param caption: The caption of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._caption = caption

    @property
    def category(self):
        """Gets the category of this SearchAlbum.  # noqa: E501


        :return: The category of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SearchAlbum.


        :param category: The category of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def country(self):
        """Gets the country of this SearchAlbum.  # noqa: E501


        :return: The country of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SearchAlbum.


        :param country: The country of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def created_at(self):
        """Gets the created_at of this SearchAlbum.  # noqa: E501


        :return: The created_at of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SearchAlbum.


        :param created_at: The created_at of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def day(self):
        """Gets the day of this SearchAlbum.  # noqa: E501


        :return: The day of this SearchAlbum.  # noqa: E501
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this SearchAlbum.


        :param day: The day of this SearchAlbum.  # noqa: E501
        :type: int
        """

        self._day = day

    @property
    def deleted_at(self):
        """Gets the deleted_at of this SearchAlbum.  # noqa: E501


        :return: The deleted_at of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this SearchAlbum.


        :param deleted_at: The deleted_at of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def description(self):
        """Gets the description of this SearchAlbum.  # noqa: E501


        :return: The description of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SearchAlbum.


        :param description: The description of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def favorite(self):
        """Gets the favorite of this SearchAlbum.  # noqa: E501


        :return: The favorite of this SearchAlbum.  # noqa: E501
        :rtype: bool
        """
        return self._favorite

    @favorite.setter
    def favorite(self, favorite):
        """Sets the favorite of this SearchAlbum.


        :param favorite: The favorite of this SearchAlbum.  # noqa: E501
        :type: bool
        """

        self._favorite = favorite

    @property
    def filter(self):
        """Gets the filter of this SearchAlbum.  # noqa: E501


        :return: The filter of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this SearchAlbum.


        :param filter: The filter of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def link_count(self):
        """Gets the link_count of this SearchAlbum.  # noqa: E501


        :return: The link_count of this SearchAlbum.  # noqa: E501
        :rtype: int
        """
        return self._link_count

    @link_count.setter
    def link_count(self, link_count):
        """Sets the link_count of this SearchAlbum.


        :param link_count: The link_count of this SearchAlbum.  # noqa: E501
        :type: int
        """

        self._link_count = link_count

    @property
    def location(self):
        """Gets the location of this SearchAlbum.  # noqa: E501


        :return: The location of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SearchAlbum.


        :param location: The location of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def month(self):
        """Gets the month of this SearchAlbum.  # noqa: E501


        :return: The month of this SearchAlbum.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this SearchAlbum.


        :param month: The month of this SearchAlbum.  # noqa: E501
        :type: int
        """

        self._month = month

    @property
    def notes(self):
        """Gets the notes of this SearchAlbum.  # noqa: E501


        :return: The notes of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SearchAlbum.


        :param notes: The notes of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def order(self):
        """Gets the order of this SearchAlbum.  # noqa: E501


        :return: The order of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this SearchAlbum.


        :param order: The order of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._order = order

    @property
    def parent_uid(self):
        """Gets the parent_uid of this SearchAlbum.  # noqa: E501


        :return: The parent_uid of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._parent_uid

    @parent_uid.setter
    def parent_uid(self, parent_uid):
        """Sets the parent_uid of this SearchAlbum.


        :param parent_uid: The parent_uid of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._parent_uid = parent_uid

    @property
    def path(self):
        """Gets the path of this SearchAlbum.  # noqa: E501


        :return: The path of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SearchAlbum.


        :param path: The path of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def photo_count(self):
        """Gets the photo_count of this SearchAlbum.  # noqa: E501


        :return: The photo_count of this SearchAlbum.  # noqa: E501
        :rtype: int
        """
        return self._photo_count

    @photo_count.setter
    def photo_count(self, photo_count):
        """Sets the photo_count of this SearchAlbum.


        :param photo_count: The photo_count of this SearchAlbum.  # noqa: E501
        :type: int
        """

        self._photo_count = photo_count

    @property
    def private(self):
        """Gets the private of this SearchAlbum.  # noqa: E501


        :return: The private of this SearchAlbum.  # noqa: E501
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this SearchAlbum.


        :param private: The private of this SearchAlbum.  # noqa: E501
        :type: bool
        """

        self._private = private

    @property
    def slug(self):
        """Gets the slug of this SearchAlbum.  # noqa: E501


        :return: The slug of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SearchAlbum.


        :param slug: The slug of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def state(self):
        """Gets the state of this SearchAlbum.  # noqa: E501


        :return: The state of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SearchAlbum.


        :param state: The state of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def template(self):
        """Gets the template of this SearchAlbum.  # noqa: E501


        :return: The template of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this SearchAlbum.


        :param template: The template of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def thumb(self):
        """Gets the thumb of this SearchAlbum.  # noqa: E501


        :return: The thumb of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this SearchAlbum.


        :param thumb: The thumb of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._thumb = thumb

    @property
    def thumb_src(self):
        """Gets the thumb_src of this SearchAlbum.  # noqa: E501


        :return: The thumb_src of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._thumb_src

    @thumb_src.setter
    def thumb_src(self, thumb_src):
        """Sets the thumb_src of this SearchAlbum.


        :param thumb_src: The thumb_src of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._thumb_src = thumb_src

    @property
    def title(self):
        """Gets the title of this SearchAlbum.  # noqa: E501


        :return: The title of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SearchAlbum.


        :param title: The title of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this SearchAlbum.  # noqa: E501


        :return: The type of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchAlbum.


        :param type: The type of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this SearchAlbum.  # noqa: E501


        :return: The uid of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SearchAlbum.


        :param uid: The uid of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def updated_at(self):
        """Gets the updated_at of this SearchAlbum.  # noqa: E501


        :return: The updated_at of this SearchAlbum.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SearchAlbum.


        :param updated_at: The updated_at of this SearchAlbum.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def year(self):
        """Gets the year of this SearchAlbum.  # noqa: E501


        :return: The year of this SearchAlbum.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this SearchAlbum.


        :param year: The year of this SearchAlbum.  # noqa: E501
        :type: int
        """

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchAlbum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchAlbum):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchAlbum):
            return True

        return self.to_dict() != other.to_dict()
