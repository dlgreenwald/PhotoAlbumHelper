# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EntityPlace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'str',
        'country': 'str',
        'created_at': 'str',
        'district': 'str',
        'favorite': 'bool',
        'keywords': 'str',
        'label': 'str',
        'photo_count': 'int',
        'place_id': 'str',
        'state': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'city': 'City',
        'country': 'Country',
        'created_at': 'CreatedAt',
        'district': 'District',
        'favorite': 'Favorite',
        'keywords': 'Keywords',
        'label': 'Label',
        'photo_count': 'PhotoCount',
        'place_id': 'PlaceID',
        'state': 'State',
        'updated_at': 'UpdatedAt'
    }

    def __init__(self, city=None, country=None, created_at=None, district=None, favorite=None, keywords=None, label=None, photo_count=None, place_id=None, state=None, updated_at=None, _configuration=None):  # noqa: E501
        """EntityPlace - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._city = None
        self._country = None
        self._created_at = None
        self._district = None
        self._favorite = None
        self._keywords = None
        self._label = None
        self._photo_count = None
        self._place_id = None
        self._state = None
        self._updated_at = None
        self.discriminator = None

        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if created_at is not None:
            self.created_at = created_at
        if district is not None:
            self.district = district
        if favorite is not None:
            self.favorite = favorite
        if keywords is not None:
            self.keywords = keywords
        if label is not None:
            self.label = label
        if photo_count is not None:
            self.photo_count = photo_count
        if place_id is not None:
            self.place_id = place_id
        if state is not None:
            self.state = state
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def city(self):
        """Gets the city of this EntityPlace.  # noqa: E501


        :return: The city of this EntityPlace.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this EntityPlace.


        :param city: The city of this EntityPlace.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this EntityPlace.  # noqa: E501


        :return: The country of this EntityPlace.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EntityPlace.


        :param country: The country of this EntityPlace.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def created_at(self):
        """Gets the created_at of this EntityPlace.  # noqa: E501


        :return: The created_at of this EntityPlace.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EntityPlace.


        :param created_at: The created_at of this EntityPlace.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def district(self):
        """Gets the district of this EntityPlace.  # noqa: E501


        :return: The district of this EntityPlace.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this EntityPlace.


        :param district: The district of this EntityPlace.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def favorite(self):
        """Gets the favorite of this EntityPlace.  # noqa: E501


        :return: The favorite of this EntityPlace.  # noqa: E501
        :rtype: bool
        """
        return self._favorite

    @favorite.setter
    def favorite(self, favorite):
        """Sets the favorite of this EntityPlace.


        :param favorite: The favorite of this EntityPlace.  # noqa: E501
        :type: bool
        """

        self._favorite = favorite

    @property
    def keywords(self):
        """Gets the keywords of this EntityPlace.  # noqa: E501


        :return: The keywords of this EntityPlace.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this EntityPlace.


        :param keywords: The keywords of this EntityPlace.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def label(self):
        """Gets the label of this EntityPlace.  # noqa: E501


        :return: The label of this EntityPlace.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this EntityPlace.


        :param label: The label of this EntityPlace.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def photo_count(self):
        """Gets the photo_count of this EntityPlace.  # noqa: E501


        :return: The photo_count of this EntityPlace.  # noqa: E501
        :rtype: int
        """
        return self._photo_count

    @photo_count.setter
    def photo_count(self, photo_count):
        """Sets the photo_count of this EntityPlace.


        :param photo_count: The photo_count of this EntityPlace.  # noqa: E501
        :type: int
        """

        self._photo_count = photo_count

    @property
    def place_id(self):
        """Gets the place_id of this EntityPlace.  # noqa: E501


        :return: The place_id of this EntityPlace.  # noqa: E501
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this EntityPlace.


        :param place_id: The place_id of this EntityPlace.  # noqa: E501
        :type: str
        """

        self._place_id = place_id

    @property
    def state(self):
        """Gets the state of this EntityPlace.  # noqa: E501


        :return: The state of this EntityPlace.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EntityPlace.


        :param state: The state of this EntityPlace.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this EntityPlace.  # noqa: E501


        :return: The updated_at of this EntityPlace.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EntityPlace.


        :param updated_at: The updated_at of this EntityPlace.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityPlace, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityPlace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EntityPlace):
            return True

        return self.to_dict() != other.to_dict()
