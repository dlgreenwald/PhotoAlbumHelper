# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SearchLabel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'custom_slug': 'str',
        'deleted_at': 'str',
        'description': 'str',
        'favorite': 'bool',
        'id': 'int',
        'name': 'str',
        'notes': 'str',
        'photo_count': 'int',
        'priority': 'int',
        'slug': 'str',
        'thumb': 'str',
        'thumb_src': 'str',
        'uid': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'created_at': 'CreatedAt',
        'custom_slug': 'CustomSlug',
        'deleted_at': 'DeletedAt',
        'description': 'Description',
        'favorite': 'Favorite',
        'id': 'ID',
        'name': 'Name',
        'notes': 'Notes',
        'photo_count': 'PhotoCount',
        'priority': 'Priority',
        'slug': 'Slug',
        'thumb': 'Thumb',
        'thumb_src': 'ThumbSrc',
        'uid': 'UID',
        'updated_at': 'UpdatedAt'
    }

    def __init__(self, created_at=None, custom_slug=None, deleted_at=None, description=None, favorite=None, id=None, name=None, notes=None, photo_count=None, priority=None, slug=None, thumb=None, thumb_src=None, uid=None, updated_at=None, _configuration=None):  # noqa: E501
        """SearchLabel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_at = None
        self._custom_slug = None
        self._deleted_at = None
        self._description = None
        self._favorite = None
        self._id = None
        self._name = None
        self._notes = None
        self._photo_count = None
        self._priority = None
        self._slug = None
        self._thumb = None
        self._thumb_src = None
        self._uid = None
        self._updated_at = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if custom_slug is not None:
            self.custom_slug = custom_slug
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if description is not None:
            self.description = description
        if favorite is not None:
            self.favorite = favorite
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if notes is not None:
            self.notes = notes
        if photo_count is not None:
            self.photo_count = photo_count
        if priority is not None:
            self.priority = priority
        if slug is not None:
            self.slug = slug
        if thumb is not None:
            self.thumb = thumb
        if thumb_src is not None:
            self.thumb_src = thumb_src
        if uid is not None:
            self.uid = uid
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this SearchLabel.  # noqa: E501


        :return: The created_at of this SearchLabel.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SearchLabel.


        :param created_at: The created_at of this SearchLabel.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def custom_slug(self):
        """Gets the custom_slug of this SearchLabel.  # noqa: E501


        :return: The custom_slug of this SearchLabel.  # noqa: E501
        :rtype: str
        """
        return self._custom_slug

    @custom_slug.setter
    def custom_slug(self, custom_slug):
        """Sets the custom_slug of this SearchLabel.


        :param custom_slug: The custom_slug of this SearchLabel.  # noqa: E501
        :type: str
        """

        self._custom_slug = custom_slug

    @property
    def deleted_at(self):
        """Gets the deleted_at of this SearchLabel.  # noqa: E501


        :return: The deleted_at of this SearchLabel.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this SearchLabel.


        :param deleted_at: The deleted_at of this SearchLabel.  # noqa: E501
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def description(self):
        """Gets the description of this SearchLabel.  # noqa: E501


        :return: The description of this SearchLabel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SearchLabel.


        :param description: The description of this SearchLabel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def favorite(self):
        """Gets the favorite of this SearchLabel.  # noqa: E501


        :return: The favorite of this SearchLabel.  # noqa: E501
        :rtype: bool
        """
        return self._favorite

    @favorite.setter
    def favorite(self, favorite):
        """Sets the favorite of this SearchLabel.


        :param favorite: The favorite of this SearchLabel.  # noqa: E501
        :type: bool
        """

        self._favorite = favorite

    @property
    def id(self):
        """Gets the id of this SearchLabel.  # noqa: E501


        :return: The id of this SearchLabel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchLabel.


        :param id: The id of this SearchLabel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SearchLabel.  # noqa: E501


        :return: The name of this SearchLabel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchLabel.


        :param name: The name of this SearchLabel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this SearchLabel.  # noqa: E501


        :return: The notes of this SearchLabel.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SearchLabel.


        :param notes: The notes of this SearchLabel.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def photo_count(self):
        """Gets the photo_count of this SearchLabel.  # noqa: E501


        :return: The photo_count of this SearchLabel.  # noqa: E501
        :rtype: int
        """
        return self._photo_count

    @photo_count.setter
    def photo_count(self, photo_count):
        """Sets the photo_count of this SearchLabel.


        :param photo_count: The photo_count of this SearchLabel.  # noqa: E501
        :type: int
        """

        self._photo_count = photo_count

    @property
    def priority(self):
        """Gets the priority of this SearchLabel.  # noqa: E501


        :return: The priority of this SearchLabel.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this SearchLabel.


        :param priority: The priority of this SearchLabel.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def slug(self):
        """Gets the slug of this SearchLabel.  # noqa: E501


        :return: The slug of this SearchLabel.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SearchLabel.


        :param slug: The slug of this SearchLabel.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def thumb(self):
        """Gets the thumb of this SearchLabel.  # noqa: E501


        :return: The thumb of this SearchLabel.  # noqa: E501
        :rtype: str
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """Sets the thumb of this SearchLabel.


        :param thumb: The thumb of this SearchLabel.  # noqa: E501
        :type: str
        """

        self._thumb = thumb

    @property
    def thumb_src(self):
        """Gets the thumb_src of this SearchLabel.  # noqa: E501


        :return: The thumb_src of this SearchLabel.  # noqa: E501
        :rtype: str
        """
        return self._thumb_src

    @thumb_src.setter
    def thumb_src(self, thumb_src):
        """Sets the thumb_src of this SearchLabel.


        :param thumb_src: The thumb_src of this SearchLabel.  # noqa: E501
        :type: str
        """

        self._thumb_src = thumb_src

    @property
    def uid(self):
        """Gets the uid of this SearchLabel.  # noqa: E501


        :return: The uid of this SearchLabel.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SearchLabel.


        :param uid: The uid of this SearchLabel.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def updated_at(self):
        """Gets the updated_at of this SearchLabel.  # noqa: E501


        :return: The updated_at of this SearchLabel.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SearchLabel.


        :param updated_at: The updated_at of this SearchLabel.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchLabel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchLabel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchLabel):
            return True

        return self.to_dict() != other.to_dict()
