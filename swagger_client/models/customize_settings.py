# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CustomizeSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'download': 'CustomizeDownloadSettings',
        'features': 'CustomizeFeatureSettings',
        '_import': 'CustomizeImportSettings',
        'index': 'CustomizeIndexSettings',
        'maps': 'CustomizeMapsSettings',
        'search': 'CustomizeSearchSettings',
        'share': 'CustomizeShareSettings',
        'stack': 'CustomizeStackSettings',
        'templates': 'CustomizeTemplateSettings',
        'ui': 'CustomizeUISettings'
    }

    attribute_map = {
        'download': 'download',
        'features': 'features',
        '_import': 'import',
        'index': 'index',
        'maps': 'maps',
        'search': 'search',
        'share': 'share',
        'stack': 'stack',
        'templates': 'templates',
        'ui': 'ui'
    }

    def __init__(self, download=None, features=None, _import=None, index=None, maps=None, search=None, share=None, stack=None, templates=None, ui=None, _configuration=None):  # noqa: E501
        """CustomizeSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._download = None
        self._features = None
        self.__import = None
        self._index = None
        self._maps = None
        self._search = None
        self._share = None
        self._stack = None
        self._templates = None
        self._ui = None
        self.discriminator = None

        if download is not None:
            self.download = download
        if features is not None:
            self.features = features
        if _import is not None:
            self._import = _import
        if index is not None:
            self.index = index
        if maps is not None:
            self.maps = maps
        if search is not None:
            self.search = search
        if share is not None:
            self.share = share
        if stack is not None:
            self.stack = stack
        if templates is not None:
            self.templates = templates
        if ui is not None:
            self.ui = ui

    @property
    def download(self):
        """Gets the download of this CustomizeSettings.  # noqa: E501


        :return: The download of this CustomizeSettings.  # noqa: E501
        :rtype: CustomizeDownloadSettings
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this CustomizeSettings.


        :param download: The download of this CustomizeSettings.  # noqa: E501
        :type: CustomizeDownloadSettings
        """

        self._download = download

    @property
    def features(self):
        """Gets the features of this CustomizeSettings.  # noqa: E501


        :return: The features of this CustomizeSettings.  # noqa: E501
        :rtype: CustomizeFeatureSettings
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this CustomizeSettings.


        :param features: The features of this CustomizeSettings.  # noqa: E501
        :type: CustomizeFeatureSettings
        """

        self._features = features

    @property
    def _import(self):
        """Gets the _import of this CustomizeSettings.  # noqa: E501


        :return: The _import of this CustomizeSettings.  # noqa: E501
        :rtype: CustomizeImportSettings
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """Sets the _import of this CustomizeSettings.


        :param _import: The _import of this CustomizeSettings.  # noqa: E501
        :type: CustomizeImportSettings
        """

        self.__import = _import

    @property
    def index(self):
        """Gets the index of this CustomizeSettings.  # noqa: E501


        :return: The index of this CustomizeSettings.  # noqa: E501
        :rtype: CustomizeIndexSettings
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this CustomizeSettings.


        :param index: The index of this CustomizeSettings.  # noqa: E501
        :type: CustomizeIndexSettings
        """

        self._index = index

    @property
    def maps(self):
        """Gets the maps of this CustomizeSettings.  # noqa: E501


        :return: The maps of this CustomizeSettings.  # noqa: E501
        :rtype: CustomizeMapsSettings
        """
        return self._maps

    @maps.setter
    def maps(self, maps):
        """Sets the maps of this CustomizeSettings.


        :param maps: The maps of this CustomizeSettings.  # noqa: E501
        :type: CustomizeMapsSettings
        """

        self._maps = maps

    @property
    def search(self):
        """Gets the search of this CustomizeSettings.  # noqa: E501


        :return: The search of this CustomizeSettings.  # noqa: E501
        :rtype: CustomizeSearchSettings
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this CustomizeSettings.


        :param search: The search of this CustomizeSettings.  # noqa: E501
        :type: CustomizeSearchSettings
        """

        self._search = search

    @property
    def share(self):
        """Gets the share of this CustomizeSettings.  # noqa: E501


        :return: The share of this CustomizeSettings.  # noqa: E501
        :rtype: CustomizeShareSettings
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this CustomizeSettings.


        :param share: The share of this CustomizeSettings.  # noqa: E501
        :type: CustomizeShareSettings
        """

        self._share = share

    @property
    def stack(self):
        """Gets the stack of this CustomizeSettings.  # noqa: E501


        :return: The stack of this CustomizeSettings.  # noqa: E501
        :rtype: CustomizeStackSettings
        """
        return self._stack

    @stack.setter
    def stack(self, stack):
        """Sets the stack of this CustomizeSettings.


        :param stack: The stack of this CustomizeSettings.  # noqa: E501
        :type: CustomizeStackSettings
        """

        self._stack = stack

    @property
    def templates(self):
        """Gets the templates of this CustomizeSettings.  # noqa: E501


        :return: The templates of this CustomizeSettings.  # noqa: E501
        :rtype: CustomizeTemplateSettings
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this CustomizeSettings.


        :param templates: The templates of this CustomizeSettings.  # noqa: E501
        :type: CustomizeTemplateSettings
        """

        self._templates = templates

    @property
    def ui(self):
        """Gets the ui of this CustomizeSettings.  # noqa: E501


        :return: The ui of this CustomizeSettings.  # noqa: E501
        :rtype: CustomizeUISettings
        """
        return self._ui

    @ui.setter
    def ui(self, ui):
        """Sets the ui of this CustomizeSettings.


        :param ui: The ui of this CustomizeSettings.  # noqa: E501
        :type: CustomizeUISettings
        """

        self._ui = ui

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomizeSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomizeSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomizeSettings):
            return True

        return self.to_dict() != other.to_dict()
