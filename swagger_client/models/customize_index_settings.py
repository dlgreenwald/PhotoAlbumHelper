# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CustomizeIndexSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'convert': 'bool',
        'path': 'str',
        'rescan': 'bool',
        'skip_archived': 'bool'
    }

    attribute_map = {
        'convert': 'convert',
        'path': 'path',
        'rescan': 'rescan',
        'skip_archived': 'skipArchived'
    }

    def __init__(self, convert=None, path=None, rescan=None, skip_archived=None, _configuration=None):  # noqa: E501
        """CustomizeIndexSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._convert = None
        self._path = None
        self._rescan = None
        self._skip_archived = None
        self.discriminator = None

        if convert is not None:
            self.convert = convert
        if path is not None:
            self.path = path
        if rescan is not None:
            self.rescan = rescan
        if skip_archived is not None:
            self.skip_archived = skip_archived

    @property
    def convert(self):
        """Gets the convert of this CustomizeIndexSettings.  # noqa: E501


        :return: The convert of this CustomizeIndexSettings.  # noqa: E501
        :rtype: bool
        """
        return self._convert

    @convert.setter
    def convert(self, convert):
        """Sets the convert of this CustomizeIndexSettings.


        :param convert: The convert of this CustomizeIndexSettings.  # noqa: E501
        :type: bool
        """

        self._convert = convert

    @property
    def path(self):
        """Gets the path of this CustomizeIndexSettings.  # noqa: E501


        :return: The path of this CustomizeIndexSettings.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CustomizeIndexSettings.


        :param path: The path of this CustomizeIndexSettings.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def rescan(self):
        """Gets the rescan of this CustomizeIndexSettings.  # noqa: E501


        :return: The rescan of this CustomizeIndexSettings.  # noqa: E501
        :rtype: bool
        """
        return self._rescan

    @rescan.setter
    def rescan(self, rescan):
        """Sets the rescan of this CustomizeIndexSettings.


        :param rescan: The rescan of this CustomizeIndexSettings.  # noqa: E501
        :type: bool
        """

        self._rescan = rescan

    @property
    def skip_archived(self):
        """Gets the skip_archived of this CustomizeIndexSettings.  # noqa: E501


        :return: The skip_archived of this CustomizeIndexSettings.  # noqa: E501
        :rtype: bool
        """
        return self._skip_archived

    @skip_archived.setter
    def skip_archived(self, skip_archived):
        """Sets the skip_archived of this CustomizeIndexSettings.


        :param skip_archived: The skip_archived of this CustomizeIndexSettings.  # noqa: E501
        :type: bool
        """

        self._skip_archived = skip_archived

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomizeIndexSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomizeIndexSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomizeIndexSettings):
            return True

        return self.to_dict() != other.to_dict()
