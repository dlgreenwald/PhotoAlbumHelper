# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CustomizeUISettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'language': 'str',
        'scrollbar': 'bool',
        'theme': 'str',
        'time_zone': 'str',
        'zoom': 'bool'
    }

    attribute_map = {
        'language': 'language',
        'scrollbar': 'scrollbar',
        'theme': 'theme',
        'time_zone': 'timeZone',
        'zoom': 'zoom'
    }

    def __init__(self, language=None, scrollbar=None, theme=None, time_zone=None, zoom=None, _configuration=None):  # noqa: E501
        """CustomizeUISettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._language = None
        self._scrollbar = None
        self._theme = None
        self._time_zone = None
        self._zoom = None
        self.discriminator = None

        if language is not None:
            self.language = language
        if scrollbar is not None:
            self.scrollbar = scrollbar
        if theme is not None:
            self.theme = theme
        if time_zone is not None:
            self.time_zone = time_zone
        if zoom is not None:
            self.zoom = zoom

    @property
    def language(self):
        """Gets the language of this CustomizeUISettings.  # noqa: E501


        :return: The language of this CustomizeUISettings.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CustomizeUISettings.


        :param language: The language of this CustomizeUISettings.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def scrollbar(self):
        """Gets the scrollbar of this CustomizeUISettings.  # noqa: E501


        :return: The scrollbar of this CustomizeUISettings.  # noqa: E501
        :rtype: bool
        """
        return self._scrollbar

    @scrollbar.setter
    def scrollbar(self, scrollbar):
        """Sets the scrollbar of this CustomizeUISettings.


        :param scrollbar: The scrollbar of this CustomizeUISettings.  # noqa: E501
        :type: bool
        """

        self._scrollbar = scrollbar

    @property
    def theme(self):
        """Gets the theme of this CustomizeUISettings.  # noqa: E501


        :return: The theme of this CustomizeUISettings.  # noqa: E501
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this CustomizeUISettings.


        :param theme: The theme of this CustomizeUISettings.  # noqa: E501
        :type: str
        """

        self._theme = theme

    @property
    def time_zone(self):
        """Gets the time_zone of this CustomizeUISettings.  # noqa: E501


        :return: The time_zone of this CustomizeUISettings.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this CustomizeUISettings.


        :param time_zone: The time_zone of this CustomizeUISettings.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def zoom(self):
        """Gets the zoom of this CustomizeUISettings.  # noqa: E501


        :return: The zoom of this CustomizeUISettings.  # noqa: E501
        :rtype: bool
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this CustomizeUISettings.


        :param zoom: The zoom of this CustomizeUISettings.  # noqa: E501
        :type: bool
        """

        self._zoom = zoom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomizeUISettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomizeUISettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomizeUISettings):
            return True

        return self.to_dict() != other.to_dict()
